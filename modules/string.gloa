--[[============================================================
--=
--=  GlÃ³a string module
--=
--==============================================================

	countString, countPattern
	eachPatternMatch
	escapePattern
	find, findPattern, matchPattern
	getBinaryRepresentationOfLuaFunction
	getByte, bytesToString
	repeat
	replace, replacePattern, replaceWithPattern, replaceWithFunction, replacePatternWithPattern, replacePatternWithFunction
	reverse
	toLower, toUpper

--============================================================]]

export getByte :: (s:string, pos:int=1)     -> int|none !foreign lua "string.byte"
export getByte :: (s:string, start,end:int) -> ...int   !foreign lua "string.byte"
export bytesToString :: (...:int) -> string !foreign lua "string.char"

local _find :: (s:string, needle:string, startPos:int, plain:bool) -> (start:int|none, end:int|none, ...:string|int) !foreign lua "string.find"

export find :: (s:string, needle:string, startPos:int=1) -> (found:bool, start:int, end:int) {
	local i1, i2 = _find(s, needle, startPos, true)
	if i1 == nil  return false, 0, 0
	return true, cast(int) i1, cast(int) i2
}

export findPattern :: (s:string, pattern:string, startPos:int=1) -> (found:bool, start:int, end:int, ...:string|int) {
	local helper :: (start:int|none, end:int|none, ...:string|int) -> (found:bool, start:int, end:int, ...:string|int) {
		if start == nil  return false, 0, 0
		return true, cast(int) start, cast(int) end, ...
	}
	return helper(_find(s, pattern, startPos, false))
}

export matchPattern :: (s:string, pattern:string, startPos:int=1) -> (found:bool, match1,...:string|int) {
	local helper :: (match1,...:string|int) -> (found:bool, match1,...:string|int) {
		if match1 == NULL  return false, ""
		return true, match1, ...
	}
	local match :: (s:string, pattern:string, startPos:int) -> (match1,...:string|int) !foreign lua "string.match"

	return helper(match(s, pattern, startPos))
}

local StringMatchIterator :: (_1,_2:none) -> (match:string|int|none) -- @Temp until we can handle variable amounts of values from iterators in 'for' loops (if that's a thing we actually want in the language).
-- local StringMatchIterator :: (_1,_2:none) -> (match:string|int|none, ...:string|int) -- How many matches there are actually depend on the pattern. Can this be solved in some nice way using metaprogramming? Do we require the pattern to be constant so we can count parentheses? Also, how do we hande "()" in patterns in general? Lots of tasks for metaprogramming!
export eachPatternMatch :: (s:string, pattern:string, startPos:int=1) -> StringMatchIterator, none, none !foreign lua "string.gmatch"

local gsub :: (s:string, pattern:string, replacement:any, maxReplacements:int|none) -> (s:string, replacements:int) !foreign lua "string.gsub"

-- Escape the following magic characters: ^$()%.[]*+-?
export escapePattern :: (s:string) -> (pattern:string) {
	s = gsub(s, "[-+*^?$.%%()[%]]", "%%%0", nil)
	s = gsub(s, "%z",               "%%z",  nil)
	return s
}

export replace :: (s:string, needle:string, replacementString:string) -> (s:string, replacements:int) {
	needle            = escapePattern(needle)
	replacementString = gsub(replacementString, "%%", "%%%%", nil)
	return gsub(s, needle, replacementString, nil)
}
export replace :: (s:string, needle:string, replacementString:string, maxReplacements:int) -> (s:string, replacements:int) {
	needle            = escapePattern(needle)
	replacementString = gsub(replacementString, "%%", "%%%%", nil)
	return gsub(s, needle, replacementString, maxReplacements)
}
export replace :: (s:string, needle:string, replacementTable:table--[[@Robustness: Use struct.]]) -> (s:string, replacements:int) {
	needle = escapePattern(needle)
	return gsub(s, needle, replacementTable, nil)
}
export replace :: (s:string, needle:string, replacementTable:table--[[@Robustness: Use struct.]], maxReplacements:int) -> (s:string, replacements:int) {
	needle = escapePattern(needle)
	return gsub(s, needle, replacementTable, maxReplacements)
}

export replacePattern :: (s:string, pattern:string, replacementString:string) -> (s:string, replacements:int) {
	replacementString = gsub(replacementString, "%%", "%%%%", nil)
	return gsub(s, pattern, replacementString, nil)
}
export replacePattern :: (s:string, pattern:string, replacementString:string, maxReplacements:int) -> (s:string, replacements:int) {
	replacementString = gsub(replacementString, "%%", "%%%%", nil)
	return gsub(s, pattern, replacementString, maxReplacements)
}
export replacePattern :: (s:string, pattern:string, replacementTable:table--[[@Robustness: Use struct.]]) -> (s:string, replacements:int) {
	return gsub(s, pattern, replacementTable, nil)
}
export replacePattern :: (s:string, pattern:string, replacementTable:table--[[@Robustness: Use struct.]], maxReplacements:int) -> (s:string, replacements:int) {
	return gsub(s, pattern, replacementTable, maxReplacements)
}

export replaceWithPattern :: (s:string, needle:string, replacementPattern:string) -> (s:string, replacements:int) {
	needle = escapePattern(needle)
	return gsub(s, needle, replacementPattern, nil)
}
export replaceWithPattern :: (s:string, needle:string, replacementPattern:string, maxReplacements:int) -> (s:string, replacements:int) {
	needle = escapePattern(needle)
	return gsub(s, needle, replacementPattern, maxReplacements)
}

export replacePatternWithPattern :: (s:string, pattern:string, replacementPattern:string)                      -> (s:string, replacements:int) !foreign lua "string.gsub"
export replacePatternWithPattern :: (s:string, pattern:string, replacementPattern:string, maxReplacements:int) -> (s:string, replacements:int) !foreign lua "string.gsub"

local checkReplacementFunction :: (funcName:string, info:TypeInfo) {
	!import "basic"

	-- @UX: Can we show the (first) calling location somehow?
	if info.tag ~= TypeTag.FUNCTION  errorf(2, "%s() was called somewhere with a non-function as replacement value.", funcName)

	local funcInfo = cast(TypeInfoFunction) info

	if #funcInfo.argumentsOut ~= 1
		errorf(2, "%s() was called somewhere with a function that doesn't return exactly one value. (It returns %d)", funcName, #funcInfo.argumentsOut)
	if funcInfo.argumentsOut[1].argumentType ~= string|none
		errorf(2, "%s() was called somewhere with a function that doesn't return string|none.", funcName)
	-- We don't care about funcInfo.argumentsIn.
}

export replaceWithFunction :: (s:string, needle:string, func:$T) -> (s:string, replacements:int) {
	!run checkReplacementFunction("replaceWithFunction", type_info(T))
	needle = escapePattern(needle)
	return gsub(s, needle, func, nil)
}
export replaceWithFunction :: (s:string, needle:string, func:$T, maxReplacements:int) -> (s:string, replacements:int) {
	!run checkReplacementFunction("replaceWithFunction", type_info(T))
	needle = escapePattern(needle)
	return gsub(s, needle, func, maxReplacements)
}

export replacePatternWithFunction :: (s:string, pattern:string, func:$T) -> (s:string, replacements:int) {
	!run checkReplacementFunction("replacePatternWithFunction", type_info(T))
	return gsub(s, pattern, func, nil)
}
export replacePatternWithFunction :: (s:string, pattern:string, func:$T, maxReplacements:int) -> (s:string, replacements:int) {
	!run checkReplacementFunction("replacePatternWithFunction", type_info(T))
	return gsub(s, pattern, func, maxReplacements)
}

-- Note: Strings can be repeated like this: "foo" * 5
export repeat :: (s:string, times:int) -> string !foreign lua "string.rep"
-- export repeat :: (s:string, times:int, separator:string) -> string { @Incomplete }

export reverse :: (s:string) -> string !foreign lua "string.reverse"

-- Positive indices are counted from the start of the string - negative are counted from the end.
export getSubstring :: (s:string, fromIndex:int, toIndex:int=-1) -> string !foreign lua "string.sub"

-- These depend on the current locale. Often these only work on ASCII characters.
export toLower :: (s:string) -> string !foreign lua "string.lower"
export toUpper :: (s:string) -> string !foreign lua "string.upper"

-- @Compiler: Can we somehow restrict the "any" type to only functions (or structs or whatever)? Do we need metaprogramming for that? :RestrictAnyToTypeTag
export getBinaryRepresentationOfLuaFunction :: (func:any) -> string !foreign lua "string.dump"
-- export getBinaryRepresentationOfLuaFunction :: (func:any_function) -> string !foreign lua "string.dump"

export countString :: (s:string, needle:string) -> int {
	local _, count = replaceWithPattern(s, needle, "%0")
	return count
}
export countPattern :: (s:string, pattern:string) -> int {
	local _, count = replacePatternWithPattern(s, pattern, "%0")
	return count
}
