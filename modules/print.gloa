--[[============================================================
--=
--=  GlÃ³a advanced printing module
--=
--==============================================================

	print
	printf
	printNice

--============================================================]]

!import "string"
local basic   :: !import "basic"
local lua     :: !import "lua"
local LuaType :: lua.LuaType

local stdoutWrite :: (...:int|float|string|Type) !foreign lua "io.write"

export print  :: basic.print
export printf :: basic.printf

export printNice :: (v:$T) { _printNice(v, T, 0) }
export printNice :: (prefix:string, v:$T) { stdoutWrite(prefix) ; _printNice(v, T, 0) }

local _printNice :: (v:any, T:Type, indent:int) {
	-- @Incomplete: Recursive printing for table-likes.
	-- @Polish: Better member printing.

	local isLuaValueTableLike :: (v:any) -> bool {
		local luaType = lua.getType(v)
		return luaType == LuaType.TABLE or luaType == LuaType.USERDATA
	}

	using basic
	using TypeTag

	local typeInfo  = getTypeInfo(T)
	local indentStr = ""--"\t" * indent

	if typeInfo.tag == {
		case INT:
			printf("%.0f", cast(int) v)

		case FLOAT:
			if lua.getType(v) ~= LuaType.NUMBER { print(v) ; return }

			local nStr = toString(v)
			stdoutWrite(nStr)
			if not find(nStr, ".")  stdoutWrite(".0")
			stdoutWrite("\n")

		case ENUM:
			local enumInfo = cast(TypeInfoEnum) typeInfo
			-- if enumInfo.name  stdoutWrite(indentStr, enumInfo.name, ": ") -- @Incomplete: Print "enumName.enumMemberName" before the literal value.
			_printNice(v, enumInfo.memberType, indent)

		case STRING:
			if lua.getType(v) ~= LuaType.STRING { print(v) ; return }

			stdoutWrite(indentStr, '"', cast(string) v, '"\n')

		case TABLE:
			if lua.getType(v) ~= LuaType.TABLE { print(v) ; return }

			stdoutWrite(indentStr, toString(v), " {\n")
			for cast(table) v {
				stdoutWrite(indentStr, "\t", toString(itIndex), " = ", toString(it), "\n")
			}
			stdoutWrite(indentStr, "}\n")

		case ARRAY:
			if not isLuaValueTableLike(v) { print(v) ; return }

			stdoutWrite(indentStr, toString(v), " {\n")
			for cast([]any) v {
				stdoutWrite(indentStr, "\t", toString(itIndex), " = ", toString(it), "\n")
			}
			stdoutWrite(indentStr, "}\n")

		case STRUCT:
			if not isLuaValueTableLike(v) { print(v) ; return }

			local structInfo = cast(TypeInfoStruct) typeInfo
			local obj        = cast(table) v

			if structInfo.kind == structInfo.Kind.TABLE {
				_printNice(obj, table, indent)
				return
			}

			local objStr = toString(obj)
			objStr       = replacePattern(objStr, "^table: ",    "")
			objStr       = replacePattern(objStr, "^userdata: ", "")

			stdoutWrite(indentStr, structInfo.name?:"(struct)", ": ", objStr, " {\n")

			for member: structInfo.members {
				local name = member.name
				stdoutWrite(indentStr, "\t", name, " = ", toString(obj[name]), "\n")
			}

			if structInfo.kind == structInfo.Kind.ARRAY {
				for cast([]any) v  stdoutWrite(indentStr, "\t", toString(itIndex), " = ", toString(it), "\n")
			}

			stdoutWrite(indentStr, "}\n")

		case TYPE:
			if lua.getType(v) ~= LuaType.NUMBER { print(v) ; return }

			-- @Incomplete: Print the type info struct instead of just the ID.
			printf("type: %.0f", cast(int) v)

		case ANY:
			if lua.getType(v) == {
				case LuaType.BOOLEAN: _printNice(v, bool,   indent)
				case LuaType.NIL:     _printNice(v, none,   indent)
				case LuaType.NUMBER:  _printNice(v, float,  indent)
				case LuaType.STRING:  _printNice(v, string, indent)
				case LuaType.TABLE:   _printNice(v, table,  indent)
				case:                 print(v)
			}

		case:
			print(v)
	}
}
