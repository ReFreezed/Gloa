--[[============================================================
--=
--=  Gl√≥a preload module
--=
--=  This module is imported automatically in every file and
--=  thus everything here is always available everywhere.
--=
--==============================================================

	TypeTag

	SourceCodeLocation
	TypeInfo, TypeInfoArray, TypeInfoCompound, TypeInfoEnum, TypeInfoFunction, TypeInfoStruct, TypeInfoVararg

--============================================================]]

export TypeTag :: enum {
	ANY         :: !compiler "typeTagAny",
	ARRAY       :: !compiler "typeTagArray",
	BOOL        :: !compiler "typeTagBool",
	COMPOUND    :: !compiler "typeTagCompound",
	ENUM        :: !compiler "typeTagEnum",
	FLOAT       :: !compiler "typeTagFloat",
	FUNCTION    :: !compiler "typeTagFunction",
	INT         :: !compiler "typeTagInt",
	NONE        :: !compiler "typeTagNone",
	PLACEHOLDER :: !compiler "typeTagPlaceholder",
	STRING      :: !compiler "typeTagString",
	STRUCT      :: !compiler "typeTagStruct",
	TABLE       :: !compiler "typeTagTable",
	TYPE        :: !compiler "typeTagType",
	VARARG      :: !compiler "typeTagVararg",
	VOID        :: !compiler "typeTagVoid",
}

export TypeInfo :: !foreign struct {
	tag = TypeTag.VOID,
}

export TypeInfoArray :: !foreign struct {
	using TypeInfo,
	itemType: type,
}
export TypeInfoVararg :: !foreign struct {
	using TypeInfo,
	itemType: type,
}

local Argument :: !foreign struct {
	argumentType: type,
}
export TypeInfoFunction :: !foreign struct {
	using TypeInfo,
	argumentsIn:  []Argument,
	argumentsOut: []Argument,
}

local StructMember :: !foreign struct {
	name: string,
	memberType: type,
}
export TypeInfoStruct :: !foreign struct {
	using TypeInfo,
	members: []StructMember,
}

local EnumMember :: !foreign struct {
	name: string,
}
export TypeInfoEnum :: !foreign struct {
	using TypeInfo,
	memberType: type,
	members: []EnumMember,
}

export TypeInfoCompound :: !foreign struct {
	using TypeInfo,
	types: []type,
}

export SourceCodeLocation :: !foreign struct {
	filePath:   string, -- Note: This will not be a real file path if the location was generated from a string (i.e. from !body_text).  @Compiler @UX: Change this fact.
	lineNumber: int,
	position:   int,    -- Byte position (after line ending normalization).
}
