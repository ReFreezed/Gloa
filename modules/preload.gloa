--[[============================================================
--=
--=  GlÃ³a preload module
--=
--=  This module is imported automatically in every file and
--=  thus everything here is always available everywhere.
--=
--==============================================================

	getAllTypes, getTypeInfo

	-- Enums:
	TypeTag

	-- Types:
	SourceCodeLocation
	Table
	TypeInfo, TypeInfoArray, TypeInfoCompound, TypeInfoEnum, TypeInfoFunction, TypeInfoStruct, TypeInfoVararg

--============================================================]]

export TypeTag :: enum {
	ANY         :: !compiler "typeTagAny",
	ARRAY       :: !compiler "typeTagArray",
	BOOL        :: !compiler "typeTagBool",
	COMPOUND    :: !compiler "typeTagCompound",
	ENUM        :: !compiler "typeTagEnum",
	FLOAT       :: !compiler "typeTagFloat",
	FUNCTION    :: !compiler "typeTagFunction",
	INT         :: !compiler "typeTagInt",
	NONE        :: !compiler "typeTagNone",
	STRING      :: !compiler "typeTagString",
	STRUCT      :: !compiler "typeTagStruct",
	TABLE       :: !compiler "typeTagTable",
	TYPE        :: !compiler "typeTagType",
	VARARG      :: !compiler "typeTagVararg",
	VOID        :: !compiler "typeTagVoid",
}

export TypeInfo :: !foreign struct {
	tag: TypeTag,
	id:  Type,
}

export TypeInfoArray :: !foreign struct {
	using TypeInfo,
	itemType: Type,
}
export TypeInfoVararg :: !foreign struct {
	using TypeInfo,
	itemType: Type,
}

export TypeInfoFunction :: !foreign struct {
	Argument :: !foreign struct {
		argumentType: Type,
	},

	using TypeInfo,
	argumentsIn:  []Argument,
	argumentsOut: []Argument,
}

export TypeInfoStruct :: !foreign struct {
	Kind :: enum {
		NORMAL :: 1,
		TABLE  :: 2,
		ARRAY  :: 3,
	},
	Member :: !foreign struct {
		name:       string,
		memberType: Type,
		notes:      []Type, -- @Cleanup: Should this be here? They are already on CodeDeclaration (where they truly belong).
	},

	using TypeInfo,
	name:      string, -- May be empty.
	kind:      Kind,
	keyType:   Type,
	valueType: Type,
	members:   []Member,
}

export TypeInfoEnum :: !foreign struct {
	Member :: !foreign struct {
		name:  string,
		notes: []Type, -- @Cleanup: Should this be here? They are already on CodeDeclaration (where they truly belong).
	},

	using TypeInfo,
	name:       string, -- May be empty.
	memberType: Type,
	members:    []Member,
}

export TypeInfoCompound :: !foreign struct {
	using TypeInfo,
	types: []Type,
}

export SourceCodeLocation :: !foreign struct {
	filePath:   string, -- Note: This will not be a real file path if the location was generated from a string (i.e. from !body_text).  @Compiler @UX: Change this fact.
	lineNumber: int,
	position:   int,    -- Byte position (after line ending normalization).  @Cleanup: Rename to filePosition.
}

--
-- This is like the native table type but keys and values are restricted to one type.
--
-- Note: KeyType cannot be string because KeyType and ValueType become static members
-- of the struct and there would be ambiguity when accessing fields of instances.
-- @Compiler: Can we enable string keys in polymorphic table-like structs somehow?
--
export Table :: struct (KeyType:Type, ValueType:Type) {
	!key:   KeyType,
	!value: ValueType,
}

-- Get a list of all types. During compilation this returns only the types available so far.
-- Warning: If this function is used in runtime code the size of the program may become lot bigger if there are many types.
export getAllTypes :: () -> []Type !foreign compiler "getAllTypes"

-- Get info for a type.
-- Warning: If this function is used in runtime code the size of the program may become lot bigger if there are many types. type_info() should be used instead whenever possible.
-- @Incomplete: Can we make this function polymorphic and use type_info() inside? I think so! 2021-07-25
export getTypeInfo :: (T:Type) -> TypeInfo !foreign compiler "getTypeInfo"
