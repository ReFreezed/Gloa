--[[============================================================
--=
--=  LÃ–VE bindings (love2d.org)
--=  love.graphics
--=
--=  Supported versions: 11.3
--=
--==============================================================

	clear
	coordsRotate, coordsScale, coordsShear, coordsTranslate, coordsReset
	draw, drawAnchored
	drawCircleFill, drawCircleLine
	drawEllipseFill, drawEllipseLine
	drawLine
	drawRectangleFill, drawRectangleLine
	drawText
	getBackgroundColor, setBackgroundColor
	getBaseline, getAscent, getDescent
	getBlendMode, setBlendMode, resetBlendMode
	getCanvas, setCanvas, setNoCanvas
	getColor, setColor
	getColorMask, setColorMask, resetColorMask
	getDefaultFilter, setDefaultFilter
	getDepth
	getDepthSampleMode, setDepthSampleMode, removeDepthSampleMode
	getDPIScale
	getFilter, setFilter
	getFlags
	getFont, setFont, setNewFont
	getFormat
	getLayerCount
	getLineHeight, setLineHeight
	getLineJoin, setLineJoin
	getLineStyle, setLineStyle
	getLineWidth, setLineWidth
	getMipmapCount, getMipmapFilter, setMipmapFilter, removeMipmapFilter
	getPointSize, setPointSize
	getScissor, setScissor, intersectScissor, resetScissor
	getShader, setShader
	getWindowDimensions, getWindowWidth, getWindowHeight
	globalToScreen, screenToGlobal
	isWireframe, setWireframe
	newImage
	pushAll, pushTransform, pop
	resetAll

	-- Types:
	Canvas, CanvasSetup
	Drawable
	Font
	Image, ImageFlags
	Texture

	-- Enums:
	AlignMode
	ArcType
	BlendMode, BlendAlphaMode
	CanvasFormat, CanvasMipmapMode
	CompareMode
	CullMode
	DrawMode
	FilterMode
	GraphicsFeature, GraphicsLimit
	HintingMode
	IndexDataType
	LineJoin, LineStyle
	MeshDrawMode
	MipmapMode
	PixelFormat
	SpriteBatchUsage
	StackType
	StencilAction
	TextureType
	VertexAttributeStep
	WrapMode

--============================================================]]

!import "loveRevised/basic"
local LI :: !import "loveRevised/image" -- ImageData



----------------------------------------------------------------
-- Enums.
----------------------------------------------------------------

export AlignMode           :: enum { CENTER::"center", LEFT::"left", RIGHT::"right", JUSTIFY::"justify" }
export ArcType             :: enum { PIE::"pie", OPEN::"open", CLOSED::"closed" }
export CullMode            :: enum { BACK::"back", FRONT::"front", NONE::"none" }
export FilterMode          :: enum { LINEAR::"linear", NEAREST::"nearest" }
export HintingMode         :: enum { NORMAL::"normal", LIGHT::"light", MONO::"mono", NONE::"none" }
export IndexDataType       :: enum { UINT16::"uint16", UINT32::"uint32" }
export MeshDrawMode        :: enum { FAN::"fan", STRIP::"strip", TRIANGLES::"triangles", POINTS::"points" }
export MipmapMode          :: enum { NONE::"none", MANUAL::"manual", AUTO::"auto" }
export SpriteBatchUsage    :: enum { DYNAMIC::"dynamic", STATIC::"static", STREAM::"stream" }
export TextureType         :: enum { TWOD::"2d", ARRAY::"array", CUBE::"cube", VOLUME::"volume" } -- @Cleanup: A better name for "2d"...
export VertexAttributeStep :: enum { PER_VERTEX::"pervertex", PER_INSTANCE::"perinstance" }
export WrapMode            :: enum { CLAMP::"clamp", REPEAT::"repeat", MIRRORED_REPEAT::"mirroredrepeat", CLAMP_ZERO::"clampzero" }
-- Not needed:
-- export DrawMode  :: enum { FILL::"fill", LINE::"line" }
-- export StackType :: enum { TRANSFORM::"transform", ALL::"all" }

export CanvasFormat     :: PixelFormat
export CanvasMipmapMode :: enum { NONE::"none", AUTO::"auto", MANUAL::"manual" }

export LineJoin  :: enum { MITER::"miter", NONE::"none", BEVEL::"bevel" }
export LineStyle :: enum { ROUGH::"rough", SMOOTH::"smooth" }

export BlendMode :: enum {
	ALPHA    :: "alpha",
	REPLACE  :: "replace",
	SCREEN   :: "screen",
	ADD      :: "add",
	SUBTRACT :: "subtract",
	MULTIPLY :: "multiply",
	LIGHTEN  :: "lighten",
	DARKEN   :: "darken",
}
export BlendAlphaMode :: enum {
	ALPHAMULTIPLY :: "alphamultiply",
	PREMULTIPLIED :: "premultiplied",
}

export CompareMode :: enum {
	EQUAL            :: "equal",
	NOT_EQUAL        :: "notequal",
	LESS             :: "less",
	LESS_OR_EQUAL    :: "lequal",
	GREATER_OR_EQUAL :: "gequal",
	GREATER          :: "greater",
	NEVER            :: "never",
	ALWAYS           :: "always",
}

export GraphicsFeature :: enum {
	CLAMP_ZERO           :: "clampzero",
	LIGHTEN              :: "lighten",
	MULTI_CANVAS_FORMATS :: "multicanvasformats",
	GLSL3                :: "glsl3",
	INSTANCING           :: "instancing",
	FULL_NPOT            :: "fullnpot",
	PIXEL_SHADER_HIGHP   :: "pixelshaderhighp",
	SHADER_DERIVATIVES   :: "shaderderivatives",
}
export GraphicsLimit :: enum {
	POINT_SIZE          :: "pointsize",
	TEXTURE_SIZE        :: "texturesize",
	MULTI_CANVAS        :: "multicanvas",
	CANVAS_MSAA         :: "canvasmsaa",
	TEXTURE_LAYERS      :: "texturelayers",
	VOLUME_TEXTURE_SIZE :: "volumetexturesize",
	CUBE_TEXTURE_SIZE   :: "cubetexturesize",
	ANISOTROPY          :: "anisotropy",
}

export StencilAction :: enum {
	REPLACE :: "replace",
	INCREMENT :: "increment",
	DECREMENT :: "decrement",
	INCREMENTWRAP :: "incrementwrap",
	DECREMENTWRAP :: "decrementwrap",
	INVERT :: "invert",
}

export PixelFormat :: enum {
	-- Normal color formats.
	NORMAL           :: "normal",
	R8               :: "r8",
	RG8              :: "rg8",
	RGBA8            :: "rgba8",
	SRGBA8           :: "srgba8",
	RGBA16           :: "rgba16",
	R16F             :: "r16f",
	RG16F            :: "rg16f",
	RGBA16F          :: "rgba16f",
	R32F             :: "r32f",
	RG32F            :: "rg32f",
	RGBA32F          :: "rgba32f",
	RGBA4            :: "rgba4",
	RGB5A1           :: "rgb5a1",
	RGB565           :: "rgb565",
	RGB10A2          :: "rgb10a2",
	RG11B10F         :: "rg11b10f",
	-- Depth/stencil formats.
	STENCIL8         :: "stencil8",
	DEPTH16          :: "depth16",
	DEPTH24          :: "depth24",
	DEPTH32F         :: "depth32f",
	DEPTH24STENCIL8  :: "depth24stencil8",
	DEPTH32FSTENCIL8 :: "depth32fstencil8",
	-- Compressed formats, desktop GPUs.
	DXT1             :: "DXT1",
	DXT3             :: "DXT3",
	DXT5             :: "DXT5",
	BC4              :: "BC4",
	BC4S             :: "BC4s",
	BC5              :: "BC5",
	BC5S             :: "BC5s",
	BC6H             :: "BC6h",
	BC6HS            :: "BC6hs",
	BC7              :: "BC7",
	-- Compressed formats, mobile GPUs.
	ETC1             :: "ETC1",
	ETC2RGB          :: "ETC2rgb",
	ETC2RGBA         :: "ETC2rgba",
	ETC2RGBA1        :: "ETC2rgba1",
	EACR             :: "EACr",
	EACRS            :: "EACrs",
	EACRG            :: "EACrg",
	EACRGS           :: "EACrgs",
	PVR1RGB2         :: "PVR1rgb2",
	PVR1RGB4         :: "PVR1rgb4",
	PVR1RGBA2        :: "PVR1rgba2",
	PVR1RGBA4        :: "PVR1rgba4",
	ASTC4X4          :: "ASTC4x4",
	ASTC5X4          :: "ASTC5x4",
	ASTC5X5          :: "ASTC5x5",
	ASTC6X5          :: "ASTC6x5",
	ASTC6X6          :: "ASTC6x6",
	ASTC8X5          :: "ASTC8x5",
	ASTC8X6          :: "ASTC8x6",
	ASTC8X8          :: "ASTC8x8",
	ASTC10X5         :: "ASTC10x5",
	ASTC10X6         :: "ASTC10x6",
	ASTC10X8         :: "ASTC10x8",
	ASTC10X10        :: "ASTC10x10",
	ASTC12X10        :: "ASTC12x10",
	ASTC12X12        :: "ASTC12x12",
}



----------------------------------------------------------------
-- Types.
----------------------------------------------------------------

export Drawable :: !foreign struct {
	using Object,
}

export Texture :: !foreign struct {
	using Drawable,

	getDepth      :: (texture:Texture) -> int !foreign method "getDepth",
	getLayerCount :: (texture:Texture) -> int !foreign method "getLayerCount",

	getDepthSampleMode :: (texture:Texture) -> (modeIsSet:bool, b:CompareMode) {
		local helper :: (texture:Texture) -> CompareMode|none !foreign method "getDepthSampleMode"

		local mode = helper(texture)
		if mode == nil  return false, CompareMode.EQUAL

		return true, cast(CompareMode)mode
	},
	setDepthSampleMode    :: (texture:Texture, mode:CompareMode) !foreign method "setDepthSampleMode",
	removeDepthSampleMode :: (texture:Texture)                   !foreign method "setDepthSampleMode",

	getDimensions :: (texture:Texture) -> int, int !foreign method "getDimensions",
	getWidth      :: (texture:Texture) -> int      !foreign method "getWidth",
	getHeight     :: (texture:Texture) -> int      !foreign method "getHeight",

	getPixelDimensions :: (texture:Texture) -> int, int !foreign method "getPixelDimensions",
	getPixelWidth      :: (texture:Texture) -> int      !foreign method "getPixelWidth",
	getPixelHeight     :: (texture:Texture) -> int      !foreign method "getPixelHeight",

	getFilter :: (texture:Texture) -> (min,mag:FilterMode, anisotropy:int) !foreign method "getFilter",
	setFilter :: (texture:Texture, min,mag:FilterMode, anisotropy=1)       !foreign method "setFilter",

	getMipmapCount :: (texture:Texture) -> int !foreign method "getMipmapCount",

	getMipmapFilter :: (texture:Texture) -> (hasFilter:bool, mode:FilterMode, sharpness:float) {
		local helper :: (texture:Texture) -> (mode:FilterMode|none, sharpness:float) !foreign method "getMipmapFilter"

		local mode, sharpness = helper(texture)
		if mode == nil  return false, FilterMode.LINEAR, 0

		return true, cast(FilterMode)mode, sharpness
	},
	setMipmapFilter    :: (texture:Texture, mode:FilterMode, sharpness=0.0) !foreign method "setMipmapFilter",
	removeMipmapFilter :: (texture:Texture)                                 !foreign method "setMipmapFilter",

	getWrap :: (texture:Texture) -> (horizontal,vertical,depth:WrapMode) !foreign method "getWrap",
	setWrap :: (texture:Texture, horizontal,vertical,depth:WrapMode)     !foreign method "setWrap",

	getDPIScale :: (texture:Texture) -> float !foreign method "getDPIScale",

	getFormat :: (texture:Texture) -> PixelFormat !foreign method "getFormat",

	getTextureType :: (texture:Texture) -> TextureType !foreign method "getTextureType",

	isReadable :: (texture:Texture) -> bool !foreign method "isReadable",
}

export Image :: !foreign struct {
	using Texture,

	getFlags      :: (image:Image) -> ImageFlags !foreign method "getFlags",
	isCompressed  :: (image:Image) -> bool !foreign method "isCompressed",
	replacePixels :: (image:Image, data:LI.ImageData, slice:int, mipmap=1, x=0, y=0, reloadMipmaps=false) -> bool !foreign method "replacePixels",
}

export Canvas :: !foreign struct {
	using Texture,

	generateMipmaps :: (canvas:Canvas)                  !foreign method "generateMipmaps",
	getMSAA         :: (canvas:Canvas) -> (samples:int) !foreign method "getMSAA",
	getMipmapMode   :: (canvas:Canvas) -> MipmapMode    !foreign method "getMipmapMode",
	renderTo        :: (canvas:Canvas, func:()->void)   !foreign method "renderTo",

	newImageData :: (canvas:Canvas)                                                   -> LI.ImageData !foreign method "newImageData",
	newImageData :: (canvas:Canvas, slice:int, mipmap:int, x,y:int, width,height:int) -> LI.ImageData !foreign method "newImageData",
}

export Font :: !foreign struct {
	using Object,

	getBaseline :: (font:Font) -> int !foreign method "getBaseline",
	getAscent   :: (font:Font) -> int !foreign method "getAscent",
	getDescent  :: (font:Font) -> int !foreign method "getDescent",

	getFilter :: (font:Font) -> (min,mag:FilterMode, anisotropy:int) !foreign method "getFilter",
	setFilter :: (font:Font, min,mag:FilterMode, anisotropy=1)       !foreign method "setFilter",

	getWidth  :: (font:Font, text:string) -> int !foreign method "getWidth",
	getHeight :: (font:Font)              -> int !foreign method "getHeight",
	getWrap   :: (font:Font, text:string, wrapLimit:int) -> (width:int, lines:[]string) !foreign method "getWrap",

	getLineHeight :: (font:Font) -> float          !foreign method "getLineHeight",
	setLineHeight :: (font:Font, lineHeight:float) !foreign method "setLineHeight",

	hasGlyphs :: (font:Font, text:string)            -> bool !foreign method "hasGlyphs",
	hasGlyphs :: (font:Font, char1,char2,...:string) -> bool !foreign method "hasGlyphs",
	hasGlyphs :: (font:Font, codepoint,...:int)      -> bool !foreign method "hasGlyphs",

	getDPIScale :: (font:Font) -> float !foreign method "getDPIScale",

	setFallbacks :: (font:Font, ...:Font) !foreign method "setFallbacks",
}

export ImageFlags :: struct {
	Filename :: string,

	linear  : bool            = false,
	mipmaps : bool|[]Filename = false,
}



----------------------------------------------------------------
-- Drawing.
----------------------------------------------------------------

export clear :: ()                   !foreign lua "love.graphics.clear" -- Same as clear(0,0,0,0)
export clear :: (r,g,b:float, a=1.0) !foreign lua "love.graphics.clear"

export present :: () !foreign lua "love.graphics.present"

export drawText :: (text:string, x,y=0.0, r=0.0, sx=1.0,sy=sx, ox,oy=0.0, kx,ky=0.0) !foreign lua "love.graphics.print"

local drawRectangle :: (mode:string, x,y:float, w,h:float, radiusX,radiusY:float=0)             !foreign lua "love.graphics.rectangle"
local drawRectangle :: (mode:string, x,y:float, w,h:float, radiusX,radiusY:float, segments:int) !foreign lua "love.graphics.rectangle"
export drawRectangleFill :: (x,y:float, w,h:float)                                      { drawRectangle("fill", x,y, w,h) }
export drawRectangleLine :: (x,y:float, w,h:float)                                      { drawRectangle("line", x,y, w,h) }
export drawRectangleFill :: (x,y:float, w,h:float, radiusX,radiusY:float)               { drawRectangle("fill", x,y, w,h, radiusX,radiusY) }
export drawRectangleLine :: (x,y:float, w,h:float, radiusX,radiusY:float)               { drawRectangle("line", x,y, w,h, radiusX,radiusY) }
export drawRectangleFill :: (x,y:float, w,h:float, radiusX,radiusY:float, segments:int) { drawRectangle("fill", x,y, w,h, radiusX,radiusY, segments) }
export drawRectangleLine :: (x,y:float, w,h:float, radiusX,radiusY:float, segments:int) { drawRectangle("line", x,y, w,h, radiusX,radiusY, segments) }

local drawCircle :: (mode:string, x,y:float, radius:float)               !foreign lua "love.graphics.circle"
local drawCircle :: (mode:string, x,y:float, radius:float, segments:int) !foreign lua "love.graphics.circle"
export drawCircleFill :: (x,y:float, radius:float)               { drawCircle("fill", x,y, radius) }
export drawCircleLine :: (x,y:float, radius:float)               { drawCircle("line", x,y, radius) }
export drawCircleFill :: (x,y:float, radius:float, segments:int) { drawCircle("fill", x,y, radius, segments) }
export drawCircleLine :: (x,y:float, radius:float, segments:int) { drawCircle("line", x,y, radius, segments) }

local drawEllipse :: (mode:string, x,y:float, radiusX,radiusY:float)               !foreign lua "love.graphics.ellipse"
local drawEllipse :: (mode:string, x,y:float, radiusX,radiusY:float, segments:int) !foreign lua "love.graphics.ellipse"
export drawEllipseFill :: (x,y:float, radiusX,radiusY:float)               { drawEllipse("fill", x,y, radiusX,radiusY) }
export drawEllipseLine :: (x,y:float, radiusX,radiusY:float)               { drawEllipse("line", x,y, radiusX,radiusY) }
export drawEllipseFill :: (x,y:float, radiusX,radiusY:float, segments:int) { drawEllipse("fill", x,y, radiusX,radiusY, segments) }
export drawEllipseLine :: (x,y:float, radiusX,radiusY:float, segments:int) { drawEllipse("line", x,y, radiusX,radiusY, segments) }

export draw :: (drawable:Drawable,          x,y=0.0, r=0.0, sx=1.0,sy=sx, ox,oy=0.0, kx,ky=0.0) !foreign lua "love.graphics.draw"
-- @Incomplete:
-- export draw :: (texture:Texture, quad:Quad, x,y=0.0, r=0.0, sx=1.0,sy=sx, ox,oy=0.0, kx,ky=0.0) !foreign lua "love.graphics.draw"
-- export draw :: (texture:Texture,            transform:LM.Transform) !foreign lua "love.graphics.draw"
-- export draw :: (texture:Texture, quad:Quad, transform:LM.Transform) !foreign lua "love.graphics.draw"

export drawAnchored :: (texture:Texture, x,y:float, ax,ay:float, rotation=0.0, scale=1.0) {
	drawAnchored(texture, x,y, ax,ay, rotation, scale,scale)
}
export drawAnchored :: (texture:Texture, x,y:float, ax,ay:float, rotation:float, sx,sy:float, kx,ky=0.0) {
	local iw, ih = texture.getDimensions!()
	draw(texture, x,y, rotation, sx,sy, ax*iw,ay*ih, kx,ky)
}

-- points = {x1,y1, x2,y2, ...}
export drawLine :: (x1,y1,x2,y2,...:float) !foreign lua "love.graphics.line"
export drawLine :: (points:[]float)        !foreign lua "love.graphics.line"



----------------------------------------------------------------
-- Object creation.
----------------------------------------------------------------

export newImage :: (filename:string)                   -> Image !foreign lua "love.graphics.newImage"
export newImage :: (filename:string, flags:ImageFlags) -> Image !foreign lua "love.graphics.newImage"
export newImage :: (imageData:LI.ImageData)            -> Image !foreign lua "love.graphics.newImage"
-- @Incomplete:
-- export newImage :: (compressedImageData:CompressedImageData) -> Image !foreign lua "love.graphics.newImage"
-- export newImage :: (filename:string, format:TextureFormat)   -> Image !foreign lua "love.graphics.newImage"
-- love.graphics.newArrayImage
-- love.graphics.newCubeImage
-- love.graphics.newVolumeImage

local DEFAULT_FONT_SIZE :: 12
export newFont :: (                 size=DEFAULT_FONT_SIZE, hinting=HintingMode.NORMAL) -> Font !foreign lua "love.graphics.newFont"
export newFont :: (filename:string, size=DEFAULT_FONT_SIZE, hinting=HintingMode.NORMAL) -> Font !foreign lua "love.graphics.newFont"
export newFont :: (filename:string, imagefilename:string)                               -> Font !foreign lua "love.graphics.newFont"
-- @Incomplete:
-- love.graphics.newImageFont

export CanvasSettings :: struct {
	\type               = TextureType.TWOD,   -- The type of Canvas to create.
	format              = PixelFormat.NORMAL, -- The format of the Canvas.
	readable: bool|none = nil, -- Whether the Canvas is readable (drawable and accessible in a Shader). True by default for regular formats, false by default for depth/stencil formats.
	msaa                = 0,   -- The desired number of multisample antialiasing (MSAA) samples used when drawing to the Canvas.
	dpiscale: int|none  = nil, -- The DPI scale factor of the Canvas, used when drawing to the Canvas as well as when drawing the Canvas to the screen. Default value is getDPIScale().
	mipmaps             = CanvasMipmapMode.NONE, -- Whether the Canvas has mipmaps, and whether to automatically regenerate them if so.
}
export newCanvas :: (width,height:int)                          -> Canvas !foreign lua "love.graphics.newCanvas"
export newCanvas :: (width,height:int, settings:CanvasSettings) -> Canvas !foreign lua "love.graphics.newCanvas"

-- @Incomplete:
-- love.graphics.captureScreenshot
-- love.graphics.newParticleSystem
-- love.graphics.newQuad, love.graphics.newMesh
-- love.graphics.newShader, love.graphics.validateShader
-- love.graphics.newSpriteBatch
-- love.graphics.newText
-- love.graphics.newVideo



----------------------------------------------------------------
-- Graphics state.
----------------------------------------------------------------

export getFont    :: () -> Font  !foreign lua "love.graphics.getFont"
export setFont    :: (font:Font) !foreign lua "love.graphics.setFont"
export setNewFont :: (                 size=DEFAULT_FONT_SIZE) -> Font !foreign lua "love.graphics.setNewFont"
export setNewFont :: (filename:string, size=DEFAULT_FONT_SIZE) -> Font !foreign lua "love.graphics.setNewFont"
 -- @Incomplete:
-- export setNewFont :: (file:File,   size=DEFAULT_FONT_SIZE) -> Font !foreign lua "love.graphics.setNewFont"
-- export setNewFont :: (data:Data,   size=DEFAULT_FONT_SIZE) -> Font !foreign lua "love.graphics.setNewFont"
-- export setNewFont :: (rasterizer:Rasterizer) -> Font !foreign lua "love.graphics.setNewFont"

export getBackgroundColor :: () -> (r,g,b,a:float) !foreign lua "love.graphics.getBackgroundColor"
export setBackgroundColor :: (r,g,b:float, a=1.0)  !foreign lua "love.graphics.setBackgroundColor"

export getBlendMode   :: () -> BlendMode                                          !foreign lua "love.graphics.getBlendMode"
export setBlendMode   :: (mode:BlendMode, alphaMode=BlendAlphaMode.ALPHAMULTIPLY) !foreign lua "love.graphics.setBlendMode"
export resetBlendMode :: () { setBlendMode(BlendMode.ALPHA) }

export CanvasSetup :: struct {
	stencil = false,
	depth   = false,
	depthstencil: Canvas|none = nil,

	!value: Canvas,
}
export getCanvas   :: () -> Canvas|none                      !foreign lua "love.graphics.getCanvas"
export setCanvas   :: (canvas:Canvas, mipmap=1)              !foreign lua "love.graphics.setCanvas"
export setCanvas   :: (canvas:Canvas, slice:int, mipmap:int) !foreign lua "love.graphics.setCanvas"
export setCanvas   :: (canvas1,canvas2,...:Canvas)           !foreign lua "love.graphics.setCanvas"
export setCanvas   :: (setup:CanvasSetup)                    !foreign lua "love.graphics.setCanvas"
export setNoCanvas :: ()                                     !foreign lua "love.graphics.setCanvas"

export getColor :: () -> (r,g,b,a:float) !foreign lua "love.graphics.getColor"
export setColor :: (r,g,b:float, a=1.0)  !foreign lua "love.graphics.setColor"
export setColor :: (grey:float,  a=1.0)  { setColor(grey, grey, grey, a) }
export setColor :: (color:[]float)       !foreign lua "love.graphics.setColor" -- Color is {r,g,b} or {r,g,b,a}.

export getColorMask   :: () -> (r,g,b,a:bool) !foreign lua "love.graphics.getColorMask"
export setColorMask   :: (r,g,b,a:bool)       !foreign lua "love.graphics.setColorMask"
export resetColorMask :: ()                   !foreign lua "love.graphics.setColorMask"

export getDefaultFilter :: () -> (min,mag:FilterMode, anisotropy:int) !foreign lua "love.graphics.getDefaultFilter"
export setDefaultFilter :: (min,mag:FilterMode, anisotropy=1)         !foreign lua "love.graphics.setDefaultFilter"

export getLineJoin :: () -> LineJoin  !foreign lua "love.graphics.getLineJoin"
export setLineJoin :: (join:LineJoin) !foreign lua "love.graphics.setLineJoin"

export getLineStyle :: () -> LineStyle   !foreign lua "love.graphics.getLineStyle"
export setLineStyle :: (style:LineStyle) !foreign lua "love.graphics.setLineStyle"

export getLineWidth :: () -> float   !foreign lua "love.graphics.getLineWidth"
export setLineWidth :: (width:float) !foreign lua "love.graphics.setLineWidth"

-- @Incomplete:
-- export Shader :: !foreign struct { ... }
-- export getShader :: () -> Shader    !foreign lua "love.graphics.getShader"
-- export setShader :: (shader:Shader) !foreign lua "love.graphics.setShader"

export getPointSize :: () -> float  !foreign lua "love.graphics.getPointSize"
export setPointSize :: (size:float) !foreign lua "love.graphics.setPointSize"

export getScissor       :: () -> (x,y,w,h:float) !foreign lua "love.graphics.getScissor"
export setScissor       :: (x,y,w,h:float)       !foreign lua "love.graphics.setScissor"
export intersectScissor :: (x,y,w,h:float)       !foreign lua "love.graphics.intersectScissor"
export resetScissor     :: ()                    !foreign lua "love.graphics.setScissor"

export isWireframe  :: () -> bool     !foreign lua "love.graphics.isWireframe"
export setWireframe :: (enabled:bool) !foreign lua "love.graphics.setWireframe"



----------------------------------------------------------------
-- Coordinate system.
----------------------------------------------------------------

export coordsRotate    :: (angle:float)     !foreign lua "love.graphics.rotate"
export coordsScale     :: (sx:float, sy=sx) !foreign lua "love.graphics.scale"
export coordsShear     :: (kx,ky:float)     !foreign lua "love.graphics.shear"
export coordsTranslate :: (dx,dy:float)     !foreign lua "love.graphics.translate"
export coordsReset     :: ()                !foreign lua "love.graphics.origin"

local pushHelper :: (stack:string|none=nil) !foreign lua "love.graphics.push"
export pushAll       :: () { pushHelper("all") }
export pushTransform :: () { pushHelper()      }
export pop           :: () !foreign lua "love.graphics.pop"
export resetAll      :: () !foreign lua "love.graphics.reset"

export globalToScreen :: (globalX, globalY: float) -> (screenX, screenY: float) !foreign lua "love.graphics.transformPoint"
export screenToGlobal :: (screenX, screenY: float) -> (globalX, globalY: float) !foreign lua "love.graphics.inverseTransformPoint"



----------------------------------------------------------------
-- Window.
----------------------------------------------------------------

export getWindowDimensions :: () -> int, int !foreign lua "love.graphics.getDimensions"
export getWindowWidth      :: () -> int      !foreign lua "love.graphics.getWidth"
export getWindowHeight     :: () -> int      !foreign lua "love.graphics.getHeight"


