--[[============================================================
--=
--=  GlÃ³a I/O and filesystem module
--=
--==============================================================

	-- Constants:
	APP_PATH, APP_DIRECTORY, COMPILER_PATH, COMPILER_DIRECTORY
	STDIN, STDERR, STDOUT

	-- Functions:
	close
	disableBuffering, enableBuffering, enableLineBuffering, flush
	eachLine
	openForReading, openForReadingText, openForWriting, openForWritingText
	readEntireFile, writeEntireFile
	readNumber, readRemaining, readLine, readBytes
	remove, rename, copy

	-- Structs:
	File

--============================================================]]

-- Get the path to the application file. The path may be relative to the current working directory.
export APP_PATH           : string : !foreign compiler "appPath"
-- Get the path to the directory the application is located in. The path may be relative to the current working directory.
export APP_DIRECTORY      : string : !foreign compiler "appDirectory"
-- Get the path to the compiler. (This will be a hardcoded value in the compiled program.)
export COMPILER_PATH      : string : !foreign compiler "compilerPath"
-- Get the path to the directory the compiler is located in. (This will be a hardcoded value in the compiled program.)
export COMPILER_DIRECTORY : string : !foreign compiler "compilerDirectory"

export STDIN  : File : !foreign lua "io.stdin"
export STDERR : File : !foreign lua "io.stderr"
export STDOUT : File : !foreign lua "io.stdout"

export File :: !foreign struct {}

local openFile :: (path:string, mode:string) -> bool, File, string {
	local helper :: (path:string, mode:string) -> File|none, none|string !foreign lua "io.open"

	local file, err = helper(path, mode)
	if file == nil  return false, NULL, cast(string) err

	return true, cast(File) file, ""
}
export openForReading     :: (path:string) -> (success:bool, file:File!must, error:string) { return openFile(path, "rb") }
export openForReadingText :: (path:string) -> (success:bool, file:File!must, error:string) { return openFile(path, "r")  }
export openForWriting     :: (path:string) -> (success:bool, file:File!must, error:string) { return openFile(path, "wb") }
export openForWritingText :: (path:string) -> (success:bool, file:File!must, error:string) { return openFile(path, "w")  }

export close :: (file:File) !foreign lua "io.close"

local readHelper :: (file:File, what:string|int) -> string|float|none !foreign method "read"
export readNumber :: (file:File) -> (success:bool, number:float) {
	local data = readHelper(file, "*n")
	if data == nil  return false, 0
	return true, cast(float) data
}
export readRemaining :: (file:File) -> (success:bool, data:string) {
	local data = readHelper(file, "*a") -- @Cleanup: I think this always returns a string?
	if data == nil  return false, ""
	return true, cast(string) data
}
export readLine :: (file:File) -> (success:bool, line:string) {
	local data = readHelper(file, "*l")
	if data == nil  return false, ""
	return true, cast(string) data
}
export readBytes :: (file:File, maxBytes:int) -> (success:bool, data:string) {
	local data = readHelper(file, maxBytes)
	if data == nil  return false, ""
	return true, cast(string) data
}

export write :: (file:File, ...:string) !foreign method "write"
export writeLine :: (file:File, ...:string) {
	write(file, ...)
	write(file, "\n")
}

export readEntireFile :: (path:string) -> (success:bool, data:string, error:string) {
	local ok, file, err = openForReading(path)
	if not ok  return false, "", err

	local data:string
	ok, data = readRemaining(file)
	close(file)
	if not ok  return false, "", "Could not read from the file."

	return true, data, ""
}
export writeEntireFile :: (path:string, data:string) -> (success:bool, error:string) {
	local ok, file, err = openForWriting(path)
	if not ok  return false, err

	write(file, data)
	close(file)
	return true, ""
}

export eachLine :: (path:string) -> (iter:(_1,_2:none)->(line:string|none), _1,_2:none) !foreign lua "io.lines"
export eachLine :: (file:File)   -> (iter:(_1,_2:none)->(line:string|none), _1,_2:none) !foreign method "lines"

export remove :: (path:string) -> (success:bool, error:string) {
	local helper :: (path:string) -> bool|none, none|string !foreign lua "os.remove"
	local ok, err = helper(path)
	if ok == nil  return false, cast(string) err
	return true, ""
}
export rename :: (oldPath:string, newPath:string) -> (success:bool, error:string) {
	local helper :: (oldPath:string, newPath:string) -> bool|none, none|string !foreign lua "os.rename"
	local ok, err = helper(oldPath, newPath)
	if ok == nil  return false, cast(string) err
	return true, ""
}
export copy :: (sourcePath:string, targetPath:string) -> (success:bool, error:string) {
	local ok, data, err = readEntireFile(sourcePath)
	if not ok  return false, err
	return writeEntireFile(targetPath, data)
}

local setvbuf :: (file:File, mode:string, size:int|none) !foreign method "setvbuf"
export disableBuffering    :: (file:File)           { setvbuf(file, "no",   nil) }
export enableBuffering     :: (file:File)           { setvbuf(file, "full", nil) }
export enableBuffering     :: (file:File, size:int) { setvbuf(file, "full", size) }
export enableLineBuffering :: (file:File)           { setvbuf(file, "line", nil) }
export enableLineBuffering :: (file:File, size:int) { setvbuf(file, "line", size) }

export flush :: (file:File) !foreign method "flush"

-- @Incomplete: os.tmpname
