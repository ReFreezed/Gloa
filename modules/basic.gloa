--[[============================================================
--=
--=  GlÃ³a basics module
--=
--==============================================================

	LUA_ENVIRONMENT
	LUA_VERSION_STRING

	LuaType

	error, assert
	format
	getLuaType
	insert, remove
	ipairs, pairs, next
	print
	stringToFloat, stringToInt

--============================================================]]

export LUA_VERSION_STRING : string : !foreign lua "_VERSION"
export LUA_ENVIRONMENT    : table  : !foreign lua "_G"

export print  :: (...:any) !foreign lua "print"
export format :: (s:string, ...:int|float|string) -> string !foreign lua "string.format"

-- We change these a bit to be more strict.
export error  :: (message:string, level:int=1) !foreign lua "error"
export assert :: (v:bool)                 !foreign lua "assert"
export assert :: (v:bool, message:string) !foreign lua "assert"

export LuaType :: enum {
	BOOLEAN  :: "boolean",
	FUNCTION :: "function",
	NIL      :: "nil",
	NUMBER   :: "number",
	STRING   :: "string",
	TABLE    :: "table",
	THREAD   :: "thread",   -- Coroutine.
	USERDATA :: "userdata", -- C data.
}
export getLuaType :: (v:any) -> LuaType !foreign lua "type"

local tonumber :: (s:string, base:int) -> float|none !foreign lua "tonumber"

export stringToFloat :: (s:string) -> (success:bool, number:float) {
	local n = tonumber(s, 10)
	if n == nil  return false, 0
	return true, cast(float) n
}
-- Note: The base has to be between 2 and 36.
export stringToInt :: (s:string, base:int=10) -> (success:bool, number:int) {
	local n = tonumber(s, base)
	if n == nil  return false, 0
	return true, cast(int) cast(float) n -- Note: This will simply discard any decimals.
}

--
-- Arrays/tables (@Cleanup: Move some/all of these to their own module?)
--

local TableIterator :: (t:table, k:any) -> (k:any, item:any)
export next:TableIterator : !foreign lua "next"

export pairs :: (t:table) -> (iter:TableIterator, t:table, init:any) !foreign lua "pairs"

local ArrayIterator :: (arr:[]any, i:int) -> (i:int, item:any)
export ipairs :: (arr:[]any) -> (iter:ArrayIterator, arr:[]any, init:int) !foreign lua "pairs"
-- @Compiler @Incomplete: Polymorphic functions.
-- local ArrayIterator :: (arr:[]$T, i:int) -> (i:int, item:T)
-- export ipairs :: (arr:[]$T) -> (iter:ArrayIterator, arr:[]T, init:int) !foreign lua "pairs"

export insert :: (arr:[]any, value:any)            !foreign lua "table.insert"
export insert :: (arr:[]any, index:int, value:any) !foreign lua "table.insert"
export remove :: (arr:[]any, index:int=1) -> any   !foreign lua "table.remove"
-- @Compiler @Incomplete: Polymorphic functions.
-- export insert :: (arr:[]$T, value:T)            !foreign lua "table.insert"
-- export insert :: (arr:[]$T, index:int, value:T) !foreign lua "table.insert"
-- export remove :: (arr:[]$T, index:int=1) -> T   !foreign lua "table.remove"



--[[ OLD unrevised:
export collectGarbage :: (task:string, value:any=nil) !foreign lua "collectgarbage" -- @Incomplete: Split into multiple functions.

export unpack :: (v:[]$T ) -> (...:T)   !foreign lua
export unpack :: (v:table) -> (...:any) !foreign lua
export select :: (what:int|string, ...:$T) -> (...:T) !foreign lua

export pcall  :: (callback:(), ...:any)                 -> bool, string|none !foreign lua
export xpcall :: (callback:(), errorCallback:(err:any)) -> bool, string|none !foreign lua

-- dofile
-- load
-- loadfile
-- loadstring

export require :: (moduleName:string) -> any !foreign lua
-- module

-- getfenv
-- setfenv

-- getmetatable
-- setmetatable
-- rawequal
-- rawget
-- rawset

-- package.cpath
-- package.loaded
-- package.loaders
-- package.loadlib
-- package.path
-- package.preload
-- package.seeall
]]
