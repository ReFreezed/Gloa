--[[============================================================
--=
--=  GlÃ³a basic/common functionality module
--=
--==============================================================

	LUA_VERSION_STRING

	error, errorf, errorLine, assert
	format
	print, printf
	stringToFloat, stringToInt
	toString

	-- Array/table functions:
	concatinate
	copyArray, copyTable, copyTableRecursive
	indexOf, indexWith, itemWith
	insert, insertIfUnique, remove, removeItem
	next
	pairs, ipairs
	sort
	unpack

--============================================================]]

export toString :: (value:any) -> string !foreign lua "tostring"

export StringFormat :: string
export format :: (s:StringFormat, ...:int|float|string|Type) -> string !foreign lua "string.format"
export print  :: (...:any)                                   !foreign lua "print"
export printf :: (s:StringFormat, ...:int|float|string|Type) { print(format(s, ...)) }

-- We change these a bit to be more strict than the Lua equivalents regarding the argument types.
export error  :: (level=1)                             { error("Error!", level+1) }
export error  :: (message:string, level=1)             !foreign compiler "error"
export assert :: (b:bool, message="Assertion failed!") { if not b  error(message, 2) }

export errorf :: (           s:StringFormat, ...:int|float|string|Type) { error(format(s, ...), 2) }
export errorf :: (level:int, s:StringFormat, ...:int|float|string|Type) { error(format(s, ...), 1+level) }

export errorLine :: (s:string) {
	-- We use these foreign declarations instead of importing stuff from the io and os modules. (May want to @Cleanup this at some point.)
	local File  :: !foreign struct {}
	local write :: (file:File, ...:string) !foreign method "write"
	local exit  :: (exitCode:int) !foreign lua "os.exit"
	local STDERR: File : !foreign lua "io.stderr"

	write(STDERR, s, "\n")
	exit(1)
}
export errorLine :: (s:StringFormat, v1,...:int|float|string|Type) {
	errorLine(format(s, v1, ...))
}

local tonumber :: (s:string, base:int) -> float|none !foreign lua "tonumber"

export stringToFloat :: (s:string) -> (success:bool, number:float) {
	local n = tonumber(s, 10)
	if n == nil  return false, 0
	return true, cast(float) n
}
-- Note: The base has to be between 2 and 36.
export stringToInt :: (s:string, base:int=10) -> (success:bool, number:int) {
	local n = tonumber(s, base)
	if n == nil  return false, 0
	return true, cast(int) cast(float) n -- Note: The casts will simply discard any decimals.
}

export select :: (fromIndex:int, ...:$T) -> ...T !foreign lua "select"

--
-- Arrays/tables
--

local TableIterator :: (t:table,k:any)->(k:any,item:any)
export next:TableIterator : !foreign lua "next"

export pairs   :: (t:table)    -> (iter:TableIterator,                          t:table,   init:any) !foreign lua      "pairs"
export ipairs  :: (array:[]$T) -> (iter:(array:[]T,i:int)->(i:int|none,item:T), array:[]T, init:int) !foreign lua      "ipairs"
export ipairsr :: (array:[]$T) -> (iter:(array:[]T,i:int)->(i:int|none,item:T), array:[]T, init:int) !foreign compiler "ipairsr" -- Reverse iteration of an array.

export insert :: (array:[]$T, value:T)            !foreign lua "table.insert"
export insert :: (array:[]$T, index:int, value:T) !foreign lua "table.insert"

export insertIfUnique :: (array:[]$T, value:T) -> (wasInserted:bool) {
	for array {
		if it == value  return false
	}
	insert(array, value)
	return true
}

export remove :: (array:[]$T) -> (success:bool, removedItem:T) {
	local helper :: (array:[]T) -> T|none !foreign lua "table.remove"
	local item = helper(array)
	return (item ~= nil), cast(T)item
}
export remove :: (array:[]$T, index:int) -> (success:bool, removedItem:T) {
	local helper :: (array:[]T, index:int) -> T|none !foreign lua "table.remove"
	local item = helper(array, index)
	return (item ~= nil), cast(T)item
}

export removeItem :: (array:[]$T, item:T) -> (success:bool, index:int) {
	local found, i = indexOf(array, item)
	if not found  return false, NULL

	remove(array, i)
	return true, i
}

export unpack :: (array:[]$T, from=1, to=#array) -> ...T !foreign lua "unpack"

export concatinate :: (values:[](string|int|float|Type), delimiter="", from=1, to=#values) -> string !foreign lua "table.concat"

export copyArray :: (array:[]$T) -> []T {
	local copy: []T
	for array  copy[itIndex] = it
	return copy
}

export copyTable :: (t:$T) -> T {
	-- @Robustness: Assert that T is table-like.
	local copy: table
	for cast(table) t  copy[itIndex] = it
	return cast(T) cast(any) copy -- @Temp
	-- return cast(T) copy -- @Compiler @Incomplete: Casting from table to table-like should work!
}

export copyTableRecursive :: (t:table) -> table {
	local getLuaType :: (v:any) -> string !foreign lua "type"

	local copy: table
	for t {
		copy[itIndex] = getLuaType(it) == "table" ? (cast(any) copyTableRecursive(cast(table) it)) : it
	}
	return copy
}

export indexOf :: (array:[]$T, v:T) -> (found:bool, i:int) {
	for array {
		if it == v  return true, itIndex
	}
	return false, NULL
}

export indexWith :: (array:[]$T, $k:string, v:type_of(T[k])) -> (found:bool, i:int) {
	for array  if it[k]==v  return true, itIndex
	return false, NULL
}
export indexWith :: (array:[]$T, $k1:string,v1:type_of(T[k]), $k2:string,v2:type_of(T[k])) -> (found:bool, i:int) {
	for array  if it[k1]==v1 and it[k2]==v2  return true, itIndex
	return false, NULL
}
export indexWith :: (array:[]$T, $k1:string,v1:type_of(T[k]), $k2:string,v2:type_of(T[k]), $k3:string,v3:type_of(T[k])) -> (found:bool, i:int) {
	for array  if it[k1]==v1 and it[k2]==v2 and it[k3]==v3  return true, itIndex
	return false, NULL
}

export itemWith :: (array:[]$T, $k:string, v:type_of(T[k])) -> (found:bool, v:T) {
	for array  if it[k]==v  return true, it
	return false, NULL
}
export itemWith :: (array:[]$T, $k1:string,v1:type_of(T[k]), $k2:string,v2:type_of(T[k])) -> (found:bool, v:T) {
	for array  if it[k1]==v1 and it[k2]==v2  return true, it
	return false, NULL
}
export itemWith :: (array:[]$T, $k1:string,v1:type_of(T[k]), $k2:string,v2:type_of(T[k]), $k3:string,v3:type_of(T[k])) -> (found:bool, v:T) {
	for array  if it[k1]==v1 and it[k2]==v2 and it[k3]==v3  return true, it
	return false, NULL
}

export sort :: (array:[]int)    !foreign lua "table.sort"
export sort :: (array:[]float)  !foreign lua "table.sort"
export sort :: (array:[]string) !foreign lua "table.sort"

export sort :: (array:[]$T, comparer:(a,b:T)->(aIsLessThanB:bool)) !foreign lua "table.sort"



--[[ OLD unrevised:
export pcall  :: (callback:(), ...:any)                 -> bool, string|none !foreign lua "pcall"
export xpcall :: (callback:(), errorCallback:(err:any)) -> bool, string|none !foreign lua "xpcall"

-- getfenv
-- setfenv

-- getmetatable
-- setmetatable
-- rawequal
-- rawget
-- rawset

-- package.cpath
-- package.loaded
-- package.loaders
-- package.loadlib
-- package.path
-- package.preload
-- package.seeall
]]
