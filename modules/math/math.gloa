--[[============================================================
--=
--=  GlÃ³a math module
--=
--==============================================================

	HUGE
	NAN
	PI, TAU

	abs
	acos, asin, atan, cos, cosh, cos01, sin, sinh, sin01, tan, tanh
	ceil, floor, round
	clamp, clamp01
	distance, distanceSq
	exp, frexp, ldexp
	fmod
	getRandom, setRandomSeed
	getSign, getSign0
	lerp
	log, log10
	min, max
	moveTowards
	pow
	splitFraction
	sqrt
	toDegrees, toRadians

--============================================================]]

export HUGE : float : !foreign lua "math.huge"
export PI   : float : !foreign lua "math.pi"
export TAU  : float : !foreign lua "math.pi*2"
export NAN  : float : !foreign lua "0/0"

export abs :: (x:float) -> float !foreign lua "math.abs"
export abs :: (x:int)   -> int   !foreign lua "math.abs"

export ceil  :: (x:float) -> int !foreign lua "math.ceil"
export floor :: (x:float) -> int !foreign lua "math.floor"
export round :: (x:float) -> int { return floor(x+.5) }

export min :: (n1,n2,...:float) -> float !foreign lua "math.min"
export max :: (n1,n2,...:float) -> float !foreign lua "math.max"
export min :: (n1,n2,...:int)   -> int   !foreign lua "math.min"
export max :: (n1,n2,...:int)   -> int   !foreign lua "math.max"

export clamp   :: (x:float, low,high:float) -> float { return min(max(x, low), high) }
export clamp01 :: (x:float)                 -> float { return min(max(x, 0  ), 1   ) }

export lerp :: (v1,v2:float, k:float) -> float { return v1+k*(v2-v1) }

export fmod :: (x:float, divisor:float) -> float !foreign lua "math.fmod"
export fmod :: (x:int,   divisor:int)   -> int   !foreign lua "math.fmod"

export splitFraction :: (x:float) -> (integral:int, fraction:float) !foreign lua "math.modf"

export exp   :: (power:float)                      -> float !foreign lua "math.exp"   -- E^power
export frexp :: (x:float) -> (mantissa:float, exponent:int) !foreign lua "math.frexp" -- x = mantissa*2^exponent
export ldexp :: (mantissa:float, exponent:int)     -> float !foreign lua "math.ldexp" -- x*2^exponent

export log   :: (x:float) -> float !foreign lua "math.log"
export log10 :: (x:float) -> float !foreign lua "math.log10"
-- export log :: (x:float, base:int) -> float { @Incomplete }

export acos  :: (x:float)          -> float !foreign lua "math.acos"
export asin  :: (x:float)          -> float !foreign lua "math.asin"
export atan  :: (x:float)          -> float !foreign lua "math.atan"
export atan  :: (y:float, x:float) -> float !foreign lua "math.atan2"
export cos   :: (angle:float)      -> float !foreign lua "math.cos"
export cosh  :: (x:float)          -> float !foreign lua "math.cosh"
export cos01 :: (angle:float)      -> float { return .5+.5*cos(angle) }
export sin   :: (angle:float)      -> float !foreign lua "math.sin"
export sinh  :: (x:float)          -> float !foreign lua "math.sinh"
export sin01 :: (angle:float)      -> float { return .5+.5*sin(angle) }
export tan   :: (angle:float)      -> float !foreign lua "math.tan"
export tanh  :: (x:float)          -> float !foreign lua "math.tanh"

export toDegrees :: (radians:float) -> (degrees:float) !foreign lua "math.deg"
export toRadians :: (degrees:float) -> (radians:float) !foreign lua "math.rad"

export pow  :: (x,power:float) -> float !foreign lua "math.pow" -- '^' should be used instead whenever possible!
export sqrt :: (x:float) -> float !foreign lua "math.sqrt"

export getRandom :: (    high:int) -> int !foreign lua "math.random" -- Same as getRandom(1, high)
export getRandom :: (low,high:int) -> int !foreign lua "math.random"

export getRandom :: (              ) -> float !foreign lua "math.random"
export getRandom :: (    high:float) -> float { return high * getRandom() }
export getRandom :: (low,high:float) -> float { return low + (high-low) * getRandom() }

export setRandomSeed :: (seed:int) {
	local _setRandomSeed :: (seed:int) !foreign lua "math.randomseed"
	_setRandomSeed(seed)
	getRandom() -- Gets rid of the lingering random number from the last seed. Why is this even a thing, Lua...
}

export moveTowards :: (current,target:float, speed:float) -> (value:float, targetReached:bool) {
	if current < target
		current = min(current+speed, target)
	elseif current > target
		current = max(current-speed, target)
	return current, (current == target)
}

export distance :: (x1,y1:float, x2,y2:float) -> float {
	return sqrt(distanceSq(x1, y1, x2, y2))
}
export distanceSq :: (x1,y1:float, x2,y2:float) -> float {
	local dx = x2-x1
	local dy = y2-y1
	return dx*dx+dy*dy
}

export getSign  :: (n:float) -> int { return n<0 ? -1 : 1           }
export getSign0 :: (n:float) -> int { return n<0 ? -1 : n>0 ? 1 : 0 }
