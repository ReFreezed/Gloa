--[[============================================================
--=
--=  wxLua/wxWidget bindings for Gl√≥a
--=  Interface source: wxcore_controls.i
--=
--=  Tested with:
--=  - wxLua 2.8.7.0 / wxWidgets 2.8.8
--=
--=  Note: Most bindings have not been tested yet!
--=
--============================================================]]

!import "wx/wxcore_windows"
!import "wx/common"
!import "wx/wxcore_gdi"
!import "wx/wxcore_core"
!import "wx/wxbase_data"
!import "wx/wxcore_event"
!import "wx/wxcore_defsutils"

export wxBU_LEFT:                            int : !foreign lua "wx.wxBU_LEFT"
export wxBU_RIGHT:                           int : !foreign lua "wx.wxBU_RIGHT"
export wxBU_TOP:                             int : !foreign lua "wx.wxBU_TOP"
export wxBU_BOTTOM:                          int : !foreign lua "wx.wxBU_BOTTOM"
export wxBU_EXACTFIT:                        int : !foreign lua "wx.wxBU_EXACTFIT"
export wxBU_AUTODRAW:                        int : !foreign lua "wx.wxBU_AUTODRAW"
export wxCHK_2STATE:                         int : !foreign lua "wx.wxCHK_2STATE"
export wxCHK_3STATE:                         int : !foreign lua "wx.wxCHK_3STATE"
export wxCHK_ALLOW_3RD_STATE_FOR_USER:       int : !foreign lua "wx.wxCHK_ALLOW_3RD_STATE_FOR_USER"
export wxCB_DROPDOWN:                        int : !foreign lua "wx.wxCB_DROPDOWN"
export wxCB_READONLY:                        int : !foreign lua "wx.wxCB_READONLY"
export wxCB_SIMPLE:                          int : !foreign lua "wx.wxCB_SIMPLE"
export wxCB_SORT:                            int : !foreign lua "wx.wxCB_SORT"
export wxGA_HORIZONTAL:                      int : !foreign lua "wx.wxGA_HORIZONTAL"
export wxGA_SMOOTH:                          int : !foreign lua "wx.wxGA_SMOOTH"
export wxGA_VERTICAL:                        int : !foreign lua "wx.wxGA_VERTICAL"
export wxLB_SINGLE:                          int : !foreign lua "wx.wxLB_SINGLE"
export wxLB_MULTIPLE:                        int : !foreign lua "wx.wxLB_MULTIPLE"
export wxLB_EXTENDED:                        int : !foreign lua "wx.wxLB_EXTENDED"
export wxLB_HSCROLL:                         int : !foreign lua "wx.wxLB_HSCROLL"
export wxLB_ALWAYS_SB:                       int : !foreign lua "wx.wxLB_ALWAYS_SB"
export wxLB_NEEDED_SB:                       int : !foreign lua "wx.wxLB_NEEDED_SB"
export wxLB_SORT:                            int : !foreign lua "wx.wxLB_SORT"
export wxLB_OWNERDRAW:                       int : !foreign lua "wx.wxLB_OWNERDRAW"
export wxLC_ALIGN_LEFT:                      int : !foreign lua "wx.wxLC_ALIGN_LEFT"
export wxLC_ALIGN_TOP:                       int : !foreign lua "wx.wxLC_ALIGN_TOP"
export wxLC_AUTOARRANGE:                     int : !foreign lua "wx.wxLC_AUTOARRANGE"
export wxLC_EDIT_LABELS:                     int : !foreign lua "wx.wxLC_EDIT_LABELS"
export wxLC_HRULES:                          int : !foreign lua "wx.wxLC_HRULES"
export wxLC_ICON:                            int : !foreign lua "wx.wxLC_ICON"
export wxLC_LIST:                            int : !foreign lua "wx.wxLC_LIST"
export wxLC_NO_HEADER:                       int : !foreign lua "wx.wxLC_NO_HEADER"
export wxLC_NO_SORT_HEADER:                  int : !foreign lua "wx.wxLC_NO_SORT_HEADER"
export wxLC_REPORT:                          int : !foreign lua "wx.wxLC_REPORT"
export wxLC_SINGLE_SEL:                      int : !foreign lua "wx.wxLC_SINGLE_SEL"
export wxLC_SMALL_ICON:                      int : !foreign lua "wx.wxLC_SMALL_ICON"
export wxLC_SORT_ASCENDING:                  int : !foreign lua "wx.wxLC_SORT_ASCENDING"
export wxLC_SORT_DESCENDING:                 int : !foreign lua "wx.wxLC_SORT_DESCENDING"
export wxLC_VIRTUAL:                         int : !foreign lua "wx.wxLC_VIRTUAL"
export wxLC_VRULES:                          int : !foreign lua "wx.wxLC_VRULES"
export wxLC_MASK_TYPE:                       int : !foreign lua "wx.wxLC_MASK_TYPE"
export wxLC_MASK_ALIGN:                      int : !foreign lua "wx.wxLC_MASK_ALIGN"
export wxLC_MASK_SORT:                       int : !foreign lua "wx.wxLC_MASK_SORT"
export wxLIST_ALIGN_DEFAULT:                 int : !foreign lua "wx.wxLIST_ALIGN_DEFAULT"
export wxLIST_ALIGN_LEFT:                    int : !foreign lua "wx.wxLIST_ALIGN_LEFT"
export wxLIST_ALIGN_SNAP_TO_GRID:            int : !foreign lua "wx.wxLIST_ALIGN_SNAP_TO_GRID"
export wxLIST_ALIGN_TOP:                     int : !foreign lua "wx.wxLIST_ALIGN_TOP"
export wxLIST_AUTOSIZE:                      int : !foreign lua "wx.wxLIST_AUTOSIZE"
export wxLIST_AUTOSIZE_USEHEADER:            int : !foreign lua "wx.wxLIST_AUTOSIZE_USEHEADER"
export wxLIST_FIND_DOWN:                     int : !foreign lua "wx.wxLIST_FIND_DOWN"
export wxLIST_FIND_LEFT:                     int : !foreign lua "wx.wxLIST_FIND_LEFT"
export wxLIST_FIND_RIGHT:                    int : !foreign lua "wx.wxLIST_FIND_RIGHT"
export wxLIST_FIND_UP:                       int : !foreign lua "wx.wxLIST_FIND_UP"
export wxLIST_HITTEST_ABOVE:                 int : !foreign lua "wx.wxLIST_HITTEST_ABOVE"
export wxLIST_HITTEST_BELOW:                 int : !foreign lua "wx.wxLIST_HITTEST_BELOW"
export wxLIST_HITTEST_NOWHERE:               int : !foreign lua "wx.wxLIST_HITTEST_NOWHERE"
export wxLIST_HITTEST_ONITEM:                int : !foreign lua "wx.wxLIST_HITTEST_ONITEM"
export wxLIST_HITTEST_ONITEMICON:            int : !foreign lua "wx.wxLIST_HITTEST_ONITEMICON"
export wxLIST_HITTEST_ONITEMLABEL:           int : !foreign lua "wx.wxLIST_HITTEST_ONITEMLABEL"
export wxLIST_HITTEST_ONITEMRIGHT:           int : !foreign lua "wx.wxLIST_HITTEST_ONITEMRIGHT"
export wxLIST_HITTEST_ONITEMSTATEICON:       int : !foreign lua "wx.wxLIST_HITTEST_ONITEMSTATEICON"
export wxLIST_HITTEST_TOLEFT:                int : !foreign lua "wx.wxLIST_HITTEST_TOLEFT"
export wxLIST_HITTEST_TORIGHT:               int : !foreign lua "wx.wxLIST_HITTEST_TORIGHT"
export wxLIST_MASK_DATA:                     int : !foreign lua "wx.wxLIST_MASK_DATA"
export wxLIST_MASK_FORMAT:                   int : !foreign lua "wx.wxLIST_MASK_FORMAT"
export wxLIST_MASK_IMAGE:                    int : !foreign lua "wx.wxLIST_MASK_IMAGE"
export wxLIST_MASK_STATE:                    int : !foreign lua "wx.wxLIST_MASK_STATE"
export wxLIST_MASK_TEXT:                     int : !foreign lua "wx.wxLIST_MASK_TEXT"
export wxLIST_MASK_WIDTH:                    int : !foreign lua "wx.wxLIST_MASK_WIDTH"
export wxLIST_NEXT_ABOVE:                    int : !foreign lua "wx.wxLIST_NEXT_ABOVE"
export wxLIST_NEXT_ALL:                      int : !foreign lua "wx.wxLIST_NEXT_ALL"
export wxLIST_NEXT_BELOW:                    int : !foreign lua "wx.wxLIST_NEXT_BELOW"
export wxLIST_NEXT_LEFT:                     int : !foreign lua "wx.wxLIST_NEXT_LEFT"
export wxLIST_NEXT_RIGHT:                    int : !foreign lua "wx.wxLIST_NEXT_RIGHT"
export wxLIST_RECT_BOUNDS:                   int : !foreign lua "wx.wxLIST_RECT_BOUNDS"
export wxLIST_RECT_ICON:                     int : !foreign lua "wx.wxLIST_RECT_ICON"
export wxLIST_RECT_LABEL:                    int : !foreign lua "wx.wxLIST_RECT_LABEL"
export wxLIST_SET_ITEM:                      int : !foreign lua "wx.wxLIST_SET_ITEM"
export wxLIST_STATE_CUT:                     int : !foreign lua "wx.wxLIST_STATE_CUT"
export wxLIST_STATE_DONTCARE:                int : !foreign lua "wx.wxLIST_STATE_DONTCARE"
export wxLIST_STATE_DROPHILITED:             int : !foreign lua "wx.wxLIST_STATE_DROPHILITED"
export wxLIST_STATE_FOCUSED:                 int : !foreign lua "wx.wxLIST_STATE_FOCUSED"
export wxLIST_STATE_SELECTED:                int : !foreign lua "wx.wxLIST_STATE_SELECTED"
export wxLIST_GETSUBITEMRECT_WHOLEITEM:      int : !foreign lua "wx.wxLIST_GETSUBITEMRECT_WHOLEITEM"
export wxRA_VERTICAL:                        int : !foreign lua "wx.wxRA_VERTICAL"
export wxRA_HORIZONTAL:                      int : !foreign lua "wx.wxRA_HORIZONTAL"
export wxRA_SPECIFY_COLS:                    int : !foreign lua "wx.wxRA_SPECIFY_COLS"
export wxRA_SPECIFY_ROWS:                    int : !foreign lua "wx.wxRA_SPECIFY_ROWS"
export wxRB_GROUP:                           int : !foreign lua "wx.wxRB_GROUP"
export wxRB_SINGLE:                          int : !foreign lua "wx.wxRB_SINGLE"
export wxSB_HORIZONTAL:                      int : !foreign lua "wx.wxSB_HORIZONTAL"
export wxSB_VERTICAL:                        int : !foreign lua "wx.wxSB_VERTICAL"
export wxSL_AUTOTICKS:                       int : !foreign lua "wx.wxSL_AUTOTICKS"
export wxSL_BOTH:                            int : !foreign lua "wx.wxSL_BOTH"
export wxSL_BOTTOM:                          int : !foreign lua "wx.wxSL_BOTTOM"
export wxSL_HORIZONTAL:                      int : !foreign lua "wx.wxSL_HORIZONTAL"
export wxSL_LABELS:                          int : !foreign lua "wx.wxSL_LABELS"
export wxSL_LEFT:                            int : !foreign lua "wx.wxSL_LEFT"
export wxSL_NOTIFY_DRAG:                     int : !foreign lua "wx.wxSL_NOTIFY_DRAG"
export wxSL_RIGHT:                           int : !foreign lua "wx.wxSL_RIGHT"
export wxSL_SELRANGE:                        int : !foreign lua "wx.wxSL_SELRANGE"
export wxSL_TOP:                             int : !foreign lua "wx.wxSL_TOP"
export wxSL_VERTICAL:                        int : !foreign lua "wx.wxSL_VERTICAL"
export wxSP_HORIZONTAL:                      int : !foreign lua "wx.wxSP_HORIZONTAL"
export wxSP_VERTICAL:                        int : !foreign lua "wx.wxSP_VERTICAL"
export wxSP_ARROW_KEYS:                      int : !foreign lua "wx.wxSP_ARROW_KEYS"
export wxSP_WRAP:                            int : !foreign lua "wx.wxSP_WRAP"
export wxTE_PROCESS_ENTER:                   int : !foreign lua "wx.wxTE_PROCESS_ENTER"
export wxTE_PROCESS_TAB:                     int : !foreign lua "wx.wxTE_PROCESS_TAB"
export wxTE_MULTILINE:                       int : !foreign lua "wx.wxTE_MULTILINE"
export wxTE_PASSWORD:                        int : !foreign lua "wx.wxTE_PASSWORD"
export wxTE_READONLY:                        int : !foreign lua "wx.wxTE_READONLY"
export wxTE_RICH:                            int : !foreign lua "wx.wxTE_RICH"
export wxTE_RICH2:                           int : !foreign lua "wx.wxTE_RICH2"
export wxTE_AUTO_URL:                        int : !foreign lua "wx.wxTE_AUTO_URL"
export wxTE_NOHIDESEL:                       int : !foreign lua "wx.wxTE_NOHIDESEL"
export wxTE_LEFT:                            int : !foreign lua "wx.wxTE_LEFT"
export wxTE_CENTRE:                          int : !foreign lua "wx.wxTE_CENTRE"
export wxTE_RIGHT:                           int : !foreign lua "wx.wxTE_RIGHT"
export wxTE_DONTWRAP:                        int : !foreign lua "wx.wxTE_DONTWRAP"
export wxTE_LINEWRAP:                        int : !foreign lua "wx.wxTE_LINEWRAP"
export wxTE_CHARWRAP:                        int : !foreign lua "wx.wxTE_CHARWRAP"
export wxTE_WORDWRAP:                        int : !foreign lua "wx.wxTE_WORDWRAP"
export wxTE_BESTWRAP:                        int : !foreign lua "wx.wxTE_BESTWRAP"
export wxTE_CAPITALIZE:                      int : !foreign lua "wx.wxTE_CAPITALIZE"
export wxTE_AUTO_SCROLL:                     int : !foreign lua "wx.wxTE_AUTO_SCROLL"
export wxTE_NO_VSCROLL:                      int : !foreign lua "wx.wxTE_NO_VSCROLL"
export wxOutOfRangeTextCoord:                int : !foreign lua "wx.wxOutOfRangeTextCoord"
export wxInvalidTextCoord:                   int : !foreign lua "wx.wxInvalidTextCoord"
export wxTEXT_ATTR_TEXT_COLOUR:              int : !foreign lua "wx.wxTEXT_ATTR_TEXT_COLOUR"
export wxTEXT_ATTR_BACKGROUND_COLOUR:        int : !foreign lua "wx.wxTEXT_ATTR_BACKGROUND_COLOUR"
export wxTEXT_ATTR_FONT_FACE:                int : !foreign lua "wx.wxTEXT_ATTR_FONT_FACE"
export wxTEXT_ATTR_FONT_SIZE:                int : !foreign lua "wx.wxTEXT_ATTR_FONT_SIZE"
export wxTEXT_ATTR_FONT_WEIGHT:              int : !foreign lua "wx.wxTEXT_ATTR_FONT_WEIGHT"
export wxTEXT_ATTR_FONT_ITALIC:              int : !foreign lua "wx.wxTEXT_ATTR_FONT_ITALIC"
export wxTEXT_ATTR_FONT_UNDERLINE:           int : !foreign lua "wx.wxTEXT_ATTR_FONT_UNDERLINE"
export wxTEXT_ATTR_FONT:                     int : !foreign lua "wx.wxTEXT_ATTR_FONT"
export wxTEXT_ATTR_ALIGNMENT:                int : !foreign lua "wx.wxTEXT_ATTR_ALIGNMENT"
export wxTEXT_ATTR_LEFT_INDENT:              int : !foreign lua "wx.wxTEXT_ATTR_LEFT_INDENT"
export wxTEXT_ATTR_RIGHT_INDENT:             int : !foreign lua "wx.wxTEXT_ATTR_RIGHT_INDENT"
export wxTEXT_ATTR_TABS:                     int : !foreign lua "wx.wxTEXT_ATTR_TABS"
export wxTR_NO_BUTTONS:                      int : !foreign lua "wx.wxTR_NO_BUTTONS"
export wxTR_HAS_BUTTONS:                     int : !foreign lua "wx.wxTR_HAS_BUTTONS"
export wxTR_TWIST_BUTTONS:                   int : !foreign lua "wx.wxTR_TWIST_BUTTONS"
export wxTR_NO_LINES:                        int : !foreign lua "wx.wxTR_NO_LINES"
export wxTR_SINGLE:                          int : !foreign lua "wx.wxTR_SINGLE"
export wxTR_MULTIPLE:                        int : !foreign lua "wx.wxTR_MULTIPLE"
export wxTR_EXTENDED:                        int : !foreign lua "wx.wxTR_EXTENDED"
export wxTR_EDIT_LABELS:                     int : !foreign lua "wx.wxTR_EDIT_LABELS"
export wxTR_LINES_AT_ROOT:                   int : !foreign lua "wx.wxTR_LINES_AT_ROOT"
export wxTR_HIDE_ROOT:                       int : !foreign lua "wx.wxTR_HIDE_ROOT"
export wxTR_ROW_LINES:                       int : !foreign lua "wx.wxTR_ROW_LINES"
export wxTR_HAS_VARIABLE_ROW_HEIGHT:         int : !foreign lua "wx.wxTR_HAS_VARIABLE_ROW_HEIGHT"
export wxTR_FULL_ROW_HIGHLIGHT:              int : !foreign lua "wx.wxTR_FULL_ROW_HIGHLIGHT"
export wxTR_DEFAULT_STYLE:                   int : !foreign lua "wx.wxTR_DEFAULT_STYLE"
export wxTREE_HITTEST_ABOVE:                 int : !foreign lua "wx.wxTREE_HITTEST_ABOVE"
export wxTREE_HITTEST_BELOW:                 int : !foreign lua "wx.wxTREE_HITTEST_BELOW"
export wxTREE_HITTEST_NOWHERE:               int : !foreign lua "wx.wxTREE_HITTEST_NOWHERE"
export wxTREE_HITTEST_ONITEMBUTTON:          int : !foreign lua "wx.wxTREE_HITTEST_ONITEMBUTTON"
export wxTREE_HITTEST_ONITEMICON:            int : !foreign lua "wx.wxTREE_HITTEST_ONITEMICON"
export wxTREE_HITTEST_ONITEMINDENT:          int : !foreign lua "wx.wxTREE_HITTEST_ONITEMINDENT"
export wxTREE_HITTEST_ONITEMLABEL:           int : !foreign lua "wx.wxTREE_HITTEST_ONITEMLABEL"
export wxTREE_HITTEST_ONITEMRIGHT:           int : !foreign lua "wx.wxTREE_HITTEST_ONITEMRIGHT"
export wxTREE_HITTEST_ONITEMSTATEICON:       int : !foreign lua "wx.wxTREE_HITTEST_ONITEMSTATEICON"
export wxTREE_HITTEST_TOLEFT:                int : !foreign lua "wx.wxTREE_HITTEST_TOLEFT"
export wxTREE_HITTEST_TORIGHT:               int : !foreign lua "wx.wxTREE_HITTEST_TORIGHT"
export wxTREE_HITTEST_ONITEMUPPERPART:       int : !foreign lua "wx.wxTREE_HITTEST_ONITEMUPPERPART"
export wxTREE_HITTEST_ONITEMLOWERPART:       int : !foreign lua "wx.wxTREE_HITTEST_ONITEMLOWERPART"
export wxTREE_HITTEST_ONITEM:                int : !foreign lua "wx.wxTREE_HITTEST_ONITEM"
export wxDirDialogDefaultFolderStr:          string : !foreign lua "wx.wxDirDialogDefaultFolderStr"
export wxEVT_COMMAND_LIST_BEGIN_DRAG:        wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_BEGIN_DRAG" -- EVT_LIST_BEGIN_DRAG(id, fn)
export wxEVT_COMMAND_LIST_BEGIN_RDRAG:       wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_BEGIN_RDRAG" -- EVT_LIST_BEGIN_RDRAG(id, fn)
export wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT:  wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT" -- EVT_LIST_BEGIN_LABEL_EDIT(id, fn)
export wxEVT_COMMAND_LIST_COL_CLICK:         wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_COL_CLICK" -- EVT_LIST_COL_CLICK(id, fn)
export wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS:  wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS" -- EVT_LIST_DELETE_ALL_ITEMS(id, fn)
export wxEVT_COMMAND_LIST_DELETE_ITEM:       wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_DELETE_ITEM" -- EVT_LIST_DELETE_ITEM(id, fn)
export wxEVT_COMMAND_LIST_END_LABEL_EDIT:    wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_END_LABEL_EDIT" -- EVT_LIST_END_LABEL_EDIT(id, fn)
export wxEVT_COMMAND_LIST_INSERT_ITEM:       wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_INSERT_ITEM" -- EVT_LIST_INSERT_ITEM(id, fn)
export wxEVT_COMMAND_LIST_ITEM_ACTIVATED:    wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_ITEM_ACTIVATED" -- EVT_LIST_ITEM_ACTIVATED(id, fn)
export wxEVT_COMMAND_LIST_ITEM_DESELECTED:   wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_ITEM_DESELECTED" -- EVT_LIST_ITEM_DESELECTED(id, fn)
export wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK: wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK" -- EVT_LIST_ITEM_MIDDLE_CLICK(id, fn)
export wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK:  wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK" -- EVT_LIST_ITEM_RIGHT_CLICK(id, fn)
export wxEVT_COMMAND_LIST_ITEM_SELECTED:     wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_ITEM_SELECTED" -- EVT_LIST_ITEM_SELECTED(id, fn)
export wxEVT_COMMAND_LIST_KEY_DOWN:          wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_KEY_DOWN" -- EVT_LIST_KEY_DOWN(id, fn)
export wxEVT_COMMAND_LIST_CACHE_HINT:        wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_CACHE_HINT" -- EVT_LIST_CACHE_HINT(id, fn)
export wxEVT_COMMAND_LIST_COL_RIGHT_CLICK:   wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_COL_RIGHT_CLICK" -- EVT_LIST_COL_RIGHT_CLICK(id, fn)
export wxEVT_COMMAND_LIST_COL_BEGIN_DRAG:    wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_COL_BEGIN_DRAG" -- EVT_LIST_COL_BEGIN_DRAG(id, fn)
export wxEVT_COMMAND_LIST_COL_DRAGGING:      wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_COL_DRAGGING" -- EVT_LIST_COL_DRAGGING(id, fn)
export wxEVT_COMMAND_LIST_COL_END_DRAG:      wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_COL_END_DRAG" -- EVT_LIST_COL_END_DRAG(id, fn)
export wxEVT_COMMAND_LIST_ITEM_FOCUSED:      wxEventType : !foreign lua "wx.wxEVT_COMMAND_LIST_ITEM_FOCUSED" -- EVT_LIST_ITEM_FOCUSED(id, fn)
export wxEVT_SPIN_UP:                        wxEventType : !foreign lua "wx.wxEVT_SPIN_UP" -- EVT_SPIN_UP(winid, func)
export wxEVT_SPIN_DOWN:                      wxEventType : !foreign lua "wx.wxEVT_SPIN_DOWN" -- EVT_SPIN_DOWN(winid, func)
export wxEVT_SPIN:                           wxEventType : !foreign lua "wx.wxEVT_SPIN" -- EVT_SPIN(winid, func)
export wxEVT_COMMAND_TEXT_URL:               wxEventType : !foreign lua "wx.wxEVT_COMMAND_TEXT_URL" -- EVT_TEXT_URL(id, fn)
export wxEVT_COMMAND_TREE_BEGIN_DRAG:        wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_BEGIN_DRAG" -- EVT_TREE_BEGIN_DRAG(id, fn)
export wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT:  wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT" -- EVT_TREE_BEGIN_LABEL_EDIT(id, fn)
export wxEVT_COMMAND_TREE_BEGIN_RDRAG:       wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_BEGIN_RDRAG" -- EVT_TREE_BEGIN_RDRAG(id, fn)
export wxEVT_COMMAND_TREE_DELETE_ITEM:       wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_DELETE_ITEM" -- EVT_TREE_DELETE_ITEM(id, fn)
export wxEVT_COMMAND_TREE_END_DRAG:          wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_END_DRAG" -- EVT_TREE_END_DRAG(id, fn)
export wxEVT_COMMAND_TREE_END_LABEL_EDIT:    wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_END_LABEL_EDIT" -- EVT_TREE_END_LABEL_EDIT(id, fn)
export wxEVT_COMMAND_TREE_GET_INFO:          wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_GET_INFO" -- EVT_TREE_GET_INFO(id, fn)
export wxEVT_COMMAND_TREE_ITEM_ACTIVATED:    wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_ITEM_ACTIVATED" -- EVT_TREE_ITEM_ACTIVATED(id, fn)
export wxEVT_COMMAND_TREE_ITEM_COLLAPSED:    wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_ITEM_COLLAPSED" -- EVT_TREE_ITEM_COLLAPSED(id, fn)
export wxEVT_COMMAND_TREE_ITEM_COLLAPSING:   wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_ITEM_COLLAPSING" -- EVT_TREE_ITEM_COLLAPSING(id, fn)
export wxEVT_COMMAND_TREE_ITEM_EXPANDED:     wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_ITEM_EXPANDED" -- EVT_TREE_ITEM_EXPANDED(id, fn)
export wxEVT_COMMAND_TREE_ITEM_EXPANDING:    wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_ITEM_EXPANDING" -- EVT_TREE_ITEM_EXPANDING(id, fn)
export wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK: wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK" -- EVT_TREE_ITEM_MIDDLE_CLICK(id, fn)
export wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK:  wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK" -- EVT_TREE_ITEM_RIGHT_CLICK(id, fn)
export wxEVT_COMMAND_TREE_KEY_DOWN:          wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_KEY_DOWN" -- EVT_TREE_KEY_DOWN(id, fn)
export wxEVT_COMMAND_TREE_SEL_CHANGED:       wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_SEL_CHANGED" -- EVT_TREE_SEL_CHANGED(id, fn)
export wxEVT_COMMAND_TREE_SEL_CHANGING:      wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_SEL_CHANGING" -- EVT_TREE_SEL_CHANGING(id, fn)
export wxEVT_COMMAND_TREE_SET_INFO:          wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_SET_INFO" -- EVT_TREE_SET_INFO(id, fn)
export wxEVT_COMMAND_TREE_ITEM_MENU:         wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_ITEM_MENU" -- EVT_TREE_ITEM_MENU(id, fn)
export wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK: wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK" -- EVT_TREE_STATE_IMAGE_CLICK(id, fn)
export wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP:   wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP" -- EVT_TREE_ITEM_GETTOOLTIP(id, fn)

export wxCheckBoxState :: wxEnum
export wxCHK_UNCHECKED:    wxCheckBoxState : !foreign lua "wx.wxCHK_UNCHECKED"
export wxCHK_CHECKED:      wxCheckBoxState : !foreign lua "wx.wxCHK_CHECKED"
export wxCHK_UNDETERMINED: wxCheckBoxState : !foreign lua "wx.wxCHK_UNDETERMINED"

export wxListColumnFormat :: wxEnum
export wxLIST_FORMAT_LEFT:   wxListColumnFormat : !foreign lua "wx.wxLIST_FORMAT_LEFT"
export wxLIST_FORMAT_RIGHT:  wxListColumnFormat : !foreign lua "wx.wxLIST_FORMAT_RIGHT"
export wxLIST_FORMAT_CENTRE: wxListColumnFormat : !foreign lua "wx.wxLIST_FORMAT_CENTRE"
export wxLIST_FORMAT_CENTER: wxListColumnFormat : !foreign lua "wx.wxLIST_FORMAT_CENTER"

export wxTextCtrlHitTestResult :: wxEnum
export wxTE_HT_UNKNOWN: wxTextCtrlHitTestResult : !foreign lua "wx.wxTE_HT_UNKNOWN"
export wxTE_HT_BEFORE:  wxTextCtrlHitTestResult : !foreign lua "wx.wxTE_HT_BEFORE"
export wxTE_HT_ON_TEXT: wxTextCtrlHitTestResult : !foreign lua "wx.wxTE_HT_ON_TEXT"
export wxTE_HT_BELOW:   wxTextCtrlHitTestResult : !foreign lua "wx.wxTE_HT_BELOW"
export wxTE_HT_BEYOND:  wxTextCtrlHitTestResult : !foreign lua "wx.wxTE_HT_BEYOND"

export wxTextAttrAlignment :: wxEnum
export wxTEXT_ALIGNMENT_DEFAULT:   wxTextAttrAlignment : !foreign lua "wx.wxTEXT_ALIGNMENT_DEFAULT"
export wxTEXT_ALIGNMENT_LEFT:      wxTextAttrAlignment : !foreign lua "wx.wxTEXT_ALIGNMENT_LEFT"
export wxTEXT_ALIGNMENT_CENTRE:    wxTextAttrAlignment : !foreign lua "wx.wxTEXT_ALIGNMENT_CENTRE"
export wxTEXT_ALIGNMENT_CENTER:    wxTextAttrAlignment : !foreign lua "wx.wxTEXT_ALIGNMENT_CENTER"
export wxTEXT_ALIGNMENT_RIGHT:     wxTextAttrAlignment : !foreign lua "wx.wxTEXT_ALIGNMENT_RIGHT"
export wxTEXT_ALIGNMENT_JUSTIFIED: wxTextAttrAlignment : !foreign lua "wx.wxTEXT_ALIGNMENT_JUSTIFIED"

export wxTreeItemIcon :: wxEnum
export wxTreeItemIcon_Normal:           wxTreeItemIcon : !foreign lua "wx.wxTreeItemIcon_Normal"
export wxTreeItemIcon_Selected:         wxTreeItemIcon : !foreign lua "wx.wxTreeItemIcon_Selected"
export wxTreeItemIcon_Expanded:         wxTreeItemIcon : !foreign lua "wx.wxTreeItemIcon_Expanded"
export wxTreeItemIcon_SelectedExpanded: wxTreeItemIcon : !foreign lua "wx.wxTreeItemIcon_SelectedExpanded"
export wxTreeItemIcon_Max:              wxTreeItemIcon : !foreign lua "wx.wxTreeItemIcon_Max"

export wxTreeItemIdValue :: wxEnum

export wxDIRCTRL_DIR_ONLY:     wxEnum : !foreign lua "wx.wxDIRCTRL_DIR_ONLY"
export wxDIRCTRL_SELECT_FIRST: wxEnum : !foreign lua "wx.wxDIRCTRL_SELECT_FIRST"
export wxDIRCTRL_SHOW_FILTERS: wxEnum : !foreign lua "wx.wxDIRCTRL_SHOW_FILTERS"
export wxDIRCTRL_3D_INTERNAL:  wxEnum : !foreign lua "wx.wxDIRCTRL_3D_INTERNAL"
export wxDIRCTRL_EDIT_LABELS:  wxEnum : !foreign lua "wx.wxDIRCTRL_EDIT_LABELS"

export wxButton :: !foreign struct {
	using wxControl,

	new            :: () -> wxButton !foreign lua "wx.wxButton",
	new            :: (parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxButton") -> wxButton !foreign lua "wx.wxButton",
	GetDefaultSize :: () -> wxSize !foreign lua "wx.wxButton.GetDefaultSize",

	Create     :: (self:wxButton, parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxButton") -> bool !foreign method "Create",
	SetDefault :: (self:wxButton) !foreign method "SetDefault",
}

export wxBitmapButton :: !foreign struct {
	using wxButton,

	new :: () -> wxBitmapButton !foreign lua "wx.wxBitmapButton",
	new :: (parent:wxWindow, id:wxWindowID, bitmap:wxBitmap, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxBU_AUTODRAW, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxBitmapButton") -> wxBitmapButton !foreign lua "wx.wxBitmapButton",

	Create            :: (self:wxBitmapButton, parent:wxWindow, id:wxWindowID, bitmap:wxBitmap, pos:wxPoint, size:wxSize=wxDefaultSize, style:int--[[long]]=wxBU_AUTODRAW, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxBitmapButton") -> bool !foreign method "Create",
	GetBitmapDisabled :: (self:wxBitmapButton) -> wxBitmap !foreign method "GetBitmapDisabled",
	GetBitmapFocus    :: (self:wxBitmapButton) -> wxBitmap !foreign method "GetBitmapFocus",
	GetBitmapHover    :: (self:wxBitmapButton) -> wxBitmap !foreign method "GetBitmapHover",
	GetBitmapLabel    :: (self:wxBitmapButton) -> wxBitmap !foreign method "GetBitmapLabel",
	GetBitmapSelected :: (self:wxBitmapButton) -> wxBitmap !foreign method "GetBitmapSelected",
	SetBitmapDisabled :: (self:wxBitmapButton, bitmap:wxBitmap) !foreign method "SetBitmapDisabled",
	SetBitmapFocus    :: (self:wxBitmapButton, bitmap:wxBitmap) !foreign method "SetBitmapFocus",
	SetBitmapHover    :: (self:wxBitmapButton, hover:wxBitmap) !foreign method "SetBitmapHover",
	SetBitmapLabel    :: (self:wxBitmapButton, bitmap:wxBitmap) !foreign method "SetBitmapLabel",
	SetBitmapSelected :: (self:wxBitmapButton, bitmap:wxBitmap) !foreign method "SetBitmapSelected",
}

export wxToggleButton :: !foreign struct {
	using wxControl,

	new :: () -> wxToggleButton !foreign lua "wx.wxToggleButton",
	new :: (parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxToggleButton") -> wxToggleButton !foreign lua "wx.wxToggleButton",

	Create   :: (self:wxToggleButton, parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxToggleButton") -> bool !foreign method "Create",
	SetValue :: (self:wxToggleButton, state:bool) !foreign method "SetValue",
	GetValue :: (self:wxToggleButton) -> bool !foreign method "GetValue",
}

export wxCheckBox :: !foreign struct {
	using wxControl,

	new :: () -> wxCheckBox !foreign lua "wx.wxCheckBox",
	new :: (parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, val:wxValidator=wxDefaultValidator, name:wxString|string="wxCheckBox") -> wxCheckBox !foreign lua "wx.wxCheckBox",

	Create                   :: (self:wxCheckBox, parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, val:wxValidator=wxDefaultValidator, name:wxString|string="wxCheckBox") -> bool !foreign method "Create",
	GetValue                 :: (self:wxCheckBox) -> bool !foreign method "GetValue",
	Get3StateValue           :: (self:wxCheckBox) -> wxCheckBoxState !foreign method "Get3StateValue",
	Is3rdStateAllowedForUser :: (self:wxCheckBox) -> bool !foreign method "Is3rdStateAllowedForUser",
	Is3State                 :: (self:wxCheckBox) -> bool !foreign method "Is3State",
	IsChecked                :: (self:wxCheckBox) -> bool !foreign method "IsChecked",
	SetValue                 :: (self:wxCheckBox, state:bool) !foreign method "SetValue",
	Set3StateValue           :: (self:wxCheckBox, state:wxCheckBoxState) !foreign method "Set3StateValue",
}

export wxControlWithItems :: !foreign struct {
	using wxControl,

	Append                :: (self:wxControlWithItems, item:wxString|string) -> int !foreign method "Append",
	Append                :: (self:wxControlWithItems, item:wxString|string, number:int--[[voidptr_long]]) -> int !foreign method "Append",
	Append                :: (self:wxControlWithItems, item:wxString|string, clientData:wxClientData) -> int !foreign method "Append",
	Append                :: (self:wxControlWithItems, strings:wxArrayString|[]string) !foreign method "Append",
	Clear                 :: (self:wxControlWithItems) !foreign method "Clear",
	Delete                :: (self:wxControlWithItems, n:int) !foreign method "Delete",
	FindString            :: (self:wxControlWithItems, str:wxString|string) -> int !foreign method "FindString",
	GetClientData         :: (self:wxControlWithItems, n:int) -> int--[[voidptr_long]] !foreign method "GetClientData",
	GetClientObject       :: (self:wxControlWithItems, n:int) -> wxClientData !foreign method "GetClientObject",
	GetStringClientObject :: (self:wxControlWithItems, n:int) -> wxStringClientData !foreign method "GetStringClientObject",
	GetCount              :: (self:wxControlWithItems) -> int !foreign method "GetCount",
	GetSelection          :: (self:wxControlWithItems) -> int !foreign method "GetSelection",
	GetString             :: (self:wxControlWithItems, n:int) -> string !foreign method "GetString",
	GetStringSelection    :: (self:wxControlWithItems) -> string !foreign method "GetStringSelection",
	Insert                :: (self:wxControlWithItems, item:wxString|string, pos:int) -> int !foreign method "Insert",
	Insert                :: (self:wxControlWithItems, item:wxString|string, pos:int, number:int--[[voidptr_long]]) -> int !foreign method "Insert",
	Insert                :: (self:wxControlWithItems, item:wxString|string, pos:int, clientData:wxClientData) -> int !foreign method "Insert",
	IsEmpty               :: (self:wxControlWithItems) -> bool !foreign method "IsEmpty",
	Select                :: (self:wxControlWithItems, n:int) !foreign method "Select",
	SetClientData         :: (self:wxControlWithItems, n:int, number:int--[[voidptr_long]]) !foreign method "SetClientData",
	SetClientObject       :: (self:wxControlWithItems, n:int, data:wxClientData) !foreign method "SetClientObject",
	SetSelection          :: (self:wxControlWithItems, n:int) !foreign method "SetSelection",
	SetString             :: (self:wxControlWithItems, n:int, str:wxString|string) !foreign method "SetString",
	SetStringSelection    :: (self:wxControlWithItems, str:wxString|string) -> bool !foreign method "SetStringSelection",
}

export wxChoice :: !foreign struct {
	using wxControlWithItems,

	new :: () -> wxChoice !foreign lua "wx.wxChoice",
	new :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, choices:wxArrayString|[]string=wxArrayString.null, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxChoice") -> wxChoice !foreign lua "wx.wxChoice",

	Create              :: (self:wxChoice, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, choices:wxArrayString|[]string=wxArrayString.null, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxChoice") -> bool !foreign method "Create",
	GetCurrentSelection :: (self:wxChoice) -> int !foreign method "GetCurrentSelection",
}

export wxComboBox :: !foreign struct {
	using wxControlWithItems,

	new :: () -> wxComboBox !foreign lua "wx.wxComboBox",
	new :: (parent:wxWindow, id:wxWindowID, value:wxString|string="", pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, choices:wxArrayString|[]string=wxArrayString.null, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxComboBox") -> wxComboBox !foreign lua "wx.wxComboBox",

	Create               :: (self:wxComboBox, parent:wxWindow, id:wxWindowID, value:wxString|string="", pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, choices:wxArrayString|[]string=wxArrayString.null, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxComboBox") -> bool !foreign method "Create",
	CanCopy              :: (self:wxComboBox) -> bool !foreign method "CanCopy",
	CanCut               :: (self:wxComboBox) -> bool !foreign method "CanCut",
	CanPaste             :: (self:wxComboBox) -> bool !foreign method "CanPaste",
	CanRedo              :: (self:wxComboBox) -> bool !foreign method "CanRedo",
	CanUndo              :: (self:wxComboBox) -> bool !foreign method "CanUndo",
	Copy                 :: (self:wxComboBox) !foreign method "Copy",
	Cut                  :: (self:wxComboBox) !foreign method "Cut",
	GetCurrentSelection  :: (self:wxComboBox) -> int !foreign method "GetCurrentSelection",
	GetInsertionPoint    :: (self:wxComboBox) -> int--[[long]] !foreign method "GetInsertionPoint",
	GetLastPosition      :: (self:wxComboBox) -> int--[[long]] !foreign method "GetLastPosition",
	GetValue             :: (self:wxComboBox) -> string !foreign method "GetValue",
	Paste                :: (self:wxComboBox) !foreign method "Paste",
	Redo                 :: (self:wxComboBox) !foreign method "Redo",
	Replace              :: (self:wxComboBox, from:int--[[long]], to:int--[[long]], text:wxString|string) !foreign method "Replace",
	Remove               :: (self:wxComboBox, from:int--[[long]], to:int--[[long]]) !foreign method "Remove",
	SetInsertionPoint    :: (self:wxComboBox, pos:int--[[long]]) !foreign method "SetInsertionPoint",
	SetInsertionPointEnd :: (self:wxComboBox) !foreign method "SetInsertionPointEnd",
	SetSelection         :: (self:wxComboBox, from:int--[[long]], to:int--[[long]]) !foreign method "SetSelection",
	SetValue             :: (self:wxComboBox, text:wxString|string) !foreign method "SetValue",
	Undo                 :: (self:wxComboBox) !foreign method "Undo",
}

export wxGauge :: !foreign struct {
	using wxControl,

	new :: () -> wxGauge !foreign lua "wx.wxGauge",
	new :: (parent:wxWindow, id:wxWindowID, range:int, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxGA_HORIZONTAL, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxGauge") -> wxGauge !foreign lua "wx.wxGauge",

	Create         :: (self:wxGauge, parent:wxWindow, id:wxWindowID, range:int, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxGA_HORIZONTAL, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxGauge") -> bool !foreign method "Create",
	GetBezelFace   :: (self:wxGauge) -> int !foreign method "GetBezelFace",
	GetRange       :: (self:wxGauge) -> int !foreign method "GetRange",
	GetShadowWidth :: (self:wxGauge) -> int !foreign method "GetShadowWidth",
	GetValue       :: (self:wxGauge) -> int !foreign method "GetValue",
	IsVertical     :: (self:wxGauge) -> bool !foreign method "IsVertical",
	Pulse          :: (self:wxGauge) !foreign method "Pulse",
	SetBezelFace   :: (self:wxGauge, width:int) !foreign method "SetBezelFace",
	SetRange       :: (self:wxGauge, range:int) !foreign method "SetRange",
	SetShadowWidth :: (self:wxGauge, width:int) !foreign method "SetShadowWidth",
	SetValue       :: (self:wxGauge, pos:int) !foreign method "SetValue",
}

export wxListBox :: !foreign struct {
	using wxControlWithItems,

	new :: () -> wxListBox !foreign lua "wx.wxListBox",
	new :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, choices:wxArrayString|[]string=wxArrayString.null, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxListBox") -> wxListBox !foreign lua "wx.wxListBox",

	Create             :: (self:wxListBox, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, choices:wxArrayString|[]string=wxArrayString.null, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxListBox") -> bool !foreign method "Create",
	Deselect           :: (self:wxListBox, n:int) !foreign method "Deselect",
	GetSelections      :: (self:wxListBox) -> (selections:[]int) !foreign method "GetSelections",
	HitTest            :: (self:wxListBox, point:wxPoint) -> int !foreign method "HitTest",
	InsertItems        :: (self:wxListBox, items:wxArrayString|[]string, pos:int) !foreign method "InsertItems",
	IsSelected         :: (self:wxListBox, n:int) -> bool !foreign method "IsSelected",
	Set                :: (self:wxListBox, choices:wxArrayString|[]string) !foreign method "Set",
	SetFirstItem       :: (self:wxListBox, n:int) !foreign method "SetFirstItem",
	SetSelection       :: (self:wxListBox, n:int, select:bool=true) !foreign method "SetSelection",
	SetStringSelection :: (self:wxListBox, str:wxString|string, select:bool=true) !foreign method "SetStringSelection",
}

export wxCheckListBox :: !foreign struct {
	using wxListBox,

	new :: () -> wxCheckListBox !foreign lua "wx.wxCheckListBox",
	new :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, choices:wxArrayString|[]string=wxArrayString.null, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxCheckListBox") -> wxCheckListBox !foreign lua "wx.wxCheckListBox",

	Create    :: (self:wxCheckListBox, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, choices:wxArrayString|[]string=wxArrayString.null, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxCheckListBox") -> bool !foreign method "Create",
	Check     :: (self:wxCheckListBox, item:int, check:bool=true) !foreign method "Check",
	IsChecked :: (self:wxCheckListBox, item:int) -> bool !foreign method "IsChecked",
}

export wxListCtrl :: !foreign struct {
	using wxControl,

	new :: () -> wxListCtrl !foreign lua "wx.wxListCtrl",
	new :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxLC_ICON, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxListCtrl") -> wxListCtrl !foreign lua "wx.wxListCtrl",

	Create                  :: (self:wxListCtrl, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxLC_ICON, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxListCtrl") -> bool !foreign method "Create",
	Arrange                 :: (self:wxListCtrl, flag:int=wxLIST_ALIGN_DEFAULT) -> bool !foreign method "Arrange",
	AssignImageList         :: (self:wxListCtrl, imageList:wxImageList, which:int) !foreign method "AssignImageList",
	ClearAll                :: (self:wxListCtrl) !foreign method "ClearAll",
	DeleteAllItems          :: (self:wxListCtrl) -> bool !foreign method "DeleteAllItems",
	DeleteColumn            :: (self:wxListCtrl, col:int) -> bool !foreign method "DeleteColumn",
	DeleteItem              :: (self:wxListCtrl, item:int--[[long]]) -> bool !foreign method "DeleteItem",
	EditLabel               :: (self:wxListCtrl, item:int--[[long]]) !foreign method "EditLabel",
	EnsureVisible           :: (self:wxListCtrl, item:int--[[long]]) -> bool !foreign method "EnsureVisible",
	FindItem                :: (self:wxListCtrl, start:int--[[long]], str:wxString|string, partial:bool=false) -> int--[[long]] !foreign method "FindItem",
	FindItem                :: (self:wxListCtrl, start:int--[[long]], data:int--[[long]]) -> int--[[long]] !foreign method "FindItem",
	FindItem                :: (self:wxListCtrl, start:int--[[long]], pt:wxPoint, direction:int) -> int--[[long]] !foreign method "FindItem",
	GetColumn               :: (self:wxListCtrl, col:int, item:wxListItem) -> bool !foreign method "GetColumn",
	GetColumnCount          :: (self:wxListCtrl) -> int !foreign method "GetColumnCount",
	GetColumnWidth          :: (self:wxListCtrl, col:int) -> int !foreign method "GetColumnWidth",
	GetCountPerPage         :: (self:wxListCtrl) -> int !foreign method "GetCountPerPage",
	GetEditControl          :: (self:wxListCtrl) -> wxTextCtrl !foreign method "GetEditControl",
	GetImageList            :: (self:wxListCtrl, which:int) -> wxImageList !foreign method "GetImageList",
	GetItem                 :: (self:wxListCtrl, info:wxListItem) -> bool !foreign method "GetItem",
	GetItemCount            :: (self:wxListCtrl) -> int !foreign method "GetItemCount",
	GetItemData             :: (self:wxListCtrl, item:int--[[long]]) -> int--[[long]] !foreign method "GetItemData",
	GetItemFont             :: (self:wxListCtrl, item:int--[[long]]) -> wxFont !foreign method "GetItemFont",
	GetItemPosition         :: (self:wxListCtrl, item:int--[[long]], pos:wxPoint) -> bool !foreign method "GetItemPosition",
	GetItemRect             :: (self:wxListCtrl, item:int--[[long]], rect:wxRect, code:int=wxLIST_RECT_BOUNDS) -> bool !foreign method "GetItemRect",
	GetItemSpacing          :: (self:wxListCtrl) -> wxSize !foreign method "GetItemSpacing",
	GetItemState            :: (self:wxListCtrl, item:int--[[long]], stateMask:int--[[long]]) -> int !foreign method "GetItemState",
	GetItemText             :: (self:wxListCtrl, item:int--[[long]]) -> string !foreign method "GetItemText",
	GetNextItem             :: (self:wxListCtrl, item:int--[[long]], geometry:int=wxLIST_NEXT_ALL, state:int=wxLIST_STATE_DONTCARE) -> int--[[long]] !foreign method "GetNextItem",
	GetSelectedItemCount    :: (self:wxListCtrl) -> int !foreign method "GetSelectedItemCount",
	GetTextColour           :: (self:wxListCtrl) -> wxColour !foreign method "GetTextColour",
	GetTopItem              :: (self:wxListCtrl) -> int--[[long]] !foreign method "GetTopItem",
	GetViewRect             :: (self:wxListCtrl) -> wxRect !foreign method "GetViewRect",
	HitTest                 :: (self:wxListCtrl, point:wxPoint) -> int--[[long]], int !foreign method "HitTest",
	InsertColumn            :: (self:wxListCtrl, col:int--[[long]], info:wxListItem) -> int--[[long]] !foreign method "InsertColumn",
	InsertColumn            :: (self:wxListCtrl, col:int--[[long]], heading:wxString|string, format:int=wxLIST_FORMAT_LEFT, width:int=-1) -> int--[[long]] !foreign method "InsertColumn",
	InsertItem              :: (self:wxListCtrl, info:wxListItem) -> int--[[long]] !foreign method "InsertItem",
	InsertItem              :: (self:wxListCtrl, index:int--[[long]], label:wxString|string) -> int--[[long]] !foreign method "InsertItem",
	InsertItem              :: (self:wxListCtrl, index:int--[[long]], imageIndex:int) -> int--[[long]] !foreign method "InsertItem",
	InsertItem              :: (self:wxListCtrl, index:int--[[long]], label:wxString|string, imageIndex:int) -> int--[[long]] !foreign method "InsertItem",
	ScrollList              :: (self:wxListCtrl, dx,dy:int) -> bool !foreign method "ScrollList",
	SetColumn               :: (self:wxListCtrl, col:int, item:wxListItem) -> bool !foreign method "SetColumn",
	SetColumnWidth          :: (self:wxListCtrl, col:int, width:int) -> bool !foreign method "SetColumnWidth",
	SetImageList            :: (self:wxListCtrl, imageList:wxImageList, which:int) !foreign method "SetImageList",
	SetItem                 :: (self:wxListCtrl, info:wxListItem) -> bool !foreign method "SetItem",
	SetItem                 :: (self:wxListCtrl, index:int--[[long]], col:int, label:wxString|string, imageId:int=-1) -> int--[[long]] !foreign method "SetItem",
	SetItemBackgroundColour :: (self:wxListCtrl, item:int--[[long]], col:wxColour) !foreign method "SetItemBackgroundColour",
	SetItemColumnImage      :: (self:wxListCtrl, item:int--[[long]], column:int--[[long]], image:int) -> bool !foreign method "SetItemColumnImage",
	SetItemData             :: (self:wxListCtrl, item:int--[[long]], data:int--[[long]]) -> bool !foreign method "SetItemData",
	SetItemImage            :: (self:wxListCtrl, item:int--[[long]], image:int) -> bool !foreign method "SetItemImage",
	SetItemPosition         :: (self:wxListCtrl, item:int--[[long]], pos:wxPoint) -> bool !foreign method "SetItemPosition",
	SetItemState            :: (self:wxListCtrl, item:int--[[long]], state:int--[[long]], stateMask:int--[[long]]) -> bool !foreign method "SetItemState",
	SetItemText             :: (self:wxListCtrl, item:int--[[long]], text:wxString|string) !foreign method "SetItemText",
	SetItemTextColour       :: (self:wxListCtrl, item:int--[[long]], col:wxColour) !foreign method "SetItemTextColour",
	SetSingleStyle          :: (self:wxListCtrl, style:int--[[long]], add:bool=true) !foreign method "SetSingleStyle",
	SetTextColour           :: (self:wxListCtrl, col:wxColour) !foreign method "SetTextColour",
	SortItems               :: (self:wxListCtrl, arg1:(item1,item2:int,data:int)->(side:int), data:int--[[long]]) -> bool !foreign method "SortItems",
}

export wxListItemAttr :: !foreign struct {
	using wxLuaUserdata,

	new :: (colText:wxColour=wxNullColour, colBack:wxColour=wxNullColour, font:wxFont=wxNullFont) -> wxListItemAttr !foreign lua "wx.wxListItemAttr",

	AssignFrom          :: (self:wxListItemAttr, source:wxListItemAttr) !foreign method "AssignFrom",
	GetBackgroundColour :: (self:wxListItemAttr) -> wxColour !foreign method "GetBackgroundColour",
	GetFont             :: (self:wxListItemAttr) -> wxFont !foreign method "GetFont",
	GetTextColour       :: (self:wxListItemAttr) -> wxColour !foreign method "GetTextColour",
	HasBackgroundColour :: (self:wxListItemAttr) -> bool !foreign method "HasBackgroundColour",
	HasFont             :: (self:wxListItemAttr) -> bool !foreign method "HasFont",
	HasTextColour       :: (self:wxListItemAttr) -> bool !foreign method "HasTextColour",
	SetBackgroundColour :: (self:wxListItemAttr, colBack:wxColour) !foreign method "SetBackgroundColour",
	SetFont             :: (self:wxListItemAttr, font:wxFont) !foreign method "SetFont",
	SetTextColour       :: (self:wxListItemAttr, colText:wxColour) !foreign method "SetTextColour",
}

export wxListItem :: !foreign struct {
	using wxObject,

	new :: () -> wxListItem !foreign lua "wx.wxListItem",
	new :: (item:wxListItem) -> wxListItem !foreign lua "wx.wxListItem",

	Clear               :: (self:wxListItem) !foreign method "Clear",
	ClearAttributes     :: (self:wxListItem) !foreign method "ClearAttributes",
	GetAlign            :: (self:wxListItem) -> wxListColumnFormat !foreign method "GetAlign",
	GetAttributes       :: (self:wxListItem) -> wxListItemAttr !foreign method "GetAttributes",
	GetBackgroundColour :: (self:wxListItem) -> wxColour !foreign method "GetBackgroundColour",
	GetColumn           :: (self:wxListItem) -> int !foreign method "GetColumn",
	GetData             :: (self:wxListItem) -> int--[[long]] !foreign method "GetData",
	GetFont             :: (self:wxListItem) -> wxFont !foreign method "GetFont",
	GetId               :: (self:wxListItem) -> int--[[long]] !foreign method "GetId",
	GetImage            :: (self:wxListItem) -> int !foreign method "GetImage",
	GetMask             :: (self:wxListItem) -> int--[[long]] !foreign method "GetMask",
	GetState            :: (self:wxListItem) -> int--[[long]] !foreign method "GetState",
	GetText             :: (self:wxListItem) -> string !foreign method "GetText",
	GetTextColour       :: (self:wxListItem) -> wxColour !foreign method "GetTextColour",
	GetWidth            :: (self:wxListItem) -> int !foreign method "GetWidth",
	HasAttributes       :: (self:wxListItem) -> bool !foreign method "HasAttributes",
	SetAlign            :: (self:wxListItem, align:wxListColumnFormat) !foreign method "SetAlign",
	SetBackgroundColour :: (self:wxListItem, colBack:wxColour) !foreign method "SetBackgroundColour",
	SetColumn           :: (self:wxListItem, col:int) !foreign method "SetColumn",
	SetData             :: (self:wxListItem, data:int--[[long]]) !foreign method "SetData",
	SetFont             :: (self:wxListItem, font:wxFont) !foreign method "SetFont",
	SetId               :: (self:wxListItem, id:int--[[long]]) !foreign method "SetId",
	SetImage            :: (self:wxListItem, image:int) !foreign method "SetImage",
	SetMask             :: (self:wxListItem, mask:int--[[long]]) !foreign method "SetMask",
	SetState            :: (self:wxListItem, state:int--[[long]]) !foreign method "SetState",
	SetStateMask        :: (self:wxListItem, stateMask:int--[[long]]) !foreign method "SetStateMask",
	SetText             :: (self:wxListItem, text:wxString|string) !foreign method "SetText",
	SetTextColour       :: (self:wxListItem, colText:wxColour) !foreign method "SetTextColour",
	SetWidth            :: (self:wxListItem, width:int) !foreign method "SetWidth",
}

export wxListEvent :: !foreign struct {
	using wxNotifyEvent,

	new :: (commandType:wxEventType=0, id:int=0) -> wxListEvent !foreign lua "wx.wxListEvent",

	GetKeyCode      :: (self:wxListEvent) -> int !foreign method "GetKeyCode",
	GetIndex        :: (self:wxListEvent) -> int--[[long]] !foreign method "GetIndex",
	GetColumn       :: (self:wxListEvent) -> int !foreign method "GetColumn",
	GetPoint        :: (self:wxListEvent) -> wxPoint !foreign method "GetPoint",
	GetLabel        :: (self:wxListEvent) -> string !foreign method "GetLabel",
	GetText         :: (self:wxListEvent) -> string !foreign method "GetText",
	GetImage        :: (self:wxListEvent) -> int !foreign method "GetImage",
	GetData         :: (self:wxListEvent) -> int--[[long]] !foreign method "GetData",
	GetMask         :: (self:wxListEvent) -> int--[[long]] !foreign method "GetMask",
	GetItem         :: (self:wxListEvent) -> wxListItem !foreign method "GetItem",
	IsEditCancelled :: (self:wxListEvent) -> bool !foreign method "IsEditCancelled",
}

export wxListView :: !foreign struct {
	using wxListCtrl,

	new :: () -> wxListView !foreign lua "wx.wxListView",
	new :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxLC_ICON, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxListView") -> wxListView !foreign lua "wx.wxListView",

	Create           :: (self:wxListView, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxLC_ICON, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxListView") -> bool !foreign method "Create",
	ClearColumnImage :: (self:wxListView, col:int) !foreign method "ClearColumnImage",
	Focus            :: (self:wxListView, index:int--[[long]]) !foreign method "Focus",
	GetFirstSelected :: (self:wxListView) -> int--[[long]] !foreign method "GetFirstSelected",
	GetFocusedItem   :: (self:wxListView) -> int--[[long]] !foreign method "GetFocusedItem",
	GetNextSelected  :: (self:wxListView, item:int--[[long]]) -> int--[[long]] !foreign method "GetNextSelected",
	IsSelected       :: (self:wxListView, index:int--[[long]]) -> bool !foreign method "IsSelected",
	Select           :: (self:wxListView, n:int--[[long]], on:bool=true) !foreign method "Select",
	SetColumnImage   :: (self:wxListView, col:int, image:int) !foreign method "SetColumnImage",
}

export wxRadioBox :: !foreign struct {
	using wxControl,

	new :: () -> wxRadioBox !foreign lua "wx.wxRadioBox",
	new :: (parent:wxWindow, id:wxWindowID, label:wxString|string, point:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, choices:wxArrayString|[]string=wxArrayString.null, majorDimension:int=0, style:int--[[long]]=wxRA_SPECIFY_COLS, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxRadioBox") -> wxRadioBox !foreign lua "wx.wxRadioBox",

	Create             :: (self:wxRadioBox, parent:wxWindow, id:wxWindowID, label:wxString|string, point:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, choices:wxArrayString|[]string=wxArrayString.null, majorDimension:int=0, style:int--[[long]]=wxRA_SPECIFY_COLS, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxRadioBox") -> bool !foreign method "Create",
	Enable             :: (self:wxRadioBox, enable:bool) !foreign method "Enable",
	Enable             :: (self:wxRadioBox, n:int, enable:bool) !foreign method "Enable",
	FindString         :: (self:wxRadioBox, str:wxString|string) -> int !foreign method "FindString",
	GetCount           :: (self:wxRadioBox) -> int !foreign method "GetCount",
	GetSelection       :: (self:wxRadioBox) -> int !foreign method "GetSelection",
	GetStringSelection :: (self:wxRadioBox) -> string !foreign method "GetStringSelection",
	GetString          :: (self:wxRadioBox, n:int) -> string !foreign method "GetString",
	SetString          :: (self:wxRadioBox, n:int, label:wxString|string) !foreign method "SetString",
	SetSelection       :: (self:wxRadioBox, n:int) !foreign method "SetSelection",
	SetStringSelection :: (self:wxRadioBox, str:wxString|string) !foreign method "SetStringSelection",
	Show               :: (self:wxRadioBox, item:int, show:bool) -> bool !foreign method "Show",
}

export wxRadioButton :: !foreign struct {
	using wxControl,

	new :: () -> wxRadioButton !foreign lua "wx.wxRadioButton",
	new :: (parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxRadioButton") -> wxRadioButton !foreign lua "wx.wxRadioButton",

	Create   :: (self:wxRadioButton, parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxRadioButton") -> bool !foreign method "Create",
	GetValue :: (self:wxRadioButton) -> bool !foreign method "GetValue",
	SetValue :: (self:wxRadioButton, value:bool) !foreign method "SetValue",
}

export wxScrollBar :: !foreign struct {
	using wxControl,

	new :: () -> wxScrollBar !foreign lua "wx.wxScrollBar",
	new :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxSB_HORIZONTAL, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxScrollBar") -> wxScrollBar !foreign lua "wx.wxScrollBar",

	Create           :: (self:wxScrollBar, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxSB_HORIZONTAL, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxScrollBar") -> bool !foreign method "Create",
	GetRange         :: (self:wxScrollBar) -> int !foreign method "GetRange",
	GetPageSize      :: (self:wxScrollBar) -> int !foreign method "GetPageSize",
	GetThumbPosition :: (self:wxScrollBar) -> int !foreign method "GetThumbPosition",
	GetThumbSize     :: (self:wxScrollBar) -> int !foreign method "GetThumbSize",
	SetThumbPosition :: (self:wxScrollBar, viewStart:int) !foreign method "SetThumbPosition",
	SetScrollbar     :: (self:wxScrollBar, position:int, thumbSize:int, range:int, pageSize:int, refresh:bool=true) !foreign method "SetScrollbar",
}

export wxSlider :: !foreign struct {
	using wxControl,

	new :: () -> wxSlider !foreign lua "wx.wxSlider",
	new :: (parent:wxWindow, id:wxWindowID, value:int, minValue:int, maxValue:int, point:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxSL_HORIZONTAL, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxSlider") -> wxSlider !foreign lua "wx.wxSlider",

	Create         :: (self:wxSlider, parent:wxWindow, id:wxWindowID, value:int, minValue:int, maxValue:int, point:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxSL_HORIZONTAL, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxSlider") -> bool !foreign method "Create",
	ClearSel       :: (self:wxSlider) !foreign method "ClearSel",
	ClearTicks     :: (self:wxSlider) !foreign method "ClearTicks",
	GetLineSize    :: (self:wxSlider) -> int !foreign method "GetLineSize",
	GetMax         :: (self:wxSlider) -> int !foreign method "GetMax",
	GetMin         :: (self:wxSlider) -> int !foreign method "GetMin",
	GetPageSize    :: (self:wxSlider) -> int !foreign method "GetPageSize",
	GetSelEnd      :: (self:wxSlider) -> int !foreign method "GetSelEnd",
	GetSelStart    :: (self:wxSlider) -> int !foreign method "GetSelStart",
	GetThumbLength :: (self:wxSlider) -> int !foreign method "GetThumbLength",
	GetTickFreq    :: (self:wxSlider) -> int !foreign method "GetTickFreq",
	GetValue       :: (self:wxSlider) -> int !foreign method "GetValue",
	SetLineSize    :: (self:wxSlider, lineSize:int) !foreign method "SetLineSize",
	SetPageSize    :: (self:wxSlider, pageSize:int) !foreign method "SetPageSize",
	SetRange       :: (self:wxSlider, minValue:int, maxValue:int) !foreign method "SetRange",
	SetSelection   :: (self:wxSlider, startPos:int, endPos:int) !foreign method "SetSelection",
	SetThumbLength :: (self:wxSlider, len:int) !foreign method "SetThumbLength",
	SetTick        :: (self:wxSlider, tickPos:int) !foreign method "SetTick",
	SetTickFreq    :: (self:wxSlider, n:int, pos:int) !foreign method "SetTickFreq",
	SetValue       :: (self:wxSlider, value:int) !foreign method "SetValue",
}

export wxSpinButton :: !foreign struct {
	using wxControl,

	new :: () -> wxSpinButton !foreign lua "wx.wxSpinButton",
	new :: (parent:wxWindow, id:wxWindowID=wxID_ANY, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxSP_VERTICAL|wxSP_ARROW_KEYS)]], name:wxString|string="wxSpinButton") -> wxSpinButton !foreign lua "wx.wxSpinButton",

	Create   :: (self:wxSpinButton, parent:wxWindow, id:wxWindowID=wxID_ANY, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxSP_VERTICAL|wxSP_ARROW_KEYS)]], name:wxString|string="wxSpinButton") -> bool !foreign method "Create",
	GetMax   :: (self:wxSpinButton) -> int !foreign method "GetMax",
	GetMin   :: (self:wxSpinButton) -> int !foreign method "GetMin",
	GetValue :: (self:wxSpinButton) -> int !foreign method "GetValue",
	SetRange :: (self:wxSpinButton, min:int, max:int) !foreign method "SetRange",
	SetValue :: (self:wxSpinButton, value:int) !foreign method "SetValue",
}

export wxSpinEvent :: !foreign struct {
	using wxNotifyEvent,

	new :: (commandType:wxEventType=wxEVT_NULL, id:int=0) -> wxSpinEvent !foreign lua "wx.wxSpinEvent",

	GetPosition :: (self:wxSpinEvent) -> int !foreign method "GetPosition",
	SetPosition :: (self:wxSpinEvent, pos:int) !foreign method "SetPosition",
}

export wxSpinCtrl :: !foreign struct {
	using wxControl,

	new :: () -> wxSpinCtrl !foreign lua "wx.wxSpinCtrl",
	new :: (parent:wxWindow, id:wxWindowID=wxID_ANY, value:wxString|string=wxEmptyString, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxSP_ARROW_KEYS, min:int=0, max:int=100, initial:int=0, name:wxString|string="wxSpinCtrl") -> wxSpinCtrl !foreign lua "wx.wxSpinCtrl",

	Create       :: (self:wxSpinCtrl, parent:wxWindow, id:wxWindowID=wxID_ANY, value:wxString|string=wxEmptyString, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxSP_ARROW_KEYS, min:int=0, max:int=100, initial:int=0, name:wxString|string="wxSpinCtrl") -> bool !foreign method "Create",
	GetMax       :: (self:wxSpinCtrl) -> int !foreign method "GetMax",
	GetMin       :: (self:wxSpinCtrl) -> int !foreign method "GetMin",
	GetValue     :: (self:wxSpinCtrl) -> int !foreign method "GetValue",
	SetRange     :: (self:wxSpinCtrl, minVal:int, maxVal:int) !foreign method "SetRange",
	SetSelection :: (self:wxSpinCtrl, from:int--[[long]], to:int--[[long]]) !foreign method "SetSelection",
	SetValue     :: (self:wxSpinCtrl, text:wxString|string) !foreign method "SetValue",
	SetValue     :: (self:wxSpinCtrl, iValue:int) !foreign method "SetValue",
}

export wxTextCtrl :: !foreign struct {
	using wxControl,

	new :: () -> wxTextCtrl !foreign lua "wx.wxTextCtrl",
	new :: (parent:wxWindow, id:wxWindowID, value:wxString|string="", pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxTextCtrl") -> wxTextCtrl !foreign lua "wx.wxTextCtrl",

	Create               :: (self:wxTextCtrl, parent:wxWindow, id:wxWindowID, value:wxString|string="", pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxTextCtrl") -> bool !foreign method "Create",
	AppendText           :: (self:wxTextCtrl, text:wxString|string) !foreign method "AppendText",
	CanCopy              :: (self:wxTextCtrl) -> bool !foreign method "CanCopy",
	CanCut               :: (self:wxTextCtrl) -> bool !foreign method "CanCut",
	CanPaste             :: (self:wxTextCtrl) -> bool !foreign method "CanPaste",
	CanRedo              :: (self:wxTextCtrl) -> bool !foreign method "CanRedo",
	CanUndo              :: (self:wxTextCtrl) -> bool !foreign method "CanUndo",
	ChangeValue          :: (self:wxTextCtrl, value:wxString|string) !foreign method "ChangeValue",
	Clear                :: (self:wxTextCtrl) !foreign method "Clear",
	Copy                 :: (self:wxTextCtrl) !foreign method "Copy",
	Cut                  :: (self:wxTextCtrl) !foreign method "Cut",
	DiscardEdits         :: (self:wxTextCtrl) !foreign method "DiscardEdits",
	EmulateKeyPress      :: (self:wxTextCtrl, event:wxKeyEvent) -> bool !foreign method "EmulateKeyPress",
	GetDefaultStyle      :: (self:wxTextCtrl) -> wxTextAttr !foreign method "GetDefaultStyle",
	GetInsertionPoint    :: (self:wxTextCtrl) -> int--[[long]] !foreign method "GetInsertionPoint",
	GetLastPosition      :: (self:wxTextCtrl) -> int--[[long]] !foreign method "GetLastPosition",
	GetLineLength        :: (self:wxTextCtrl, lineNo:int--[[long]]) -> int !foreign method "GetLineLength",
	GetLineText          :: (self:wxTextCtrl, lineNo:int--[[long]]) -> string !foreign method "GetLineText",
	GetNumberOfLines     :: (self:wxTextCtrl) -> int !foreign method "GetNumberOfLines",
	GetRange             :: (self:wxTextCtrl, from:int--[[long]], to:int--[[long]]) -> string !foreign method "GetRange",
	GetSelection         :: (self:wxTextCtrl) -> (from:int--[[long]], to:int--[[long]]) !foreign method "GetSelection",
	GetStringSelection   :: (self:wxTextCtrl) -> string !foreign method "GetStringSelection",
	GetStyle             :: (self:wxTextCtrl, position:int--[[long]], style:wxTextAttr) -> bool !foreign method "GetStyle",
	GetValue             :: (self:wxTextCtrl) -> string !foreign method "GetValue",
	HitTest              :: (self:wxTextCtrl, pt:wxPoint) -> wxTextCtrlHitTestResult, int, int !foreign method "HitTest",
	HitTestPos           :: (self:wxTextCtrl, pt:wxPoint) -> wxTextCtrlHitTestResult, int !foreign method "HitTestPos",
	IsEditable           :: (self:wxTextCtrl) -> bool !foreign method "IsEditable",
	IsModified           :: (self:wxTextCtrl) -> bool !foreign method "IsModified",
	IsMultiLine          :: (self:wxTextCtrl) -> bool !foreign method "IsMultiLine",
	IsSingleLine         :: (self:wxTextCtrl) -> bool !foreign method "IsSingleLine",
	LoadFile             :: (self:wxTextCtrl, filename:wxString|string) -> bool !foreign method "LoadFile",
	MarkDirty            :: (self:wxTextCtrl) !foreign method "MarkDirty",
	Paste                :: (self:wxTextCtrl) !foreign method "Paste",
	PositionToXY         :: (self:wxTextCtrl, pos:int--[[long]]) -> bool, int, int !foreign method "PositionToXY",
	Redo                 :: (self:wxTextCtrl) !foreign method "Redo",
	Remove               :: (self:wxTextCtrl, from:int--[[long]], to:int--[[long]]) !foreign method "Remove",
	Replace              :: (self:wxTextCtrl, from:int--[[long]], to:int--[[long]], value:wxString|string) !foreign method "Replace",
	SaveFile             :: (self:wxTextCtrl, filename:wxString|string) -> bool !foreign method "SaveFile",
	SetDefaultStyle      :: (self:wxTextCtrl, style:wxTextAttr) -> bool !foreign method "SetDefaultStyle",
	SetEditable          :: (self:wxTextCtrl, editable:bool) !foreign method "SetEditable",
	SetInsertionPoint    :: (self:wxTextCtrl, pos:int--[[long]]) !foreign method "SetInsertionPoint",
	SetInsertionPointEnd :: (self:wxTextCtrl) !foreign method "SetInsertionPointEnd",
	SetMaxLength         :: (self:wxTextCtrl, value:int--[[unsigned long]]) !foreign method "SetMaxLength",
	SetSelection         :: (self:wxTextCtrl, from:int--[[long]], to:int--[[long]]) !foreign method "SetSelection",
	SetStyle             :: (self:wxTextCtrl, start:int--[[long]], end:int--[[long]], style:wxTextAttr) -> bool !foreign method "SetStyle",
	SetValue             :: (self:wxTextCtrl, value:wxString|string) !foreign method "SetValue",
	ShowPosition         :: (self:wxTextCtrl, pos:int--[[long]]) !foreign method "ShowPosition",
	Undo                 :: (self:wxTextCtrl) !foreign method "Undo",
	WriteText            :: (self:wxTextCtrl, text:wxString|string) !foreign method "WriteText",
	XYToPosition         :: (self:wxTextCtrl, x,y:int--[[long]]) -> int--[[long]] !foreign method "XYToPosition",
}

export wxTextAttr :: !foreign struct {
	using wxLuaUserdata,

	new :: (colText:wxColour=wxNullColour, colBack:wxColour=wxNullColour, font:wxFont=wxNullFont, alignment:wxTextAttrAlignment=wxTEXT_ALIGNMENT_DEFAULT) -> wxTextAttr !foreign lua "wx.wxTextAttr",

	GetAlignment        :: (self:wxTextAttr) -> wxTextAttrAlignment !foreign method "GetAlignment",
	GetBackgroundColour :: (self:wxTextAttr) -> wxColour !foreign method "GetBackgroundColour",
	GetFlags            :: (self:wxTextAttr) -> int--[[long]] !foreign method "GetFlags",
	GetFont             :: (self:wxTextAttr) -> wxFont !foreign method "GetFont",
	GetLeftIndent       :: (self:wxTextAttr) -> int--[[long]] !foreign method "GetLeftIndent",
	GetLeftSubIndent    :: (self:wxTextAttr) -> int--[[long]] !foreign method "GetLeftSubIndent",
	GetRightIndent      :: (self:wxTextAttr) -> int--[[long]] !foreign method "GetRightIndent",
	GetTabs             :: (self:wxTextAttr) -> wxArrayInt !foreign method "GetTabs",
	GetTextColour       :: (self:wxTextAttr) -> wxColour !foreign method "GetTextColour",
	HasAlignment        :: (self:wxTextAttr) -> bool !foreign method "HasAlignment",
	HasBackgroundColour :: (self:wxTextAttr) -> bool !foreign method "HasBackgroundColour",
	HasFlag             :: (self:wxTextAttr, flag:int--[[long]]) -> bool !foreign method "HasFlag",
	HasFont             :: (self:wxTextAttr) -> bool !foreign method "HasFont",
	HasLeftIndent       :: (self:wxTextAttr) -> bool !foreign method "HasLeftIndent",
	HasRightIndent      :: (self:wxTextAttr) -> bool !foreign method "HasRightIndent",
	HasTabs             :: (self:wxTextAttr) -> bool !foreign method "HasTabs",
	HasTextColour       :: (self:wxTextAttr) -> bool !foreign method "HasTextColour",
	IsDefault           :: (self:wxTextAttr) -> bool !foreign method "IsDefault",
	SetAlignment        :: (self:wxTextAttr, alignment:wxTextAttrAlignment) !foreign method "SetAlignment",
	SetBackgroundColour :: (self:wxTextAttr, colBack:wxColour) !foreign method "SetBackgroundColour",
	SetFlags            :: (self:wxTextAttr, flags:int--[[long]]) !foreign method "SetFlags",
	SetFont             :: (self:wxTextAttr, font:wxFont, flags:int--[[long]]=wxTEXT_ATTR_FONT) !foreign method "SetFont",
	SetLeftIndent       :: (self:wxTextAttr, indent:int, subIndent:int=0) !foreign method "SetLeftIndent",
	SetRightIndent      :: (self:wxTextAttr, indent:int) !foreign method "SetRightIndent",
	SetTabs             :: (self:wxTextAttr, tabs:wxArrayInt) !foreign method "SetTabs",
	SetTextColour       :: (self:wxTextAttr, colText:wxColour) !foreign method "SetTextColour",
}

export wxTextUrlEvent :: !foreign struct {
	using wxCommandEvent,

	new :: (winid:int, evtMouse:wxMouseEvent, start:int--[[long]], end:int--[[long]]) -> wxTextUrlEvent !foreign lua "wx.wxTextUrlEvent",

	GetMouseEvent :: (self:wxTextUrlEvent) -> wxMouseEvent !foreign method "GetMouseEvent",
	GetURLStart   :: (self:wxTextUrlEvent) -> int--[[long]] !foreign method "GetURLStart",
	GetURLEnd     :: (self:wxTextUrlEvent) -> int--[[long]] !foreign method "GetURLEnd",
}

export wxTreeCtrl :: !foreign struct {
	using wxControl,

	new :: () -> wxTreeCtrl !foreign lua "wx.wxTreeCtrl",
	new :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxTR_DEFAULT_STYLE, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxTreeCtrl") -> wxTreeCtrl !foreign lua "wx.wxTreeCtrl",

	Create                  :: (self:wxTreeCtrl, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxTR_HAS_BUTTONS, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxTreeCtrl") -> bool !foreign method "Create",
	AddRoot                 :: (self:wxTreeCtrl, text:wxString|string, image:int=-1, selImage:int=-1, data:wxTreeItemData=wxTreeItemData.null) -> wxTreeItemId !foreign method "AddRoot",
	AppendItem              :: (self:wxTreeCtrl, parent:wxTreeItemId, text:wxString|string, image:int=-1, selImage:int=-1, data:wxTreeItemData=wxTreeItemData.null) -> wxTreeItemId !foreign method "AppendItem",
	AssignImageList         :: (self:wxTreeCtrl, imageList:wxImageList) !foreign method "AssignImageList",
	AssignStateImageList    :: (self:wxTreeCtrl, imageList:wxImageList) !foreign method "AssignStateImageList",
	Collapse                :: (self:wxTreeCtrl, item:wxTreeItemId) !foreign method "Collapse",
	CollapseAndReset        :: (self:wxTreeCtrl, item:wxTreeItemId) !foreign method "CollapseAndReset",
	Delete                  :: (self:wxTreeCtrl, item:wxTreeItemId) !foreign method "Delete",
	DeleteAllItems          :: (self:wxTreeCtrl) !foreign method "DeleteAllItems",
	DeleteChildren          :: (self:wxTreeCtrl, item:wxTreeItemId) !foreign method "DeleteChildren",
	EditLabel               :: (self:wxTreeCtrl, item:wxTreeItemId) !foreign method "EditLabel",
	EndEditLabel            :: (self:wxTreeCtrl, item:wxTreeItemId, discardChanges:bool=false) !foreign method "EndEditLabel",
	EnsureVisible           :: (self:wxTreeCtrl, item:wxTreeItemId) !foreign method "EnsureVisible",
	Expand                  :: (self:wxTreeCtrl, item:wxTreeItemId) !foreign method "Expand",
	GetBoundingRect         :: (self:wxTreeCtrl, item:wxTreeItemId, rect:wxRect, textOnly:bool=false) -> bool !foreign method "GetBoundingRect",
	GetChildrenCount        :: (self:wxTreeCtrl, item:wxTreeItemId, recursively:bool=true) -> int--[[size_t]] !foreign method "GetChildrenCount",
	GetCount                :: (self:wxTreeCtrl) -> int !foreign method "GetCount",
	GetFirstChild           :: (self:wxTreeCtrl, item:wxTreeItemId) -> wxTreeItemId, wxTreeItemIdValue !foreign method "GetFirstChild",
	GetFirstVisibleItem     :: (self:wxTreeCtrl) -> wxTreeItemId !foreign method "GetFirstVisibleItem",
	GetImageList            :: (self:wxTreeCtrl) -> wxImageList !foreign method "GetImageList",
	GetIndent               :: (self:wxTreeCtrl) -> int !foreign method "GetIndent",
	GetItemBackgroundColour :: (self:wxTreeCtrl, item:wxTreeItemId) -> wxColour !foreign method "GetItemBackgroundColour",
	GetItemData             :: (self:wxTreeCtrl, item:wxTreeItemId) -> wxTreeItemData !foreign method "GetItemData",
	GetItemFont             :: (self:wxTreeCtrl, item:wxTreeItemId) -> wxFont !foreign method "GetItemFont",
	GetItemImage            :: (self:wxTreeCtrl, item:wxTreeItemId, which:wxTreeItemIcon=wxTreeItemIcon_Normal) -> int !foreign method "GetItemImage",
	GetItemText             :: (self:wxTreeCtrl, item:wxTreeItemId) -> string !foreign method "GetItemText",
	GetItemTextColour       :: (self:wxTreeCtrl, item:wxTreeItemId) -> wxColour !foreign method "GetItemTextColour",
	GetLastChild            :: (self:wxTreeCtrl, item:wxTreeItemId) -> wxTreeItemId !foreign method "GetLastChild",
	GetNextChild            :: (self:wxTreeCtrl, item:wxTreeItemId, cookie:int--[[long]]) -> wxTreeItemId, wxTreeItemIdValue !foreign method "GetNextChild",
	GetNextSibling          :: (self:wxTreeCtrl, item:wxTreeItemId) -> wxTreeItemId !foreign method "GetNextSibling",
	GetNextVisible          :: (self:wxTreeCtrl, item:wxTreeItemId) -> wxTreeItemId !foreign method "GetNextVisible",
	GetItemParent           :: (self:wxTreeCtrl, item:wxTreeItemId) -> wxTreeItemId !foreign method "GetItemParent",
	GetPrevSibling          :: (self:wxTreeCtrl, item:wxTreeItemId) -> wxTreeItemId !foreign method "GetPrevSibling",
	GetPrevVisible          :: (self:wxTreeCtrl, item:wxTreeItemId) -> wxTreeItemId !foreign method "GetPrevVisible",
	GetRootItem             :: (self:wxTreeCtrl) -> wxTreeItemId !foreign method "GetRootItem",
	GetSelection            :: (self:wxTreeCtrl) -> wxTreeItemId !foreign method "GetSelection",
	GetSelections           :: (self:wxTreeCtrl) -> int--[[size_t]], []wxTreeItemId !foreign method "GetSelections",
	GetStateImageList       :: (self:wxTreeCtrl) -> wxImageList !foreign method "GetStateImageList",
	HitTest                 :: (self:wxTreeCtrl, point:wxPoint) -> wxTreeItemId, int !foreign method "HitTest",
	InsertItem              :: (self:wxTreeCtrl, parent:wxTreeItemId, previous:wxTreeItemId, text:wxString|string, image:int=-1, selImage:int=-1, data:wxTreeItemData=wxTreeItemData.null) -> wxTreeItemId !foreign method "InsertItem",
	InsertItem              :: (self:wxTreeCtrl, parent:wxTreeItemId, before:int--[[size_t]], text:wxString|string, image:int=-1, selImage:int=-1, data:wxTreeItemData=wxTreeItemData.null) -> wxTreeItemId !foreign method "InsertItem",
	IsBold                  :: (self:wxTreeCtrl, item:wxTreeItemId) -> bool !foreign method "IsBold",
	IsExpanded              :: (self:wxTreeCtrl, item:wxTreeItemId) -> bool !foreign method "IsExpanded",
	IsSelected              :: (self:wxTreeCtrl, item:wxTreeItemId) -> bool !foreign method "IsSelected",
	IsVisible               :: (self:wxTreeCtrl, item:wxTreeItemId) -> bool !foreign method "IsVisible",
	ItemHasChildren         :: (self:wxTreeCtrl, item:wxTreeItemId) -> bool !foreign method "ItemHasChildren",
	PrependItem             :: (self:wxTreeCtrl, parent:wxTreeItemId, text:wxString|string, image:int=-1, selImage:int=-1, data:wxTreeItemData=wxTreeItemData.null) -> wxTreeItemId !foreign method "PrependItem",
	ScrollTo                :: (self:wxTreeCtrl, item:wxTreeItemId) !foreign method "ScrollTo",
	SelectItem              :: (self:wxTreeCtrl, item:wxTreeItemId, select:bool=true) !foreign method "SelectItem",
	SetIndent               :: (self:wxTreeCtrl, indent:int) !foreign method "SetIndent",
	SetImageList            :: (self:wxTreeCtrl, imageList:wxImageList) !foreign method "SetImageList",
	SetItemBackgroundColour :: (self:wxTreeCtrl, item:wxTreeItemId, col:wxColour) !foreign method "SetItemBackgroundColour",
	SetItemBold             :: (self:wxTreeCtrl, item:wxTreeItemId, bold:bool=true) !foreign method "SetItemBold",
	SetItemData             :: (self:wxTreeCtrl, item:wxTreeItemId, data:wxTreeItemData) !foreign method "SetItemData",
	SetItemDropHighlight    :: (self:wxTreeCtrl, item:wxTreeItemId, highlight:bool=true) !foreign method "SetItemDropHighlight",
	SetItemFont             :: (self:wxTreeCtrl, item:wxTreeItemId, font:wxFont) !foreign method "SetItemFont",
	SetItemHasChildren      :: (self:wxTreeCtrl, item:wxTreeItemId, hasChildren:bool=true) !foreign method "SetItemHasChildren",
	SetItemImage            :: (self:wxTreeCtrl, item:wxTreeItemId, image:int, which:wxTreeItemIcon=wxTreeItemIcon_Normal) !foreign method "SetItemImage",
	SetItemText             :: (self:wxTreeCtrl, item:wxTreeItemId, text:wxString|string) !foreign method "SetItemText",
	SetItemTextColour       :: (self:wxTreeCtrl, item:wxTreeItemId, col:wxColour) !foreign method "SetItemTextColour",
	SetStateImageList       :: (self:wxTreeCtrl, imageList:wxImageList) !foreign method "SetStateImageList",
	SortChildren            :: (self:wxTreeCtrl, item:wxTreeItemId) !foreign method "SortChildren",
	Toggle                  :: (self:wxTreeCtrl, item:wxTreeItemId) !foreign method "Toggle",
	ToggleItemSelection     :: (self:wxTreeCtrl, item:wxTreeItemId) !foreign method "ToggleItemSelection",
	Unselect                :: (self:wxTreeCtrl) !foreign method "Unselect",
	UnselectAll             :: (self:wxTreeCtrl) !foreign method "UnselectAll",
	UnselectItem            :: (self:wxTreeCtrl, item:wxTreeItemId) !foreign method "UnselectItem",
}

export wxTreeItemId :: !foreign struct {
	using wxLuaUserdata,

	new :: () -> wxTreeItemId !foreign lua "wx.wxTreeItemId",
	new :: (id:wxTreeItemId) -> wxTreeItemId !foreign lua "wx.wxTreeItemId",

	IsOk     :: (self:wxTreeItemId) -> bool !foreign method "IsOk",
	GetValue :: (self:wxTreeItemId) -> wxTreeItemIdValue !foreign method "GetValue",
}

export wxTreeItemData :: !foreign struct {
	using wxClientData,

	null: wxTreeItemData : !foreign lua "wx.NULL",

	new :: () -> wxTreeItemData !foreign lua "wx.wxTreeItemData",

	GetId :: (self:wxTreeItemData) -> wxTreeItemId !foreign method "GetId",
	SetId :: (self:wxTreeItemData, id:wxTreeItemId) !foreign method "SetId",
}

export wxLuaTreeItemData :: !foreign struct {
	using wxTreeItemData,

	new :: (value:float--[[double]]=0) -> wxLuaTreeItemData !foreign lua "wx.wxLuaTreeItemData",

	GetValue :: (self:wxLuaTreeItemData) -> float--[[double]] !foreign method "GetValue",
	SetValue :: (self:wxLuaTreeItemData, value:float--[[double]]) !foreign method "SetValue",
}

export wxTreeEvent :: !foreign struct {
	using wxNotifyEvent,

	new :: (commandType:wxEventType=wxEVT_NULL, id:int=0) -> wxTreeEvent !foreign lua "wx.wxTreeEvent",

	GetKeyCode      :: (self:wxTreeEvent) -> int !foreign method "GetKeyCode",
	GetItem         :: (self:wxTreeEvent) -> wxTreeItemId !foreign method "GetItem",
	GetKeyEvent     :: (self:wxTreeEvent) -> wxKeyEvent !foreign method "GetKeyEvent",
	GetLabel        :: (self:wxTreeEvent) -> string !foreign method "GetLabel",
	GetOldItem      :: (self:wxTreeEvent) -> wxTreeItemId !foreign method "GetOldItem",
	GetPoint        :: (self:wxTreeEvent) -> wxPoint !foreign method "GetPoint",
	IsEditCancelled :: (self:wxTreeEvent) -> bool !foreign method "IsEditCancelled",
	SetToolTip      :: (self:wxTreeEvent, tooltip:wxString|string) !foreign method "SetToolTip",
}

export wxGenericDirCtrl :: !foreign struct {
	using wxControl,

	new :: () -> wxGenericDirCtrl !foreign lua "wx.wxGenericDirCtrl",
	new :: (parent:wxWindow, id:wxWindowID=wxID_ANY, dir:wxString|string=wxDirDialogDefaultFolderStr, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER)]], filter:wxString|string="", defaultFilter:int=0, name:wxString|string="wxGenericDirCtrl") -> wxGenericDirCtrl !foreign lua "wx.wxGenericDirCtrl",

	Create         :: (self:wxGenericDirCtrl, parent:wxWindow, id:wxWindowID=wxID_ANY, dir:wxString|string=wxDirDialogDefaultFolderStr, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER)]], filter:wxString|string="", defaultFilter:int=0, name:wxString|string="wxGenericDirCtrl") -> bool !foreign method "Create",
	CollapseTree   :: (self:wxGenericDirCtrl) !foreign method "CollapseTree",
	ExpandPath     :: (self:wxGenericDirCtrl, path:wxString|string) -> bool !foreign method "ExpandPath",
	GetDefaultPath :: (self:wxGenericDirCtrl) -> string !foreign method "GetDefaultPath",
	GetPath        :: (self:wxGenericDirCtrl) -> string !foreign method "GetPath",
	GetFilePath    :: (self:wxGenericDirCtrl) -> string !foreign method "GetFilePath",
	GetFilter      :: (self:wxGenericDirCtrl) -> string !foreign method "GetFilter",
	GetFilterIndex :: (self:wxGenericDirCtrl) -> int !foreign method "GetFilterIndex",
	GetRootId      :: (self:wxGenericDirCtrl) -> wxTreeItemId !foreign method "GetRootId",
	GetTreeCtrl    :: (self:wxGenericDirCtrl) -> wxTreeCtrl !foreign method "GetTreeCtrl",
	ReCreateTree   :: (self:wxGenericDirCtrl) !foreign method "ReCreateTree",
	SetDefaultPath :: (self:wxGenericDirCtrl, path:wxString|string) !foreign method "SetDefaultPath",
	SetFilter      :: (self:wxGenericDirCtrl, filter:wxString|string) !foreign method "SetFilter",
	SetFilterIndex :: (self:wxGenericDirCtrl, n:int) !foreign method "SetFilterIndex",
	SetPath        :: (self:wxGenericDirCtrl, path:wxString|string) !foreign method "SetPath",
	ShowHidden     :: (self:wxGenericDirCtrl, show:bool) !foreign method "ShowHidden",
	GetShowHidden  :: (self:wxGenericDirCtrl) -> bool !foreign method "GetShowHidden",
}
