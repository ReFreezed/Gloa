--[[============================================================
--=
--=  wxLua/wxWidget bindings for Gl√≥a
--=  Interface source: wxcore_gdi.i
--=
--=  Tested with:
--=  - wxLua 2.8.7.0 / wxWidgets 2.8.8
--=
--=  Note: Most bindings have not been tested yet!
--=
--============================================================]]

!import "wx/common"
!import "wx/wxcore_defsutils"
!import "wx/wxbase_datetime"
!import "wx/wxbase_data"
!import "wx/wxcore_windows"
!import "wx/wxcore_image"

export wxBUFFER_VIRTUAL_AREA       :: 0x01 -- Are these available in foreign wxLua?
export wxBUFFER_CLIENT_AREA        :: 0x02
export wxBUFFER_USES_SHARED_BUFFER :: 0x04

export wxHAS_REGION_COMBINE :: 1
export wxDefaultCoord:                int : !foreign lua "wx.wxDefaultCoord"
export wxC2S_NAME:                    int : !foreign lua "wx.wxC2S_NAME"
export wxC2S_CSS_SYNTAX:              int : !foreign lua "wx.wxC2S_CSS_SYNTAX"
export wxC2S_HTML_SYNTAX:             int : !foreign lua "wx.wxC2S_HTML_SYNTAX"
export wxALPHA_TRANSPARENT:           int : !foreign lua "wx.wxALPHA_TRANSPARENT"
export wxALPHA_OPAQUE:                int : !foreign lua "wx.wxALPHA_OPAQUE"
export wxCAP_BUTT:                    int : !foreign lua "wx.wxCAP_BUTT"
export wxCAP_PROJECTING:              int : !foreign lua "wx.wxCAP_PROJECTING"
export wxCAP_ROUND:                   int : !foreign lua "wx.wxCAP_ROUND"
export wxDOT:                         int : !foreign lua "wx.wxDOT"
export wxDOT_DASH:                    int : !foreign lua "wx.wxDOT_DASH"
export wxSOLID:                       int : !foreign lua "wx.wxSOLID"
export wxLONG_DASH:                   int : !foreign lua "wx.wxLONG_DASH"
export wxSHORT_DASH:                  int : !foreign lua "wx.wxSHORT_DASH"
export wxUSER_DASH:                   int : !foreign lua "wx.wxUSER_DASH"
export wxJOIN_BEVEL:                  int : !foreign lua "wx.wxJOIN_BEVEL"
export wxJOIN_MITER:                  int : !foreign lua "wx.wxJOIN_MITER"
export wxJOIN_ROUND:                  int : !foreign lua "wx.wxJOIN_ROUND"
export wxIMAGELIST_DRAW_NORMAL:       int : !foreign lua "wx.wxIMAGELIST_DRAW_NORMAL"
export wxIMAGELIST_DRAW_TRANSPARENT:  int : !foreign lua "wx.wxIMAGELIST_DRAW_TRANSPARENT"
export wxIMAGELIST_DRAW_SELECTED:     int : !foreign lua "wx.wxIMAGELIST_DRAW_SELECTED"
export wxIMAGELIST_DRAW_FOCUSED:      int : !foreign lua "wx.wxIMAGELIST_DRAW_FOCUSED"
export wxIMAGE_LIST_NORMAL:           int : !foreign lua "wx.wxIMAGE_LIST_NORMAL"
export wxIMAGE_LIST_SMALL:            int : !foreign lua "wx.wxIMAGE_LIST_SMALL"
export wxIMAGE_LIST_STATE:            int : !foreign lua "wx.wxIMAGE_LIST_STATE"
export wxROP_BLACK:                   int : !foreign lua "wx.wxROP_BLACK"
export wxROP_COPYPEN:                 int : !foreign lua "wx.wxROP_COPYPEN"
export wxROP_MASKNOTPEN:              int : !foreign lua "wx.wxROP_MASKNOTPEN"
export wxROP_MASKPEN:                 int : !foreign lua "wx.wxROP_MASKPEN"
export wxROP_MASKPENNOT:              int : !foreign lua "wx.wxROP_MASKPENNOT"
export wxROP_MERGENOTPEN:             int : !foreign lua "wx.wxROP_MERGENOTPEN"
export wxROP_MERGEPEN:                int : !foreign lua "wx.wxROP_MERGEPEN"
export wxROP_MERGEPENNOT:             int : !foreign lua "wx.wxROP_MERGEPENNOT"
export wxROP_NOP:                     int : !foreign lua "wx.wxROP_NOP"
export wxROP_NOT:                     int : !foreign lua "wx.wxROP_NOT"
export wxROP_NOTCOPYPEN:              int : !foreign lua "wx.wxROP_NOTCOPYPEN"
export wxROP_NOTMASKPEN:              int : !foreign lua "wx.wxROP_NOTMASKPEN"
export wxROP_NOTMERGEPEN:             int : !foreign lua "wx.wxROP_NOTMERGEPEN"
export wxROP_NOTXORPEN:               int : !foreign lua "wx.wxROP_NOTXORPEN"
export wxROP_WHITE:                   int : !foreign lua "wx.wxROP_WHITE"
export wxROP_XORPEN:                  int : !foreign lua "wx.wxROP_XORPEN"
export wxBLIT_00220326:               int : !foreign lua "wx.wxBLIT_00220326"
export wxBLIT_007700E6:               int : !foreign lua "wx.wxBLIT_007700E6"
export wxBLIT_00990066:               int : !foreign lua "wx.wxBLIT_00990066"
export wxBLIT_00AA0029:               int : !foreign lua "wx.wxBLIT_00AA0029"
export wxBLIT_00DD0228:               int : !foreign lua "wx.wxBLIT_00DD0228"
export wxBLIT_BLACKNESS:              int : !foreign lua "wx.wxBLIT_BLACKNESS"
export wxBLIT_DSTINVERT:              int : !foreign lua "wx.wxBLIT_DSTINVERT"
export wxBLIT_MERGEPAINT:             int : !foreign lua "wx.wxBLIT_MERGEPAINT"
export wxBLIT_NOTSCRCOPY:             int : !foreign lua "wx.wxBLIT_NOTSCRCOPY"
export wxBLIT_NOTSRCERASE:            int : !foreign lua "wx.wxBLIT_NOTSRCERASE"
export wxBLIT_SRCAND:                 int : !foreign lua "wx.wxBLIT_SRCAND"
export wxBLIT_SRCCOPY:                int : !foreign lua "wx.wxBLIT_SRCCOPY"
export wxBLIT_SRCERASE:               int : !foreign lua "wx.wxBLIT_SRCERASE"
export wxBLIT_SRCINVERT:              int : !foreign lua "wx.wxBLIT_SRCINVERT"
export wxBLIT_SRCPAINT:               int : !foreign lua "wx.wxBLIT_SRCPAINT"
export wxBLIT_WHITENESS:              int : !foreign lua "wx.wxBLIT_WHITENESS"
export wxCLEAR:                       int : !foreign lua "wx.wxCLEAR"
export wxXOR:                         int : !foreign lua "wx.wxXOR"
export wxINVERT:                      int : !foreign lua "wx.wxINVERT"
export wxOR_REVERSE:                  int : !foreign lua "wx.wxOR_REVERSE"
export wxAND_REVERSE:                 int : !foreign lua "wx.wxAND_REVERSE"
export wxCOPY:                        int : !foreign lua "wx.wxCOPY"
export wxAND:                         int : !foreign lua "wx.wxAND"
export wxAND_INVERT:                  int : !foreign lua "wx.wxAND_INVERT"
export wxNO_OP:                       int : !foreign lua "wx.wxNO_OP"
export wxNOR:                         int : !foreign lua "wx.wxNOR"
export wxEQUIV:                       int : !foreign lua "wx.wxEQUIV"
export wxSRC_INVERT:                  int : !foreign lua "wx.wxSRC_INVERT"
export wxOR_INVERT:                   int : !foreign lua "wx.wxOR_INVERT"
export wxNAND:                        int : !foreign lua "wx.wxNAND"
export wxOR:                          int : !foreign lua "wx.wxOR"
export wxSET:                         int : !foreign lua "wx.wxSET"
export wxFLOOD_BORDER:                int : !foreign lua "wx.wxFLOOD_BORDER"
export wxFLOOD_SURFACE:               int : !foreign lua "wx.wxFLOOD_SURFACE"
export wxODDEVEN_RULE:                int : !foreign lua "wx.wxODDEVEN_RULE"
export wxWINDING_RULE:                int : !foreign lua "wx.wxWINDING_RULE"
export wxALWAYS_NATIVE_DOUBLE_BUFFER: int : !foreign lua "wx.wxALWAYS_NATIVE_DOUBLE_BUFFER"
export wxNullBitmap:                  wxBitmap : !foreign lua "wx.wxNullBitmap"
export wxNullBrush:                   wxBrush : !foreign lua "wx.wxNullBrush"
export wxBLUE_BRUSH:                  wxBrush : !foreign lua "wx.wxBLUE_BRUSH"
export wxGREEN_BRUSH:                 wxBrush : !foreign lua "wx.wxGREEN_BRUSH"
export wxWHITE_BRUSH:                 wxBrush : !foreign lua "wx.wxWHITE_BRUSH"
export wxBLACK_BRUSH:                 wxBrush : !foreign lua "wx.wxBLACK_BRUSH"
export wxGREY_BRUSH:                  wxBrush : !foreign lua "wx.wxGREY_BRUSH"
export wxMEDIUM_GREY_BRUSH:           wxBrush : !foreign lua "wx.wxMEDIUM_GREY_BRUSH"
export wxLIGHT_GREY_BRUSH:            wxBrush : !foreign lua "wx.wxLIGHT_GREY_BRUSH"
export wxTRANSPARENT_BRUSH:           wxBrush : !foreign lua "wx.wxTRANSPARENT_BRUSH"
export wxCYAN_BRUSH:                  wxBrush : !foreign lua "wx.wxCYAN_BRUSH"
export wxRED_BRUSH:                   wxBrush : !foreign lua "wx.wxRED_BRUSH"
export wxTheBrushList:                wxBrushList : !foreign lua "wx.wxTheBrushList"
export wxNullColour:                  wxColour : !foreign lua "wx.wxNullColour"
export wxBLACK:                       wxColour : !foreign lua "wx.wxBLACK"
export wxWHITE:                       wxColour : !foreign lua "wx.wxWHITE"
export wxRED:                         wxColour : !foreign lua "wx.wxRED"
export wxBLUE:                        wxColour : !foreign lua "wx.wxBLUE"
export wxGREEN:                       wxColour : !foreign lua "wx.wxGREEN"
export wxCYAN:                        wxColour : !foreign lua "wx.wxCYAN"
export wxLIGHT_GREY:                  wxColour : !foreign lua "wx.wxLIGHT_GREY"
export wxNullCursor:                  wxCursor : !foreign lua "wx.wxNullCursor"
export wxSTANDARD_CURSOR:             wxCursor : !foreign lua "wx.wxSTANDARD_CURSOR"
export wxHOURGLASS_CURSOR:            wxCursor : !foreign lua "wx.wxHOURGLASS_CURSOR"
export wxCROSS_CURSOR:                wxCursor : !foreign lua "wx.wxCROSS_CURSOR"
export wxNullFont:                    wxFont : !foreign lua "wx.wxNullFont"
export wxNORMAL_FONT:                 wxFont : !foreign lua "wx.wxNORMAL_FONT"
export wxSMALL_FONT:                  wxFont : !foreign lua "wx.wxSMALL_FONT"
export wxITALIC_FONT:                 wxFont : !foreign lua "wx.wxITALIC_FONT"
export wxSWISS_FONT:                  wxFont : !foreign lua "wx.wxSWISS_FONT"
export wxTheFontList:                 wxFontList : !foreign lua "wx.wxTheFontList"
export wxNullIcon:                    wxIcon : !foreign lua "wx.wxNullIcon"
export wxNullPalette:                 wxPalette : !foreign lua "wx.wxNullPalette"
export wxNullPen:                     wxPen : !foreign lua "wx.wxNullPen"
export wxRED_PEN:                     wxPen : !foreign lua "wx.wxRED_PEN"
export wxCYAN_PEN:                    wxPen : !foreign lua "wx.wxCYAN_PEN"
export wxGREEN_PEN:                   wxPen : !foreign lua "wx.wxGREEN_PEN"
export wxBLACK_PEN:                   wxPen : !foreign lua "wx.wxBLACK_PEN"
export wxWHITE_PEN:                   wxPen : !foreign lua "wx.wxWHITE_PEN"
export wxTRANSPARENT_PEN:             wxPen : !foreign lua "wx.wxTRANSPARENT_PEN"
export wxBLACK_DASHED_PEN:            wxPen : !foreign lua "wx.wxBLACK_DASHED_PEN"
export wxGREY_PEN:                    wxPen : !foreign lua "wx.wxGREY_PEN"
export wxMEDIUM_GREY_PEN:             wxPen : !foreign lua "wx.wxMEDIUM_GREY_PEN"
export wxLIGHT_GREY_PEN:              wxPen : !foreign lua "wx.wxLIGHT_GREY_PEN"
export wxThePenList:                  wxPenList : !foreign lua "wx.wxThePenList"
export wxDefaultPosition:             wxPoint : !foreign lua "wx.wxDefaultPosition"
export wxDefaultSize:                 wxSize : !foreign lua "wx.wxDefaultSize"
export wxDefaultVideoMode:            wxVideoMode : !foreign lua "wx.wxDefaultVideoMode"

export wxRegionContain :: wxEnum
export wxOutRegion:  wxRegionContain : !foreign lua "wx.wxOutRegion"
export wxPartRegion: wxRegionContain : !foreign lua "wx.wxPartRegion"
export wxInRegion:   wxRegionContain : !foreign lua "wx.wxInRegion"

export wxRegionOp :: wxEnum
export wxRGN_AND:  wxRegionOp : !foreign lua "wx.wxRGN_AND"
export wxRGN_COPY: wxRegionOp : !foreign lua "wx.wxRGN_COPY"
export wxRGN_DIFF: wxRegionOp : !foreign lua "wx.wxRGN_DIFF"
export wxRGN_OR:   wxRegionOp : !foreign lua "wx.wxRGN_OR"
export wxRGN_XOR:  wxRegionOp : !foreign lua "wx.wxRGN_XOR"

export wxDEFAULT:    wxEnum : !foreign lua "wx.wxDEFAULT"
export wxDECORATIVE: wxEnum : !foreign lua "wx.wxDECORATIVE"
export wxROMAN:      wxEnum : !foreign lua "wx.wxROMAN"
export wxSCRIPT:     wxEnum : !foreign lua "wx.wxSCRIPT"
export wxSWISS:      wxEnum : !foreign lua "wx.wxSWISS"
export wxMODERN:     wxEnum : !foreign lua "wx.wxMODERN"
export wxTELETYPE:   wxEnum : !foreign lua "wx.wxTELETYPE"
export wxVARIABLE:   wxEnum : !foreign lua "wx.wxVARIABLE"
export wxFIXED:      wxEnum : !foreign lua "wx.wxFIXED"
export wxNORMAL:     wxEnum : !foreign lua "wx.wxNORMAL"
export wxLIGHT:      wxEnum : !foreign lua "wx.wxLIGHT"
export wxBOLD:       wxEnum : !foreign lua "wx.wxBOLD"
export wxITALIC:     wxEnum : !foreign lua "wx.wxITALIC"
export wxSLANT:      wxEnum : !foreign lua "wx.wxSLANT"

export wxFontFamily :: wxEnum
export wxFONTFAMILY_DEFAULT:    wxFontFamily : !foreign lua "wx.wxFONTFAMILY_DEFAULT"
export wxFONTFAMILY_DECORATIVE: wxFontFamily : !foreign lua "wx.wxFONTFAMILY_DECORATIVE"
export wxFONTFAMILY_ROMAN:      wxFontFamily : !foreign lua "wx.wxFONTFAMILY_ROMAN"
export wxFONTFAMILY_SCRIPT:     wxFontFamily : !foreign lua "wx.wxFONTFAMILY_SCRIPT"
export wxFONTFAMILY_SWISS:      wxFontFamily : !foreign lua "wx.wxFONTFAMILY_SWISS"
export wxFONTFAMILY_MODERN:     wxFontFamily : !foreign lua "wx.wxFONTFAMILY_MODERN"
export wxFONTFAMILY_TELETYPE:   wxFontFamily : !foreign lua "wx.wxFONTFAMILY_TELETYPE"
export wxFONTFAMILY_MAX:        wxFontFamily : !foreign lua "wx.wxFONTFAMILY_MAX"
export wxFONTFAMILY_UNKNOWN:    wxFontFamily : !foreign lua "wx.wxFONTFAMILY_UNKNOWN"

export wxFontStyle :: wxEnum
export wxFONTSTYLE_NORMAL: wxFontStyle : !foreign lua "wx.wxFONTSTYLE_NORMAL"
export wxFONTSTYLE_ITALIC: wxFontStyle : !foreign lua "wx.wxFONTSTYLE_ITALIC"
export wxFONTSTYLE_SLANT:  wxFontStyle : !foreign lua "wx.wxFONTSTYLE_SLANT"
export wxFONTSTYLE_MAX:    wxFontStyle : !foreign lua "wx.wxFONTSTYLE_MAX"

export wxFontWeight :: wxEnum
export wxFONTWEIGHT_NORMAL: wxFontWeight : !foreign lua "wx.wxFONTWEIGHT_NORMAL"
export wxFONTWEIGHT_LIGHT:  wxFontWeight : !foreign lua "wx.wxFONTWEIGHT_LIGHT"
export wxFONTWEIGHT_BOLD:   wxFontWeight : !foreign lua "wx.wxFONTWEIGHT_BOLD"
export wxFONTWEIGHT_MAX:    wxFontWeight : !foreign lua "wx.wxFONTWEIGHT_MAX"

export wxFONTFLAG_DEFAULT:         wxEnum : !foreign lua "wx.wxFONTFLAG_DEFAULT"
export wxFONTFLAG_ITALIC:          wxEnum : !foreign lua "wx.wxFONTFLAG_ITALIC"
export wxFONTFLAG_SLANT:           wxEnum : !foreign lua "wx.wxFONTFLAG_SLANT"
export wxFONTFLAG_LIGHT:           wxEnum : !foreign lua "wx.wxFONTFLAG_LIGHT"
export wxFONTFLAG_BOLD:            wxEnum : !foreign lua "wx.wxFONTFLAG_BOLD"
export wxFONTFLAG_ANTIALIASED:     wxEnum : !foreign lua "wx.wxFONTFLAG_ANTIALIASED"
export wxFONTFLAG_NOT_ANTIALIASED: wxEnum : !foreign lua "wx.wxFONTFLAG_NOT_ANTIALIASED"
export wxFONTFLAG_UNDERLINED:      wxEnum : !foreign lua "wx.wxFONTFLAG_UNDERLINED"
export wxFONTFLAG_STRIKETHROUGH:   wxEnum : !foreign lua "wx.wxFONTFLAG_STRIKETHROUGH"
export wxFONTFLAG_MASK:            wxEnum : !foreign lua "wx.wxFONTFLAG_MASK"

export wxTRANSPARENT:         wxEnum : !foreign lua "wx.wxTRANSPARENT"
export wxSTIPPLE_MASK_OPAQUE: wxEnum : !foreign lua "wx.wxSTIPPLE_MASK_OPAQUE"
export wxSTIPPLE_MASK:        wxEnum : !foreign lua "wx.wxSTIPPLE_MASK"
export wxSTIPPLE:             wxEnum : !foreign lua "wx.wxSTIPPLE"
export wxBDIAGONAL_HATCH:     wxEnum : !foreign lua "wx.wxBDIAGONAL_HATCH"
export wxCROSSDIAG_HATCH:     wxEnum : !foreign lua "wx.wxCROSSDIAG_HATCH"
export wxFDIAGONAL_HATCH:     wxEnum : !foreign lua "wx.wxFDIAGONAL_HATCH"
export wxCROSS_HATCH:         wxEnum : !foreign lua "wx.wxCROSS_HATCH"
export wxHORIZONTAL_HATCH:    wxEnum : !foreign lua "wx.wxHORIZONTAL_HATCH"
export wxVERTICAL_HATCH:      wxEnum : !foreign lua "wx.wxVERTICAL_HATCH"

export wxStockCursor :: wxEnum
export wxCURSOR_NONE:           wxStockCursor : !foreign lua "wx.wxCURSOR_NONE"
export wxCURSOR_ARROW:          wxStockCursor : !foreign lua "wx.wxCURSOR_ARROW"
export wxCURSOR_RIGHT_ARROW:    wxStockCursor : !foreign lua "wx.wxCURSOR_RIGHT_ARROW"
export wxCURSOR_BULLSEYE:       wxStockCursor : !foreign lua "wx.wxCURSOR_BULLSEYE"
export wxCURSOR_CHAR:           wxStockCursor : !foreign lua "wx.wxCURSOR_CHAR"
export wxCURSOR_CROSS:          wxStockCursor : !foreign lua "wx.wxCURSOR_CROSS"
export wxCURSOR_HAND:           wxStockCursor : !foreign lua "wx.wxCURSOR_HAND"
export wxCURSOR_IBEAM:          wxStockCursor : !foreign lua "wx.wxCURSOR_IBEAM"
export wxCURSOR_LEFT_BUTTON:    wxStockCursor : !foreign lua "wx.wxCURSOR_LEFT_BUTTON"
export wxCURSOR_MAGNIFIER:      wxStockCursor : !foreign lua "wx.wxCURSOR_MAGNIFIER"
export wxCURSOR_MIDDLE_BUTTON:  wxStockCursor : !foreign lua "wx.wxCURSOR_MIDDLE_BUTTON"
export wxCURSOR_NO_ENTRY:       wxStockCursor : !foreign lua "wx.wxCURSOR_NO_ENTRY"
export wxCURSOR_PAINT_BRUSH:    wxStockCursor : !foreign lua "wx.wxCURSOR_PAINT_BRUSH"
export wxCURSOR_PENCIL:         wxStockCursor : !foreign lua "wx.wxCURSOR_PENCIL"
export wxCURSOR_POINT_LEFT:     wxStockCursor : !foreign lua "wx.wxCURSOR_POINT_LEFT"
export wxCURSOR_POINT_RIGHT:    wxStockCursor : !foreign lua "wx.wxCURSOR_POINT_RIGHT"
export wxCURSOR_QUESTION_ARROW: wxStockCursor : !foreign lua "wx.wxCURSOR_QUESTION_ARROW"
export wxCURSOR_RIGHT_BUTTON:   wxStockCursor : !foreign lua "wx.wxCURSOR_RIGHT_BUTTON"
export wxCURSOR_SIZENESW:       wxStockCursor : !foreign lua "wx.wxCURSOR_SIZENESW"
export wxCURSOR_SIZENS:         wxStockCursor : !foreign lua "wx.wxCURSOR_SIZENS"
export wxCURSOR_SIZENWSE:       wxStockCursor : !foreign lua "wx.wxCURSOR_SIZENWSE"
export wxCURSOR_SIZEWE:         wxStockCursor : !foreign lua "wx.wxCURSOR_SIZEWE"
export wxCURSOR_SIZING:         wxStockCursor : !foreign lua "wx.wxCURSOR_SIZING"
export wxCURSOR_SPRAYCAN:       wxStockCursor : !foreign lua "wx.wxCURSOR_SPRAYCAN"
export wxCURSOR_WAIT:           wxStockCursor : !foreign lua "wx.wxCURSOR_WAIT"
export wxCURSOR_WATCH:          wxStockCursor : !foreign lua "wx.wxCURSOR_WATCH"
export wxCURSOR_BLANK:          wxStockCursor : !foreign lua "wx.wxCURSOR_BLANK"
export wxCURSOR_DEFAULT:        wxStockCursor : !foreign lua "wx.wxCURSOR_DEFAULT"
export wxCURSOR_ARROWWAIT:      wxStockCursor : !foreign lua "wx.wxCURSOR_ARROWWAIT"
export wxCURSOR_MAX:            wxStockCursor : !foreign lua "wx.wxCURSOR_MAX"

export wxMM_TEXT:        wxEnum : !foreign lua "wx.wxMM_TEXT"
export wxMM_LOMETRIC:    wxEnum : !foreign lua "wx.wxMM_LOMETRIC"
export wxMM_HIMETRIC:    wxEnum : !foreign lua "wx.wxMM_HIMETRIC"
export wxMM_LOENGLISH:   wxEnum : !foreign lua "wx.wxMM_LOENGLISH"
export wxMM_HIENGLISH:   wxEnum : !foreign lua "wx.wxMM_HIENGLISH"
export wxMM_TWIPS:       wxEnum : !foreign lua "wx.wxMM_TWIPS"
export wxMM_ISOTROPIC:   wxEnum : !foreign lua "wx.wxMM_ISOTROPIC"
export wxMM_ANISOTROPIC: wxEnum : !foreign lua "wx.wxMM_ANISOTROPIC"
export wxMM_POINTS:      wxEnum : !foreign lua "wx.wxMM_POINTS"
export wxMM_METRIC:      wxEnum : !foreign lua "wx.wxMM_METRIC"

export wxCONTROL_DISABLED:     wxEnum : !foreign lua "wx.wxCONTROL_DISABLED"
export wxCONTROL_FOCUSED:      wxEnum : !foreign lua "wx.wxCONTROL_FOCUSED"
export wxCONTROL_PRESSED:      wxEnum : !foreign lua "wx.wxCONTROL_PRESSED"
export wxCONTROL_SPECIAL:      wxEnum : !foreign lua "wx.wxCONTROL_SPECIAL"
export wxCONTROL_ISDEFAULT:    wxEnum : !foreign lua "wx.wxCONTROL_ISDEFAULT"
export wxCONTROL_ISSUBMENU:    wxEnum : !foreign lua "wx.wxCONTROL_ISSUBMENU"
export wxCONTROL_EXPANDED:     wxEnum : !foreign lua "wx.wxCONTROL_EXPANDED"
export wxCONTROL_SIZEGRIP:     wxEnum : !foreign lua "wx.wxCONTROL_SIZEGRIP"
export wxCONTROL_CURRENT:      wxEnum : !foreign lua "wx.wxCONTROL_CURRENT"
export wxCONTROL_SELECTED:     wxEnum : !foreign lua "wx.wxCONTROL_SELECTED"
export wxCONTROL_CHECKED:      wxEnum : !foreign lua "wx.wxCONTROL_CHECKED"
export wxCONTROL_CHECKABLE:    wxEnum : !foreign lua "wx.wxCONTROL_CHECKABLE"
export wxCONTROL_UNDETERMINED: wxEnum : !foreign lua "wx.wxCONTROL_UNDETERMINED"
export wxCONTROL_FLAGS_MASK:   wxEnum : !foreign lua "wx.wxCONTROL_FLAGS_MASK"
export wxCONTROL_DIRTY:        wxEnum : !foreign lua "wx.wxCONTROL_DIRTY"

export wxHeaderSortIconType :: wxEnum
export wxHDR_SORT_ICON_NONE: wxHeaderSortIconType : !foreign lua "wx.wxHDR_SORT_ICON_NONE"
export wxHDR_SORT_ICON_UP:   wxHeaderSortIconType : !foreign lua "wx.wxHDR_SORT_ICON_UP"
export wxHDR_SORT_ICON_DOWN: wxHeaderSortIconType : !foreign lua "wx.wxHDR_SORT_ICON_DOWN"

export wxPoint :: !foreign struct {
	using wxLuaUserdata,

	null: wxPoint : !foreign lua "wx.NULL",

	X: int,
	Y: int,

	GetX :: (self:wxPoint) -> int !foreign method "GetX",
	SetX :: (self:wxPoint, value:int) !foreign method "SetX",
	GetY :: (self:wxPoint) -> int !foreign method "GetY",
	SetY :: (self:wxPoint, value:int) !foreign method "SetY",

	new :: (x,y:int=0) -> wxPoint !foreign lua "wx.wxPoint",
	new :: (pt:wxPoint) -> wxPoint !foreign lua "wx.wxPoint",

	GetXY :: (self:wxPoint) -> (x:int, y:int) !foreign method "GetXY",
	Set   :: (self:wxPoint, x,y:int) !foreign method "Set",
}

export wxSize :: !foreign struct {
	using wxLuaUserdata,

	new :: (width,height:int=0) -> wxSize !foreign lua "wx.wxSize",
	new :: (size:wxSize) -> wxSize !foreign lua "wx.wxSize",

	DecBy            :: (self:wxSize, dx,dy:int) !foreign method "DecBy",
	DecTo            :: (self:wxSize, sz:wxSize) !foreign method "DecTo",
	IsFullySpecified :: (self:wxSize) -> bool !foreign method "IsFullySpecified",
	GetHeight        :: (self:wxSize) -> int !foreign method "GetHeight",
	GetWidth         :: (self:wxSize) -> int !foreign method "GetWidth",
	IncBy            :: (self:wxSize, dx,dy:int) !foreign method "IncBy",
	IncTo            :: (self:wxSize, sz:wxSize) !foreign method "IncTo",
	Scale            :: (self:wxSize, xscale:float, yscale:float) -> wxSize !foreign method "Scale",
	Set              :: (self:wxSize, width,height:int) !foreign method "Set",
	SetDefaults      :: (self:wxSize, size:wxSize) !foreign method "SetDefaults",
	SetHeight        :: (self:wxSize, height:int) !foreign method "SetHeight",
	SetWidth         :: (self:wxSize, width:int) !foreign method "SetWidth",
}

export wxRect :: !foreign struct {
	using wxLuaUserdata,

	null: wxRect : !foreign lua "wx.NULL",

	new :: (x,y:int=0, w,h:int=0) -> wxRect !foreign lua "wx.wxRect",
	new :: (rect:wxRect) -> wxRect !foreign lua "wx.wxRect",
	new :: (topLeft:wxPoint, bottomRight:wxPoint) -> wxRect !foreign lua "wx.wxRect",
	new :: (pos:wxPoint, size:wxSize) -> wxRect !foreign lua "wx.wxRect",
	new :: (size:wxSize) -> wxRect !foreign lua "wx.wxRect",

	CentreIn       :: (self:wxRect, r:wxRect, dir:int=wxBOTH) -> wxRect !foreign method "CentreIn",
	Contains       :: (self:wxRect, dx,dy:int--[[wxCoord]]) -> bool !foreign method "Contains",
	Contains       :: (self:wxRect, pt:wxPoint) -> bool !foreign method "Contains",
	Contains       :: (self:wxRect, rect:wxRect) -> bool !foreign method "Contains",
	Deflate        :: (self:wxRect, dx,dy:int--[[wxCoord]]) -> wxRect !foreign method "Deflate",
	GetBottom      :: (self:wxRect) -> int !foreign method "GetBottom",
	GetHeight      :: (self:wxRect) -> int !foreign method "GetHeight",
	GetLeft        :: (self:wxRect) -> int !foreign method "GetLeft",
	GetPosition    :: (self:wxRect) -> wxPoint !foreign method "GetPosition",
	GetTopLeft     :: (self:wxRect) -> wxPoint !foreign method "GetTopLeft",
	GetTopRight    :: (self:wxRect) -> wxPoint !foreign method "GetTopRight",
	GetBottomRight :: (self:wxRect) -> wxPoint !foreign method "GetBottomRight",
	GetBottomLeft  :: (self:wxRect) -> wxPoint !foreign method "GetBottomLeft",
	GetRight       :: (self:wxRect) -> int !foreign method "GetRight",
	GetSize        :: (self:wxRect) -> wxSize !foreign method "GetSize",
	GetTop         :: (self:wxRect) -> int !foreign method "GetTop",
	GetWidth       :: (self:wxRect) -> int !foreign method "GetWidth",
	GetX           :: (self:wxRect) -> int !foreign method "GetX",
	GetY           :: (self:wxRect) -> int !foreign method "GetY",
	Inflate        :: (self:wxRect, dx,dy:int--[[wxCoord]]) -> wxRect !foreign method "Inflate",
	Intersects     :: (self:wxRect, rect:wxRect) -> bool !foreign method "Intersects",
	IsEmpty        :: (self:wxRect) -> bool !foreign method "IsEmpty",
	Offset         :: (self:wxRect, dx,dy:int--[[wxCoord]]) !foreign method "Offset",
	SetBottom      :: (self:wxRect, bottom:int) !foreign method "SetBottom",
	SetHeight      :: (self:wxRect, height:int) !foreign method "SetHeight",
	SetLeft        :: (self:wxRect, left:int) !foreign method "SetLeft",
	SetPosition    :: (self:wxRect, p:wxPoint) !foreign method "SetPosition",
	SetBottomLeft  :: (self:wxRect, p:wxPoint) !foreign method "SetBottomLeft",
	SetBottomRight :: (self:wxRect, p:wxPoint) !foreign method "SetBottomRight",
	SetRight       :: (self:wxRect, right:int) !foreign method "SetRight",
	SetSize        :: (self:wxRect, s:wxSize) !foreign method "SetSize",
	SetTop         :: (self:wxRect, top:int) !foreign method "SetTop",
	SetTopRight    :: (self:wxRect, p:wxPoint) !foreign method "SetTopRight",
	SetWidth       :: (self:wxRect, width:int) !foreign method "SetWidth",
	SetX           :: (self:wxRect, X:int) !foreign method "SetX",
	SetY           :: (self:wxRect, Y:int) !foreign method "SetY",
	Union          :: (self:wxRect, rect:wxRect) -> wxRect !foreign method "Union",
}

export wxGDIObject :: !foreign struct {
	using wxObject,

	IsNull :: (self:wxGDIObject) -> bool !foreign method "IsNull",
}

export wxRegion :: !foreign struct {
	using wxGDIObject,

	new :: (x,y:int--[[long]]=0, width,height:int--[[long]]=0) -> wxRegion !foreign lua "wx.wxRegion",
	new :: (topLeft:wxPoint, bottomRight:wxPoint) -> wxRegion !foreign lua "wx.wxRegion",
	new :: (rect:wxRect) -> wxRegion !foreign lua "wx.wxRegion",
	new :: (region:wxRegion) -> wxRegion !foreign lua "wx.wxRegion",

	Clear           :: (self:wxRegion) !foreign method "Clear",
	Combine         :: (self:wxRegion, x,y:int--[[wxCoord]], w,h:int--[[wxCoord]], op:wxRegionOp) -> bool !foreign method "Combine",
	Combine         :: (self:wxRegion, rect:wxRect, op:wxRegionOp) -> bool !foreign method "Combine",
	Combine         :: (self:wxRegion, region:wxRegion, op:wxRegionOp) -> bool !foreign method "Combine",
	Contains        :: (self:wxRegion, x,y:int--[[long]]) -> wxRegionContain !foreign method "Contains",
	Contains        :: (self:wxRegion, pt:wxPoint) -> wxRegionContain !foreign method "Contains",
	Contains        :: (self:wxRegion, rect:wxRect) -> wxRegionContain !foreign method "Contains",
	Contains        :: (self:wxRegion, x,y:int--[[long]], w,h:int--[[long]]) -> wxRegionContain !foreign method "Contains",
	ConvertToBitmap :: (self:wxRegion) -> wxBitmap !foreign method "ConvertToBitmap",
	GetBox          :: (self:wxRegion) -> wxRect !foreign method "GetBox",
	GetBoxXYWH      :: (self:wxRegion) -> (x:int, y:int, width:int, height:int) !foreign method "GetBoxXYWH",
	Intersect       :: (self:wxRegion, x,y:int--[[long]], width,height:int--[[long]]) -> bool !foreign method "Intersect",
	Intersect       :: (self:wxRegion, rect:wxRect) -> bool !foreign method "Intersect",
	Intersect       :: (self:wxRegion, region:wxRegion) -> bool !foreign method "Intersect",
	IsEmpty         :: (self:wxRegion) -> bool !foreign method "IsEmpty",
	IsEqual         :: (self:wxRegion, region:wxRegion) -> bool !foreign method "IsEqual",
	Ok              :: (self:wxRegion) -> bool !foreign method "Ok",
	Subtract        :: (self:wxRegion, x,y:int--[[long]], width,height:int--[[long]]) -> bool !foreign method "Subtract",
	Subtract        :: (self:wxRegion, rect:wxRect) -> bool !foreign method "Subtract",
	Subtract        :: (self:wxRegion, region:wxRegion) -> bool !foreign method "Subtract",
	Offset          :: (self:wxRegion, x,y:int--[[wxCoord]]) -> bool !foreign method "Offset",
	Union           :: (self:wxRegion, x,y:int--[[long]], width,height:int--[[long]]) -> bool !foreign method "Union",
	Union           :: (self:wxRegion, rect:wxRect) -> bool !foreign method "Union",
	Union           :: (self:wxRegion, region:wxRegion) -> bool !foreign method "Union",
	Union           :: (self:wxRegion, bmp:wxBitmap) -> bool !foreign method "Union",
	Union           :: (self:wxRegion, bmp:wxBitmap, transColour:wxColour, tolerance:int=0) -> bool !foreign method "Union",
	Xor             :: (self:wxRegion, x,y:int--[[long]], width,height:int--[[long]]) -> bool !foreign method "Xor",
	Xor             :: (self:wxRegion, rect:wxRect) -> bool !foreign method "Xor",
	Xor             :: (self:wxRegion, region:wxRegion) -> bool !foreign method "Xor",
}

export wxRegionIterator :: !foreign struct {
	using wxObject,

	new :: (region:wxRegion) -> wxRegionIterator !foreign lua "wx.wxRegionIterator",

	GetX      :: (self:wxRegionIterator) -> int--[[long]] !foreign method "GetX",
	GetY      :: (self:wxRegionIterator) -> int--[[long]] !foreign method "GetY",
	GetWidth  :: (self:wxRegionIterator) -> int--[[long]] !foreign method "GetWidth",
	GetHeight :: (self:wxRegionIterator) -> int--[[long]] !foreign method "GetHeight",
	GetRect   :: (self:wxRegionIterator) -> wxRect !foreign method "GetRect",
	HaveRects :: (self:wxRegionIterator) -> bool !foreign method "HaveRects",
	Reset     :: (self:wxRegionIterator) !foreign method "Reset",
	Next      :: (self:wxRegionIterator) !foreign method "Next",
}

export wxFont :: !foreign struct {
	using wxGDIObject,

	null: wxFont : !foreign lua "wx.NULL",

	new                :: (pointSize:int, family:int, style:int, weight:int, underline:bool=false, faceName:wxString|string="", encoding:wxFontEncoding=wxFONTENCODING_DEFAULT) -> wxFont !foreign lua "wx.wxFont",
	new                :: (font:wxFont) -> wxFont !foreign lua "wx.wxFont",
	GetDefaultEncoding :: () -> wxFontEncoding !foreign lua "wx.wxFont.GetDefaultEncoding",
	New                :: (pointSize:int, family:wxFontFamily, style:int, weight:wxFontWeight, underline:bool=false, faceName:wxString|string="", encoding:wxFontEncoding=wxFONTENCODING_DEFAULT) -> wxFont !foreign lua "wx.wxFont.New",
	New                :: (pointSize:int, family:wxFontFamily, flags:int=wxFONTFLAG_DEFAULT, faceName:wxString|string="", encoding:wxFontEncoding=wxFONTENCODING_DEFAULT) -> wxFont !foreign lua "wx.wxFont.New",
	New                :: (pixelSize:wxSize, family:wxFontFamily, style:int, weight:wxFontWeight, underline:bool=false, faceName:wxString|string="", encoding:wxFontEncoding=wxFONTENCODING_DEFAULT) -> wxFont !foreign lua "wx.wxFont.New",
	New                :: (pixelSize:wxSize, family:wxFontFamily, flags:int=wxFONTFLAG_DEFAULT, faceName:wxString|string="", encoding:wxFontEncoding=wxFONTENCODING_DEFAULT) -> wxFont !foreign lua "wx.wxFont.New",
	SetDefaultEncoding :: (encoding:wxFontEncoding) !foreign lua "wx.wxFont.SetDefaultEncoding",

	IsFixedWidth              :: (self:wxFont) -> bool !foreign method "IsFixedWidth",
	GetFaceName               :: (self:wxFont) -> string !foreign method "GetFaceName",
	GetFamily                 :: (self:wxFont) -> int !foreign method "GetFamily",
	GetNativeFontInfoDesc     :: (self:wxFont) -> string !foreign method "GetNativeFontInfoDesc",
	GetPointSize              :: (self:wxFont) -> int !foreign method "GetPointSize",
	GetStyle                  :: (self:wxFont) -> int !foreign method "GetStyle",
	GetUnderlined             :: (self:wxFont) -> bool !foreign method "GetUnderlined",
	GetWeight                 :: (self:wxFont) -> int !foreign method "GetWeight",
	Ok                        :: (self:wxFont) -> bool !foreign method "Ok",
	SetFaceName               :: (self:wxFont, faceName:wxString|string) -> bool !foreign method "SetFaceName",
	SetFamily                 :: (self:wxFont, family:int) !foreign method "SetFamily",
	SetNativeFontInfo         :: (self:wxFont, info:wxString|string) -> bool !foreign method "SetNativeFontInfo",
	SetNativeFontInfoUserDesc :: (self:wxFont, info:wxString|string) -> bool !foreign method "SetNativeFontInfoUserDesc",
	SetPointSize              :: (self:wxFont, pointSize:int) !foreign method "SetPointSize",
	SetStyle                  :: (self:wxFont, style:int) !foreign method "SetStyle",
	SetUnderlined             :: (self:wxFont, underlined:bool) !foreign method "SetUnderlined",
	SetWeight                 :: (self:wxFont, weight:int) !foreign method "SetWeight",
}

export wxNativeFontInfo :: !foreign struct {
	using wxLuaUserdata,

	new :: () -> wxNativeFontInfo !foreign lua "wx.wxNativeFontInfo",
	new :: (info:wxNativeFontInfo) -> wxNativeFontInfo !foreign lua "wx.wxNativeFontInfo",

	GetPointSize   :: (self:wxNativeFontInfo) -> int !foreign method "GetPointSize",
	GetPixelSize   :: (self:wxNativeFontInfo) -> wxSize !foreign method "GetPixelSize",
	GetStyle       :: (self:wxNativeFontInfo) -> wxFontStyle !foreign method "GetStyle",
	GetWeight      :: (self:wxNativeFontInfo) -> wxFontWeight !foreign method "GetWeight",
	GetUnderlined  :: (self:wxNativeFontInfo) -> bool !foreign method "GetUnderlined",
	GetFaceName    :: (self:wxNativeFontInfo) -> string !foreign method "GetFaceName",
	GetFamily      :: (self:wxNativeFontInfo) -> wxFontFamily !foreign method "GetFamily",
	GetEncoding    :: (self:wxNativeFontInfo) -> wxFontEncoding !foreign method "GetEncoding",
	SetPointSize   :: (self:wxNativeFontInfo, pointsize:int) !foreign method "SetPointSize",
	SetPixelSize   :: (self:wxNativeFontInfo, pixelSize:wxSize) !foreign method "SetPixelSize",
	SetStyle       :: (self:wxNativeFontInfo, style:wxFontStyle) !foreign method "SetStyle",
	SetWeight      :: (self:wxNativeFontInfo, weight:wxFontWeight) !foreign method "SetWeight",
	SetUnderlined  :: (self:wxNativeFontInfo, underlined:bool) !foreign method "SetUnderlined",
	SetFaceName    :: (self:wxNativeFontInfo, facename:wxString|string) -> bool !foreign method "SetFaceName",
	SetFamily      :: (self:wxNativeFontInfo, family:wxFontFamily) !foreign method "SetFamily",
	SetEncoding    :: (self:wxNativeFontInfo, encoding:wxFontEncoding) !foreign method "SetEncoding",
	SetFaceName    :: (self:wxNativeFontInfo, facenames:wxArrayString|[]string) !foreign method "SetFaceName",
	FromString     :: (self:wxNativeFontInfo, s:wxString|string) -> bool !foreign method "FromString",
	ToString       :: (self:wxNativeFontInfo) -> string !foreign method "ToString",
	FromUserString :: (self:wxNativeFontInfo, s:wxString|string) -> bool !foreign method "FromUserString",
	ToUserString   :: (self:wxNativeFontInfo) -> string !foreign method "ToUserString",
}

export wxFontEnumerator :: !foreign struct {
	using wxLuaUserdata,

	new          :: () -> wxFontEnumerator !foreign lua "wx.wxFontEnumerator",
	GetEncodings :: (facename:wxString|string="") -> wxArrayString !foreign lua "wx.wxFontEnumerator.GetEncodings",
	GetFacenames :: (encoding:wxFontEncoding=wxFONTENCODING_SYSTEM, fixedWidthOnly:bool=false) -> wxArrayString !foreign lua "wx.wxFontEnumerator.GetFacenames",

	EnumerateFacenames :: (self:wxFontEnumerator, encoding:wxFontEncoding=wxFONTENCODING_SYSTEM, fixedWidthOnly:bool=false) -> bool !foreign method "EnumerateFacenames",
	EnumerateEncodings :: (self:wxFontEnumerator, font:wxString|string="") -> bool !foreign method "EnumerateEncodings",
}

export wxFontList :: !foreign struct {
	using wxLuaUserdata,

	FindOrCreateFont :: (self:wxFontList, pointSize:int, family:int, style:int, weight:int, underline:bool=false, faceName:wxString|string="", encoding:wxFontEncoding=wxFONTENCODING_DEFAULT) -> wxFont !foreign method "FindOrCreateFont",
}

export wxFontMapper :: !foreign struct {
	using wxLuaUserdata,

	Get                        :: () -> wxFontMapper !foreign lua "wx.wxFontMapper.Get",
	GetDefaultConfigPath       :: () -> string !foreign lua "wx.wxFontMapper.GetDefaultConfigPath",
	GetEncoding                :: (n:int--[[size_t]]) -> wxFontEncoding !foreign lua "wx.wxFontMapper.GetEncoding",
	GetEncodingDescription     :: (encoding:wxFontEncoding) -> string !foreign lua "wx.wxFontMapper.GetEncodingDescription",
	GetEncodingFromName        :: (encoding:wxString|string) -> wxFontEncoding !foreign lua "wx.wxFontMapper.GetEncodingFromName",
	GetEncodingName            :: (encoding:wxFontEncoding) -> string !foreign lua "wx.wxFontMapper.GetEncodingName",
	GetSupportedEncodingsCount :: () -> int--[[size_t]] !foreign lua "wx.wxFontMapper.GetSupportedEncodingsCount",
	Reset                      :: () !foreign lua "wx.wxFontMapper.Reset",

	CharsetToEncoding   :: (self:wxFontMapper, charset:wxString|string, interactive:bool=true) -> wxFontEncoding !foreign method "CharsetToEncoding",
	GetAltForEncoding   :: (self:wxFontMapper, encoding:wxFontEncoding, faceName:wxString|string="", interactive:bool=true) -> bool, wxFontEncoding !foreign method "GetAltForEncoding",
	IsEncodingAvailable :: (self:wxFontMapper, encoding:wxFontEncoding, facename:wxString|string="") -> bool !foreign method "IsEncodingAvailable",
	SetDialogParent     :: (self:wxFontMapper, parent:wxWindow) !foreign method "SetDialogParent",
	SetDialogTitle      :: (self:wxFontMapper, title:wxString|string) !foreign method "SetDialogTitle",
	SetConfigPath       :: (self:wxFontMapper, prefix:wxString|string) !foreign method "SetConfigPath",
}

export wxColour :: !foreign struct {
	using wxGDIObject,

	new :: (red:int--[[unsigned char]], green:int--[[unsigned char]], blue:int--[[unsigned char]], alpha:int--[[unsigned char]]=wxALPHA_OPAQUE) -> wxColour !foreign lua "wx.wxColour",
	new :: (colourName:wxString|string) -> wxColour !foreign lua "wx.wxColour",
	new :: (colour:wxColour) -> wxColour !foreign lua "wx.wxColour",

	Alpha       :: (self:wxColour) -> int--[[unsigned char]] !foreign method "Alpha",
	Blue        :: (self:wxColour) -> int--[[unsigned char]] !foreign method "Blue",
	GetAsString :: (self:wxColour, flags:int--[[long]]=0--[[bitwise(wxC2S_NAME|wxC2S_CSS_SYNTAX)]]) -> string !foreign method "GetAsString",
	GetPixel    :: (self:wxColour) -> int--[[long]] !foreign method "GetPixel",
	Green       :: (self:wxColour) -> int--[[unsigned char]] !foreign method "Green",
	Ok          :: (self:wxColour) -> bool !foreign method "Ok",
	Red         :: (self:wxColour) -> int--[[unsigned char]] !foreign method "Red",
	Set         :: (self:wxColour, red:int--[[unsigned char]], green:int--[[unsigned char]], blue:int--[[unsigned char]], alpha:int--[[unsigned char]]=wxALPHA_OPAQUE) !foreign method "Set",
	Set         :: (self:wxColour, str:wxString|string) -> bool !foreign method "Set",
	Set         :: (self:wxColour, colRGB:int--[[unsigned long]]) !foreign method "Set",
}

export wxColourDatabase :: !foreign struct {
	using wxLuaUserdata,

	new :: () -> wxColourDatabase !foreign lua "wx.wxColourDatabase",

	Find      :: (self:wxColourDatabase, name:wxString|string) -> wxColour !foreign method "Find",
	FindName  :: (self:wxColourDatabase, colour:wxColour) -> string !foreign method "FindName",
	AddColour :: (self:wxColourDatabase, name:wxString|string, colour:wxColour) !foreign method "AddColour",
}

export wxPen :: !foreign struct {
	using wxGDIObject,

	new :: () -> wxPen !foreign lua "wx.wxPen",
	new :: (colour:wxColour, width:int, style:int) -> wxPen !foreign lua "wx.wxPen",
	new :: (colourName:wxString|string, width:int, style:int) -> wxPen !foreign lua "wx.wxPen",
	new :: (stipple:wxBitmap, width:int) -> wxPen !foreign lua "wx.wxPen",
	new :: (pen:wxPen) -> wxPen !foreign lua "wx.wxPen",

	GetCap     :: (self:wxPen) -> int !foreign method "GetCap",
	GetColour  :: (self:wxPen) -> wxColour !foreign method "GetColour",
	GetJoin    :: (self:wxPen) -> int !foreign method "GetJoin",
	GetStipple :: (self:wxPen) -> wxBitmap !foreign method "GetStipple",
	GetStyle   :: (self:wxPen) -> int !foreign method "GetStyle",
	GetWidth   :: (self:wxPen) -> int !foreign method "GetWidth",
	Ok         :: (self:wxPen) -> bool !foreign method "Ok",
	SetCap     :: (self:wxPen, capStyle:int) !foreign method "SetCap",
	SetColour  :: (self:wxPen, colour:wxColour) !foreign method "SetColour",
	SetColour  :: (self:wxPen, colourName:wxString|string) !foreign method "SetColour",
	SetColour  :: (self:wxPen, red:int--[[unsigned char]], green:int--[[unsigned char]], blue:int--[[unsigned char]]) !foreign method "SetColour",
	SetJoin    :: (self:wxPen, join_style:int) !foreign method "SetJoin",
	SetStipple :: (self:wxPen, stipple:wxBitmap) !foreign method "SetStipple",
	SetStyle   :: (self:wxPen, style:int) !foreign method "SetStyle",
	SetWidth   :: (self:wxPen, width:int) !foreign method "SetWidth",
}

export wxPenList :: !foreign struct {
	using wxList,

	FindOrCreatePen :: (self:wxPenList, colour:wxColour, width:int, style:int) -> wxPen !foreign method "FindOrCreatePen",
}

export wxBrush :: !foreign struct {
	using wxGDIObject,

	new :: () -> wxBrush !foreign lua "wx.wxBrush",
	new :: (colour:wxColour, style:int) -> wxBrush !foreign lua "wx.wxBrush",
	new :: (colourName:wxString|string, style:int) -> wxBrush !foreign lua "wx.wxBrush",
	new :: (stippleBitmap:wxBitmap) -> wxBrush !foreign lua "wx.wxBrush",
	new :: (brush:wxBrush) -> wxBrush !foreign lua "wx.wxBrush",

	GetColour  :: (self:wxBrush) -> wxColour !foreign method "GetColour",
	GetStipple :: (self:wxBrush) -> wxBitmap !foreign method "GetStipple",
	GetStyle   :: (self:wxBrush) -> int !foreign method "GetStyle",
	IsHatch    :: (self:wxBrush) -> bool !foreign method "IsHatch",
	Ok         :: (self:wxBrush) -> bool !foreign method "Ok",
	SetColour  :: (self:wxBrush, colour:wxColour) !foreign method "SetColour",
	SetColour  :: (self:wxBrush, colourName:wxString|string) !foreign method "SetColour",
	SetColour  :: (self:wxBrush, red:int--[[unsigned char]], green:int--[[unsigned char]], blue:int--[[unsigned char]]) !foreign method "SetColour",
	SetStipple :: (self:wxBrush, bitmap:wxBitmap) !foreign method "SetStipple",
	SetStyle   :: (self:wxBrush, style:int) !foreign method "SetStyle",
}

export wxBrushList :: !foreign struct {
	using wxList,

	FindOrCreateBrush :: (self:wxBrushList, colour:wxColour, style:int) -> wxBrush !foreign method "FindOrCreateBrush",
}

export wxStockGDI :: !foreign struct {
	using wxLuaUserdata,

	Item :: wxEnum,
	BRUSH_BLACK:       Item : !foreign lua "wx.wxStockGDI.BRUSH_BLACK",
	BRUSH_BLUE:        Item : !foreign lua "wx.wxStockGDI.BRUSH_BLUE",
	BRUSH_CYAN:        Item : !foreign lua "wx.wxStockGDI.BRUSH_CYAN",
	BRUSH_GREEN:       Item : !foreign lua "wx.wxStockGDI.BRUSH_GREEN",
	BRUSH_GREY:        Item : !foreign lua "wx.wxStockGDI.BRUSH_GREY",
	BRUSH_LIGHTGREY:   Item : !foreign lua "wx.wxStockGDI.BRUSH_LIGHTGREY",
	BRUSH_MEDIUMGREY:  Item : !foreign lua "wx.wxStockGDI.BRUSH_MEDIUMGREY",
	BRUSH_RED:         Item : !foreign lua "wx.wxStockGDI.BRUSH_RED",
	BRUSH_TRANSPARENT: Item : !foreign lua "wx.wxStockGDI.BRUSH_TRANSPARENT",
	BRUSH_WHITE:       Item : !foreign lua "wx.wxStockGDI.BRUSH_WHITE",
	COLOUR_BLACK:      Item : !foreign lua "wx.wxStockGDI.COLOUR_BLACK",
	COLOUR_BLUE:       Item : !foreign lua "wx.wxStockGDI.COLOUR_BLUE",
	COLOUR_CYAN:       Item : !foreign lua "wx.wxStockGDI.COLOUR_CYAN",
	COLOUR_GREEN:      Item : !foreign lua "wx.wxStockGDI.COLOUR_GREEN",
	COLOUR_LIGHTGREY:  Item : !foreign lua "wx.wxStockGDI.COLOUR_LIGHTGREY",
	COLOUR_RED:        Item : !foreign lua "wx.wxStockGDI.COLOUR_RED",
	COLOUR_WHITE:      Item : !foreign lua "wx.wxStockGDI.COLOUR_WHITE",
	CURSOR_CROSS:      Item : !foreign lua "wx.wxStockGDI.CURSOR_CROSS",
	CURSOR_HOURGLASS:  Item : !foreign lua "wx.wxStockGDI.CURSOR_HOURGLASS",
	CURSOR_STANDARD:   Item : !foreign lua "wx.wxStockGDI.CURSOR_STANDARD",
	FONT_ITALIC:       Item : !foreign lua "wx.wxStockGDI.FONT_ITALIC",
	FONT_NORMAL:       Item : !foreign lua "wx.wxStockGDI.FONT_NORMAL",
	FONT_SMALL:        Item : !foreign lua "wx.wxStockGDI.FONT_SMALL",
	FONT_SWISS:        Item : !foreign lua "wx.wxStockGDI.FONT_SWISS",
	PEN_BLACK:         Item : !foreign lua "wx.wxStockGDI.PEN_BLACK",
	PEN_BLACKDASHED:   Item : !foreign lua "wx.wxStockGDI.PEN_BLACKDASHED",
	PEN_CYAN:          Item : !foreign lua "wx.wxStockGDI.PEN_CYAN",
	PEN_GREEN:         Item : !foreign lua "wx.wxStockGDI.PEN_GREEN",
	PEN_GREY:          Item : !foreign lua "wx.wxStockGDI.PEN_GREY",
	PEN_LIGHTGREY:     Item : !foreign lua "wx.wxStockGDI.PEN_LIGHTGREY",
	PEN_MEDIUMGREY:    Item : !foreign lua "wx.wxStockGDI.PEN_MEDIUMGREY",
	PEN_RED:           Item : !foreign lua "wx.wxStockGDI.PEN_RED",
	PEN_TRANSPARENT:   Item : !foreign lua "wx.wxStockGDI.PEN_TRANSPARENT",
	PEN_WHITE:         Item : !foreign lua "wx.wxStockGDI.PEN_WHITE",
	ITEMCOUNT:         Item : !foreign lua "wx.wxStockGDI.ITEMCOUNT",

	instance  :: () -> wxStockGDI !foreign lua "wx.wxStockGDI.instance",
	GetBrush  :: (item:wxStockGDI.Item) -> wxBrush !foreign lua "wx.wxStockGDI.GetBrush",
	GetColour :: (item:wxStockGDI.Item) -> wxColour !foreign lua "wx.wxStockGDI.GetColour",
	GetCursor :: (item:wxStockGDI.Item) -> wxCursor !foreign lua "wx.wxStockGDI.GetCursor",
	GetPen    :: (item:wxStockGDI.Item) -> wxPen !foreign lua "wx.wxStockGDI.GetPen",

	GetFont :: (self:wxStockGDI, item:wxStockGDI.Item) -> wxFont !foreign method "GetFont",
}

export wxPalette :: !foreign struct {
	using wxGDIObject,

	null: wxPalette : !foreign lua "wx.NULL",

	new :: () -> wxPalette !foreign lua "wx.wxPalette",
	new :: (palette:wxPalette) -> wxPalette !foreign lua "wx.wxPalette",

	Create          :: (self:wxPalette, n:int, red:string, green:string, blue:string) -> bool !foreign method "Create",
	GetColoursCount :: (self:wxPalette) -> int !foreign method "GetColoursCount",
	GetPixel        :: (self:wxPalette, red:int--[[unsigned char]], green:int--[[unsigned char]], blue:int--[[unsigned char]]) -> int !foreign method "GetPixel",
	GetRGB          :: (self:wxPalette, pixel:int) -> bool, int--[[char]], int--[[char]], int--[[char]] !foreign method "GetRGB",
	Ok              :: (self:wxPalette) -> bool !foreign method "Ok",
}

export wxIcon :: !foreign struct {
	using wxGDIObject,

	new :: () -> wxIcon !foreign lua "wx.wxIcon",
	new :: (name:wxString|string, \type:wxBitmapType, desiredWidth:int=-1, desiredHeight:int=-1) -> wxIcon !foreign lua "wx.wxIcon",

	CopyFromBitmap :: (self:wxIcon, bmp:wxBitmap) !foreign method "CopyFromBitmap",
	GetDepth       :: (self:wxIcon) -> int !foreign method "GetDepth",
	GetHeight      :: (self:wxIcon) -> int !foreign method "GetHeight",
	GetWidth       :: (self:wxIcon) -> int !foreign method "GetWidth",
	LoadFile       :: (self:wxIcon, name:wxString|string, flags:wxBitmapType) -> bool !foreign method "LoadFile",
	Ok             :: (self:wxIcon) -> bool !foreign method "Ok",
	SetDepth       :: (self:wxIcon, d:int) !foreign method "SetDepth",
	SetHeight      :: (self:wxIcon, h:int) !foreign method "SetHeight",
	SetWidth       :: (self:wxIcon, w:int) !foreign method "SetWidth",
}

export wxIconBundle :: !foreign struct {
	using wxLuaUserdata,

	new :: () -> wxIconBundle !foreign lua "wx.wxIconBundle",
	new :: (file:wxString|string, \type:int--[[long]]) -> wxIconBundle !foreign lua "wx.wxIconBundle",
	new :: (icon:wxIcon) -> wxIconBundle !foreign lua "wx.wxIconBundle",
	new :: (ic:wxIconBundle) -> wxIconBundle !foreign lua "wx.wxIconBundle",

	AddIcon :: (self:wxIconBundle, file:wxString|string, \type:int--[[long]]) !foreign method "AddIcon",
	AddIcon :: (self:wxIconBundle, icon:wxIcon) !foreign method "AddIcon",
	GetIcon :: (self:wxIconBundle, size:wxSize) -> wxIcon !foreign method "GetIcon",
	GetIcon :: (self:wxIconBundle, size:int=wxDefaultCoord) -> wxIcon !foreign method "GetIcon",
}

export wxBitmap :: !foreign struct {
	using wxGDIObject,

	new :: () -> wxBitmap !foreign lua "wx.wxBitmap",
	new :: (bitmap:wxBitmap) -> wxBitmap !foreign lua "wx.wxBitmap",
	new :: (width,height:int, depth:int=-1) -> wxBitmap !foreign lua "wx.wxBitmap",
	new :: (name:wxString|string, \type:wxBitmapType=wxBITMAP_TYPE_ANY) -> wxBitmap !foreign lua "wx.wxBitmap",
	new :: (image:wxImage, depth:int=-1) -> wxBitmap !foreign lua "wx.wxBitmap",
	new :: (arg1:string, width,height:int, depth:int) -> wxBitmap !foreign lua "wx.wxBitmap",
	new :: (charTable:[]any--[[LuaTable]], width,height:int, depth:int) -> wxBitmap !foreign lua "wx.wxBitmap",
	new :: (row:[]string) -> wxBitmap !foreign lua "wx.wxBitmap",
	new :: (arg1:string, \type:int, width,height:int, depth:int) -> wxBitmap !foreign lua "wx.wxBitmap",

	ConvertToImage :: (self:wxBitmap) -> wxImage !foreign method "ConvertToImage",
	CopyFromIcon   :: (self:wxBitmap, icon:wxIcon) -> bool !foreign method "CopyFromIcon",
	Create         :: (self:wxBitmap, width,height:int, depth:int=-1) -> bool !foreign method "Create",
	GetDepth       :: (self:wxBitmap) -> int !foreign method "GetDepth",
	GetHeight      :: (self:wxBitmap) -> int !foreign method "GetHeight",
	GetPalette     :: (self:wxBitmap) -> wxPalette !foreign method "GetPalette",
	GetMask        :: (self:wxBitmap) -> wxMask !foreign method "GetMask",
	GetSubBitmap   :: (self:wxBitmap, rect:wxRect) -> wxBitmap !foreign method "GetSubBitmap",
	GetWidth       :: (self:wxBitmap) -> int !foreign method "GetWidth",
	LoadFile       :: (self:wxBitmap, name:wxString|string, \type:wxBitmapType) -> bool !foreign method "LoadFile",
	Ok             :: (self:wxBitmap) -> bool !foreign method "Ok",
	SaveFile       :: (self:wxBitmap, name:wxString|string, \type:wxBitmapType, palette:wxPalette=wxPalette.null) -> bool !foreign method "SaveFile",
	SetDepth       :: (self:wxBitmap, depth:int) !foreign method "SetDepth",
	SetHeight      :: (self:wxBitmap, height:int) !foreign method "SetHeight",
	SetMask        :: (self:wxBitmap, mask:wxMask) !foreign method "SetMask",
	SetPalette     :: (self:wxBitmap, palette:wxPalette) !foreign method "SetPalette",
	SetWidth       :: (self:wxBitmap, width:int) !foreign method "SetWidth",
}

export wxCursor :: !foreign struct {
	using wxObject,

	new :: () -> wxCursor !foreign lua "wx.wxCursor",
	new :: (id:int) -> wxCursor !foreign lua "wx.wxCursor",
	new :: (image:wxImage) -> wxCursor !foreign lua "wx.wxCursor",
	new :: (cursorName:wxString|string, \type:int--[[long]], hotSpotX:int=0, hotSpotY:int=0) -> wxCursor !foreign lua "wx.wxCursor",

	Ok        :: (self:wxCursor) -> bool !foreign method "Ok",
	GetWidth  :: (self:wxCursor) -> int !foreign method "GetWidth",
	GetHeight :: (self:wxCursor) -> int !foreign method "GetHeight",
	GetDepth  :: (self:wxCursor) -> int !foreign method "GetDepth",
}

export wxMask :: !foreign struct {
	using wxObject,

	new :: () -> wxMask !foreign lua "wx.wxMask",
	new :: (bitmap:wxBitmap) -> wxMask !foreign lua "wx.wxMask",
	new :: (bitmap:wxBitmap, colour:wxColour) -> wxMask !foreign lua "wx.wxMask",
	new :: (bitmap:wxBitmap, index:int) -> wxMask !foreign lua "wx.wxMask",

	Create :: (self:wxMask, bitmap:wxBitmap) -> bool !foreign method "Create",
	Create :: (self:wxMask, bitmap:wxBitmap, colour:wxColour) -> bool !foreign method "Create",
	Create :: (self:wxMask, bitmap:wxBitmap, index:int) -> bool !foreign method "Create",
}

export wxImageList :: !foreign struct {
	using wxObject,

	new :: (width,height:int, mask:bool=true, initialCount:int=1) -> wxImageList !foreign lua "wx.wxImageList",

	Add           :: (self:wxImageList, bitmap:wxBitmap, mask:wxBitmap=wxNullBitmap) -> int !foreign method "Add",
	Add           :: (self:wxImageList, bitmap:wxBitmap, maskColour:wxColour) -> int !foreign method "Add",
	Add           :: (self:wxImageList, icon:wxIcon) -> int !foreign method "Add",
	Draw          :: (self:wxImageList, index:int, dc:wxDC, x,y:int, flags:int=wxIMAGELIST_DRAW_NORMAL, solidBackground:bool=false) -> bool !foreign method "Draw",
	GetBitmap     :: (self:wxImageList, index:int) -> wxBitmap !foreign method "GetBitmap",
	GetIcon       :: (self:wxImageList, index:int) -> wxIcon !foreign method "GetIcon",
	GetImageCount :: (self:wxImageList) -> int !foreign method "GetImageCount",
	GetSize       :: (self:wxImageList, index:int) -> (width:int, height:int) !foreign method "GetSize",
	Remove        :: (self:wxImageList, index:int) -> bool !foreign method "Remove",
	RemoveAll     :: (self:wxImageList) -> bool !foreign method "RemoveAll",
	Replace       :: (self:wxImageList, index:int, bitmap:wxBitmap, mask:wxBitmap=wxNullBitmap) -> bool !foreign method "Replace",
}

export wxDC :: !foreign struct {
	using wxObject,

	null: wxDC : !foreign lua "wx.NULL",

	Blit                       :: (self:wxDC, xdest:int--[[wxCoord]], ydest:int--[[wxCoord]], width,height:int--[[wxCoord]], source:wxDC, xsrc:int--[[wxCoord]], ysrc:int--[[wxCoord]], logicalFunc:int=wxCOPY, useMask:bool=false) -> bool !foreign method "Blit",
	CalcBoundingBox            :: (self:wxDC, x,y:int--[[wxCoord]]) !foreign method "CalcBoundingBox",
	Clear                      :: (self:wxDC) !foreign method "Clear",
	CrossHair                  :: (self:wxDC, x,y:int--[[wxCoord]]) !foreign method "CrossHair",
	DestroyClippingRegion      :: (self:wxDC) !foreign method "DestroyClippingRegion",
	DeviceToLogicalX           :: (self:wxDC, x:int--[[wxCoord]]) -> int--[[wxCoord]] !foreign method "DeviceToLogicalX",
	DeviceToLogicalXRel        :: (self:wxDC, x:int--[[wxCoord]]) -> int--[[wxCoord]] !foreign method "DeviceToLogicalXRel",
	DeviceToLogicalY           :: (self:wxDC, y:int--[[wxCoord]]) -> int--[[wxCoord]] !foreign method "DeviceToLogicalY",
	DeviceToLogicalYRel        :: (self:wxDC, y:int--[[wxCoord]]) -> int--[[wxCoord]] !foreign method "DeviceToLogicalYRel",
	DrawArc                    :: (self:wxDC, x1,y1,x2,y2:int--[[wxCoord]], xc,yc:int--[[wxCoord]]) !foreign method "DrawArc",
	DrawBitmap                 :: (self:wxDC, bitmap:wxBitmap, x,y:int--[[wxCoord]], transparent:bool) !foreign method "DrawBitmap",
	DrawCheckMark              :: (self:wxDC, x,y:int--[[wxCoord]], width,height:int--[[wxCoord]]) !foreign method "DrawCheckMark",
	DrawCheckMark              :: (self:wxDC, rect:wxRect) !foreign method "DrawCheckMark",
	DrawCircle                 :: (self:wxDC, x,y:int--[[wxCoord]], radius:int--[[wxCoord]]) !foreign method "DrawCircle",
	DrawEllipse                :: (self:wxDC, x,y:int--[[wxCoord]], width,height:int--[[wxCoord]]) !foreign method "DrawEllipse",
	DrawEllipticArc            :: (self:wxDC, x,y:int--[[wxCoord]], width,height:int--[[wxCoord]], start:float--[[double]], end:float--[[double]]) !foreign method "DrawEllipticArc",
	DrawIcon                   :: (self:wxDC, icon:wxIcon, x,y:int--[[wxCoord]]) !foreign method "DrawIcon",
	DrawLabel                  :: (self:wxDC, text:wxString|string, image:wxBitmap, rect:wxRect, alignment:int=0--[[bitwise(wxALIGN_LEFT|wxALIGN_TOP)]], indexAccel:int=-1) !foreign method "DrawLabel",
	DrawLabel                  :: (self:wxDC, text:wxString|string, rect:wxRect, alignment:int=0--[[bitwise(wxALIGN_LEFT|wxALIGN_TOP)]], indexAccel:int=-1) !foreign method "DrawLabel",
	DrawLine                   :: (self:wxDC, x1,y1,x2,y2:int--[[wxCoord]]) !foreign method "DrawLine",
	DrawLinesList              :: (self:wxDC, points:wxList, xoffset:int--[[wxCoord]]=0, yoffset:int--[[wxCoord]]=0) !foreign method "DrawLinesList",
	DrawPolygonList            :: (self:wxDC, points:wxList, xoffset:int--[[wxCoord]]=0, yoffset:int--[[wxCoord]]=0, fill_style:int=wxODDEVEN_RULE) !foreign method "DrawPolygonList",
	DrawPoint                  :: (self:wxDC, x,y:int--[[wxCoord]]) !foreign method "DrawPoint",
	DrawRectangle              :: (self:wxDC, x,y:int--[[wxCoord]], width,height:int--[[wxCoord]]) !foreign method "DrawRectangle",
	DrawRotatedText            :: (self:wxDC, text:wxString|string, x,y:int--[[wxCoord]], angle:float--[[double]]) !foreign method "DrawRotatedText",
	DrawRoundedRectangle       :: (self:wxDC, x,y:int--[[wxCoord]], width,height:int--[[wxCoord]], radius:float--[[double]]=20) !foreign method "DrawRoundedRectangle",
	DrawText                   :: (self:wxDC, text:wxString|string, x,y:int--[[wxCoord]]) !foreign method "DrawText",
	EndDoc                     :: (self:wxDC) !foreign method "EndDoc",
	EndPage                    :: (self:wxDC) !foreign method "EndPage",
	FloodFill                  :: (self:wxDC, x,y:int--[[wxCoord]], colour:wxColour, style:int=wxFLOOD_SURFACE) !foreign method "FloodFill",
	GradientFillConcentric     :: (self:wxDC, rect:wxRect, initialColour:wxColour, destColour:wxColour, circleCenter:wxPoint) !foreign method "GradientFillConcentric",
	GradientFillLinear         :: (self:wxDC, rect:wxRect, initialColour:wxColour, destColour:wxColour, nDirection:wxDirection=wxEAST) !foreign method "GradientFillLinear",
	GetAsBitmap                :: (self:wxDC, subrect:wxRect=wxRect.null) -> wxBitmap !foreign method "GetAsBitmap",
	GetBackground              :: (self:wxDC) -> wxBrush !foreign method "GetBackground",
	GetBackgroundMode          :: (self:wxDC) -> int !foreign method "GetBackgroundMode",
	GetBrush                   :: (self:wxDC) -> wxBrush !foreign method "GetBrush",
	GetCharHeight              :: (self:wxDC) -> int--[[wxCoord]] !foreign method "GetCharHeight",
	GetCharWidth               :: (self:wxDC) -> int--[[wxCoord]] !foreign method "GetCharWidth",
	GetClippingBox             :: (self:wxDC, x,y:int--[[wxCoord]], width,height:int--[[wxCoord]]) !foreign method "GetClippingBox",
	GetFont                    :: (self:wxDC) -> wxFont !foreign method "GetFont",
	GetLayoutDirection         :: (self:wxDC) -> wxLayoutDirection !foreign method "GetLayoutDirection",
	GetLogicalFunction         :: (self:wxDC) -> int !foreign method "GetLogicalFunction",
	GetMapMode                 :: (self:wxDC) -> int !foreign method "GetMapMode",
	GetPen                     :: (self:wxDC) -> wxPen !foreign method "GetPen",
	GetPixel                   :: (self:wxDC, x,y:int--[[wxCoord]], colour:wxColour) -> bool !foreign method "GetPixel",
	GetPPI                     :: (self:wxDC) -> wxSize !foreign method "GetPPI",
	GetSize                    :: (self:wxDC, width,height:int--[[wxCoord]]) !foreign method "GetSize",
	GetTextBackground          :: (self:wxDC) -> wxColour !foreign method "GetTextBackground",
	GetTextExtent              :: (self:wxDC, str:wxString|string, font:wxFont=wxFont.null) -> (x:int, y:int, descent:int, externalLeading:int) !foreign method "GetTextExtent",
	GetTextExtentSize          :: (self:wxDC, str:wxString|string) -> wxSize !foreign method "GetTextExtentSize",
	GetMultiLineTextExtent     :: (self:wxDC, str:wxString|string, font:wxFont=wxFont.null) -> (x:int, y:int, heightLine:int) !foreign method "GetMultiLineTextExtent",
	GetMultiLineTextExtentSize :: (self:wxDC, str:wxString|string) -> wxSize !foreign method "GetMultiLineTextExtentSize",
	GetTextForeground          :: (self:wxDC) -> wxColour !foreign method "GetTextForeground",
	GetUserScale               :: (self:wxDC) -> (x:int, y:int) !foreign method "GetUserScale",
	LogicalToDeviceX           :: (self:wxDC, x:int--[[wxCoord]]) -> int--[[wxCoord]] !foreign method "LogicalToDeviceX",
	LogicalToDeviceXRel        :: (self:wxDC, x:int--[[wxCoord]]) -> int--[[wxCoord]] !foreign method "LogicalToDeviceXRel",
	LogicalToDeviceY           :: (self:wxDC, y:int--[[wxCoord]]) -> int--[[wxCoord]] !foreign method "LogicalToDeviceY",
	LogicalToDeviceYRel        :: (self:wxDC, y:int--[[wxCoord]]) -> int--[[wxCoord]] !foreign method "LogicalToDeviceYRel",
	MaxX                       :: (self:wxDC) -> int--[[wxCoord]] !foreign method "MaxX",
	MaxY                       :: (self:wxDC) -> int--[[wxCoord]] !foreign method "MaxY",
	MinX                       :: (self:wxDC) -> int--[[wxCoord]] !foreign method "MinX",
	MinY                       :: (self:wxDC) -> int--[[wxCoord]] !foreign method "MinY",
	Ok                         :: (self:wxDC) -> bool !foreign method "Ok",
	ResetBoundingBox           :: (self:wxDC) !foreign method "ResetBoundingBox",
	SetAxisOrientation         :: (self:wxDC, xLeftRight:bool, yBottomUp:bool) !foreign method "SetAxisOrientation",
	SetBackground              :: (self:wxDC, brush:wxBrush) !foreign method "SetBackground",
	SetBackgroundMode          :: (self:wxDC, mode:int) !foreign method "SetBackgroundMode",
	SetBrush                   :: (self:wxDC, brush:wxBrush) !foreign method "SetBrush",
	SetClippingRegion          :: (self:wxDC, x,y:int--[[wxCoord]], width,height:int--[[wxCoord]]) !foreign method "SetClippingRegion",
	SetClippingRegion          :: (self:wxDC, region:wxRegion) !foreign method "SetClippingRegion",
	SetDeviceOrigin            :: (self:wxDC, x,y:int--[[wxCoord]]) !foreign method "SetDeviceOrigin",
	SetFont                    :: (self:wxDC, font:wxFont) !foreign method "SetFont",
	SetLayoutDirection         :: (self:wxDC, dir:wxLayoutDirection) !foreign method "SetLayoutDirection",
	SetLogicalFunction         :: (self:wxDC, function:int) !foreign method "SetLogicalFunction",
	SetMapMode                 :: (self:wxDC, unit:int) !foreign method "SetMapMode",
	SetPalette                 :: (self:wxDC, palette:wxPalette) !foreign method "SetPalette",
	SetPen                     :: (self:wxDC, pen:wxPen) !foreign method "SetPen",
	SetTextBackground          :: (self:wxDC, colour:wxColour) !foreign method "SetTextBackground",
	SetTextForeground          :: (self:wxDC, colour:wxColour) !foreign method "SetTextForeground",
	SetUserScale               :: (self:wxDC, xScale:float--[[double]], yScale:float--[[double]]) !foreign method "SetUserScale",
	StartDoc                   :: (self:wxDC, message:wxString|string) -> bool !foreign method "StartDoc",
	StartPage                  :: (self:wxDC) !foreign method "StartPage",
}

export wxMemoryDC :: !foreign struct {
	using wxDC,

	new :: () -> wxMemoryDC !foreign lua "wx.wxMemoryDC",

	SelectObject         :: (self:wxMemoryDC, bitmap:wxBitmap) !foreign method "SelectObject",
	SelectObjectAsSource :: (self:wxMemoryDC, bmp:wxBitmap) !foreign method "SelectObjectAsSource",
}

export wxWindowDC :: !foreign struct {
	using wxDC,

	new :: (window:wxWindow) -> wxWindowDC !foreign lua "wx.wxWindowDC",
}

export wxClientDC :: !foreign struct {
	using wxWindowDC,

	new :: (window:wxWindow) -> wxClientDC !foreign lua "wx.wxClientDC",
}

export wxPaintDC :: !foreign struct {
	using wxWindowDC,

	new :: (window:wxWindow) -> wxPaintDC !foreign lua "wx.wxPaintDC",
}

export wxScreenDC :: !foreign struct {
	using wxDC,

	new               :: () -> wxScreenDC !foreign lua "wx.wxScreenDC",
	StartDrawingOnTop :: (window:wxWindow) -> bool !foreign lua "wx.wxScreenDC.StartDrawingOnTop",
	StartDrawingOnTop :: (rect:wxRect=wxRect.null) -> bool !foreign lua "wx.wxScreenDC.StartDrawingOnTop",
	EndDrawingOnTop   :: () -> bool !foreign lua "wx.wxScreenDC.EndDrawingOnTop",
}

export wxBufferedDC :: !foreign struct {
	using wxMemoryDC,

	new :: () -> wxBufferedDC !foreign lua "wx.wxBufferedDC",
	new :: (dc:wxDC, area:wxSize, style:int=wxBUFFER_CLIENT_AREA) -> wxBufferedDC !foreign lua "wx.wxBufferedDC",
	new :: (dc:wxDC, buffer:wxBitmap, style:int=wxBUFFER_CLIENT_AREA) -> wxBufferedDC !foreign lua "wx.wxBufferedDC",

	Init :: (self:wxBufferedDC, dc:wxDC, area:wxSize, style:int=wxBUFFER_CLIENT_AREA) !foreign method "Init",
	Init :: (self:wxBufferedDC, dc:wxDC, buffer:wxBitmap, style:int=wxBUFFER_CLIENT_AREA) !foreign method "Init",
}

export wxBufferedPaintDC :: !foreign struct {
	using wxBufferedDC,

	new :: (window:wxWindow, style:int=wxBUFFER_CLIENT_AREA) -> wxBufferedPaintDC !foreign lua "wx.wxBufferedPaintDC",
	new :: (window:wxWindow, buffer:wxBitmap, style:int=wxBUFFER_CLIENT_AREA) -> wxBufferedPaintDC !foreign lua "wx.wxBufferedPaintDC",
}

export wxAutoBufferedPaintDC :: !foreign struct {
	using wxDC,

	new :: (window:wxWindow) -> wxAutoBufferedPaintDC !foreign lua "wx.wxAutoBufferedPaintDC",
}

export wxMirrorDC :: !foreign struct {
	using wxDC,

	new :: (dc:wxDC, mirror:bool) -> wxMirrorDC !foreign lua "wx.wxMirrorDC",
}

export wxDCClipper :: !foreign struct {
	using wxLuaUserdata,

	new :: (dc:wxDC, r:wxRect) -> wxDCClipper !foreign lua "wx.wxDCClipper",
	new :: (dc:wxDC, x,y:int--[[wxCoord]], w,h:int--[[wxCoord]]) -> wxDCClipper !foreign lua "wx.wxDCClipper",
}

export wxCaret :: !foreign struct {
	using wxLuaUserdata,

	new          :: () -> wxCaret !foreign lua "wx.wxCaret",
	new          :: (window:wxWindow, size:wxSize) -> wxCaret !foreign lua "wx.wxCaret",
	new          :: (window:wxWindow, width,height:int) -> wxCaret !foreign lua "wx.wxCaret",
	GetBlinkTime :: () -> int !foreign lua "wx.wxCaret.GetBlinkTime",
	SetBlinkTime :: (ms:int) !foreign lua "wx.wxCaret.SetBlinkTime",

	Create        :: (self:wxCaret, window:wxWindow, size:wxSize) -> bool !foreign method "Create",
	Create        :: (self:wxCaret, window:wxWindow, width,height:int) -> bool !foreign method "Create",
	GetPositionXY :: (self:wxCaret) -> (x:int, y:int) !foreign method "GetPositionXY",
	GetPosition   :: (self:wxCaret) -> wxPoint !foreign method "GetPosition",
	GetSizeWH     :: (self:wxCaret) -> (x:int, y:int) !foreign method "GetSizeWH",
	GetSize       :: (self:wxCaret) -> wxSize !foreign method "GetSize",
	GetWindow     :: (self:wxCaret) -> wxWindow !foreign method "GetWindow",
	Hide          :: (self:wxCaret) !foreign method "Hide",
	IsOk          :: (self:wxCaret) -> bool !foreign method "IsOk",
	IsVisible     :: (self:wxCaret) -> bool !foreign method "IsVisible",
	Move          :: (self:wxCaret, x,y:int) !foreign method "Move",
	Move          :: (self:wxCaret, pt:wxPoint) !foreign method "Move",
	SetSize       :: (self:wxCaret, width,height:int) !foreign method "SetSize",
	SetSize       :: (self:wxCaret, size:wxSize) !foreign method "SetSize",
	Show          :: (self:wxCaret, show:bool=true) !foreign method "Show",
}

export wxCaretSuspend :: !foreign struct {
	using wxLuaUserdata,

	new :: (win:wxWindow=wxWindow.null) -> wxCaretSuspend !foreign lua "wx.wxCaretSuspend",
}

export wxVideoMode :: !foreign struct {
	using wxLuaUserdata,

	new :: (width,height:int=0, depth:int=0, freq:int=0) -> wxVideoMode !foreign lua "wx.wxVideoMode",

	Matches   :: (self:wxVideoMode, other:wxVideoMode) -> bool !foreign method "Matches",
	GetWidth  :: (self:wxVideoMode) -> int !foreign method "GetWidth",
	GetHeight :: (self:wxVideoMode) -> int !foreign method "GetHeight",
	GetDepth  :: (self:wxVideoMode) -> int !foreign method "GetDepth",
	IsOk      :: (self:wxVideoMode) -> bool !foreign method "IsOk",
}

export wxArrayVideoModes :: !foreign struct {
	using wxLuaUserdata,

	new :: () -> wxArrayVideoModes !foreign lua "wx.wxArrayVideoModes",
	new :: (array:wxArrayVideoModes) -> wxArrayVideoModes !foreign lua "wx.wxArrayVideoModes",

	Add      :: (self:wxArrayVideoModes, vm:wxVideoMode, copies:int--[[size_t]]=1) !foreign method "Add",
	Alloc    :: (self:wxArrayVideoModes, nCount:int--[[size_t]]) !foreign method "Alloc",
	Clear    :: (self:wxArrayVideoModes) !foreign method "Clear",
	Empty    :: (self:wxArrayVideoModes) !foreign method "Empty",
	GetCount :: (self:wxArrayVideoModes) -> int !foreign method "GetCount",
	Insert   :: (self:wxArrayVideoModes, vm:wxVideoMode, nIndex:int, copies:int--[[size_t]]=1) !foreign method "Insert",
	IsEmpty  :: (self:wxArrayVideoModes) -> bool !foreign method "IsEmpty",
	Item     :: (self:wxArrayVideoModes, nIndex:int--[[size_t]]) -> wxVideoMode !foreign method "Item",
	Last     :: (self:wxArrayVideoModes) -> wxVideoMode !foreign method "Last",
	RemoveAt :: (self:wxArrayVideoModes, nIndex:int--[[size_t]], count:int--[[size_t]]=1) !foreign method "RemoveAt",
	Shrink   :: (self:wxArrayVideoModes) !foreign method "Shrink",
}

export wxDisplay :: !foreign struct {
	using wxLuaUserdata,

	new           :: (index:int--[[size_t]]=0) -> wxDisplay !foreign lua "wx.wxDisplay",
	GetCount      :: () -> int--[[size_t]] !foreign lua "wx.wxDisplay.GetCount",
	GetFromPoint  :: (pt:wxPoint) -> int !foreign lua "wx.wxDisplay.GetFromPoint",
	GetFromWindow :: (win:wxWindow) -> int !foreign lua "wx.wxDisplay.GetFromWindow",

	ChangeMode     :: (self:wxDisplay, mode:wxVideoMode=wxDefaultVideoMode) -> bool !foreign method "ChangeMode",
	GetCurrentMode :: (self:wxDisplay) -> wxVideoMode !foreign method "GetCurrentMode",
	GetGeometry    :: (self:wxDisplay) -> wxRect !foreign method "GetGeometry",
	GetClientArea  :: (self:wxDisplay) -> wxRect !foreign method "GetClientArea",
	GetModes       :: (self:wxDisplay, mode:wxVideoMode=wxDefaultVideoMode) -> wxArrayVideoModes !foreign method "GetModes",
	GetName        :: (self:wxDisplay) -> string !foreign method "GetName",
	IsOk           :: (self:wxDisplay) -> bool !foreign method "IsOk",
	IsPrimary      :: (self:wxDisplay) -> bool !foreign method "IsPrimary",
}

export wxEffects :: !foreign struct {
	using wxObject,

	new :: () -> wxEffects !foreign lua "wx.wxEffects",
	new :: (highlightColour:wxColour, lightShadow:wxColour, faceColour:wxColour, mediumShadow:wxColour, darkShadow:wxColour) -> wxEffects !foreign lua "wx.wxEffects",

	GetHighlightColour :: (self:wxEffects) -> wxColour !foreign method "GetHighlightColour",
	GetLightShadow     :: (self:wxEffects) -> wxColour !foreign method "GetLightShadow",
	GetFaceColour      :: (self:wxEffects) -> wxColour !foreign method "GetFaceColour",
	GetMediumShadow    :: (self:wxEffects) -> wxColour !foreign method "GetMediumShadow",
	GetDarkShadow      :: (self:wxEffects) -> wxColour !foreign method "GetDarkShadow",
	SetHighlightColour :: (self:wxEffects, c:wxColour) !foreign method "SetHighlightColour",
	SetLightShadow     :: (self:wxEffects, c:wxColour) !foreign method "SetLightShadow",
	SetFaceColour      :: (self:wxEffects, c:wxColour) !foreign method "SetFaceColour",
	SetMediumShadow    :: (self:wxEffects, c:wxColour) !foreign method "SetMediumShadow",
	SetDarkShadow      :: (self:wxEffects, c:wxColour) !foreign method "SetDarkShadow",
	Set                :: (self:wxEffects, highlightColour:wxColour, lightShadow:wxColour, faceColour:wxColour, mediumShadow:wxColour, darkShadow:wxColour) !foreign method "Set",
	DrawSunkenEdge     :: (self:wxEffects, dc:wxDC, rect:wxRect, borderSize:int=1) !foreign method "DrawSunkenEdge",
	TileBitmap         :: (self:wxEffects, rect:wxRect, dc:wxDC, bitmap:wxBitmap) -> bool !foreign method "TileBitmap",
}

export wxSplitterRenderParams :: !foreign struct {
	using wxLuaUserdata,

	widthSash:      int--[[wxCoord]], -- Read-only.
	border:         int--[[wxCoord]], -- Read-only.
	isHotSensitive: bool, -- Read-only.

	new :: (widthSash_:int--[[wxCoord]], border_:int--[[wxCoord]], isSens_:bool) -> wxSplitterRenderParams !foreign lua "wx.wxSplitterRenderParams",
}

export wxHeaderButtonParams :: !foreign struct {
	using wxLuaUserdata,

	null: wxHeaderButtonParams : !foreign lua "wx.NULL",

	m_arrowColour:     wxColour,
	m_selectionColour: wxColour,
	m_labelText:       string,
	m_labelFont:       wxFont,
	m_labelColour:     wxColour,
	m_labelBitmap:     wxBitmap,
	m_labelAlignment:  int,

	new :: () -> wxHeaderButtonParams !foreign lua "wx.wxHeaderButtonParams",
}

export wxRendererVersion :: !foreign struct {
	using wxLuaUserdata,

	version: int, -- Read-only.
	age:     int, -- Read-only.

	Current_Version: wxEnum : !foreign lua "wx.wxRendererVersion.Current_Version",
	Current_Age:     wxEnum : !foreign lua "wx.wxRendererVersion.Current_Age",

	new          :: (version_:int, age_:int) -> wxRendererVersion !foreign lua "wx.wxRendererVersion",
	IsCompatible :: (ver:wxRendererVersion) -> bool !foreign lua "wx.wxRendererVersion.IsCompatible",
}

export wxRendererNative :: !foreign struct {
	using wxLuaUserdata,

	Get        :: () -> wxRendererNative !foreign lua "wx.wxRendererNative.Get",
	GetGeneric :: () -> wxRendererNative !foreign lua "wx.wxRendererNative.GetGeneric",
	GetDefault :: () -> wxRendererNative !foreign lua "wx.wxRendererNative.GetDefault",
	Load       :: (name:wxString|string) -> wxRendererNative !foreign lua "wx.wxRendererNative.Load",
	Set        :: (renderer:wxRendererNative) -> wxRendererNative !foreign lua "wx.wxRendererNative.Set",

	DrawHeaderButton         :: (self:wxRendererNative, win:wxWindow, dc:wxDC, rect:wxRect, flags:int=0, sortArrow:wxHeaderSortIconType=wxHDR_SORT_ICON_NONE, params:wxHeaderButtonParams=wxHeaderButtonParams.null) -> int !foreign method "DrawHeaderButton",
	DrawHeaderButtonContents :: (self:wxRendererNative, win:wxWindow, dc:wxDC, rect:wxRect, flags:int=0, sortArrow:wxHeaderSortIconType=wxHDR_SORT_ICON_NONE, params:wxHeaderButtonParams=wxHeaderButtonParams.null) -> int !foreign method "DrawHeaderButtonContents",
	GetHeaderButtonHeight    :: (self:wxRendererNative, win:wxWindow) -> int !foreign method "GetHeaderButtonHeight",
	DrawTreeItemButton       :: (self:wxRendererNative, win:wxWindow, dc:wxDC, rect:wxRect, flags:int=0) !foreign method "DrawTreeItemButton",
	DrawSplitterBorder       :: (self:wxRendererNative, win:wxWindow, dc:wxDC, rect:wxRect, flags:int=0) !foreign method "DrawSplitterBorder",
	DrawSplitterSash         :: (self:wxRendererNative, win:wxWindow, dc:wxDC, size:wxSize, position:int--[[wxCoord]], orient:wxOrientation, flags:int=0) !foreign method "DrawSplitterSash",
	DrawComboBoxDropButton   :: (self:wxRendererNative, win:wxWindow, dc:wxDC, rect:wxRect, flags:int=0) !foreign method "DrawComboBoxDropButton",
	DrawDropArrow            :: (self:wxRendererNative, win:wxWindow, dc:wxDC, rect:wxRect, flags:int=0) !foreign method "DrawDropArrow",
	DrawCheckBox             :: (self:wxRendererNative, win:wxWindow, dc:wxDC, rect:wxRect, flags:int=0) !foreign method "DrawCheckBox",
	DrawPushButton           :: (self:wxRendererNative, win:wxWindow, dc:wxDC, rect:wxRect, flags:int=0) !foreign method "DrawPushButton",
	DrawItemSelectionRect    :: (self:wxRendererNative, win:wxWindow, dc:wxDC, rect:wxRect, flags:int=0) !foreign method "DrawItemSelectionRect",
	GetSplitterParams        :: (self:wxRendererNative, win:wxWindow) -> wxSplitterRenderParams !foreign method "GetSplitterParams",
	GetVersion               :: (self:wxRendererNative) -> wxRendererVersion !foreign method "GetVersion",
}
