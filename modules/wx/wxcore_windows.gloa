--[[============================================================
--=
--=  wxLua/wxWidget bindings for Gl√≥a
--=  Interface source: wxcore_windows.i
--=
--=  Tested with:
--=  - wxLua 2.8.7.0 / wxWidgets 2.8.8
--=
--=  Note: Most bindings have not been tested yet!
--=
--============================================================]]

!import "wx/common"
!import "wx/wxcore_gdi"
!import "wx/wxcore_event"
!import "wx/wxcore_defsutils"
!import "wx/wxcore_menutool"
!import "wx/wxcore_sizer"
!import "wx/wxcore_clipdrag"
!import "wx/wxcore_core"
!import "wx/wxbase_data"
!import "wx/wxcore_controls"

export wxNOT_FOUND :: -1 -- Is this available in foreign wxLua?

export wxSIMPLE_BORDER:                          int : !foreign lua "wx.wxSIMPLE_BORDER"
export wxDOUBLE_BORDER:                          int : !foreign lua "wx.wxDOUBLE_BORDER"
export wxSUNKEN_BORDER:                          int : !foreign lua "wx.wxSUNKEN_BORDER"
export wxRAISED_BORDER:                          int : !foreign lua "wx.wxRAISED_BORDER"
export wxSTATIC_BORDER:                          int : !foreign lua "wx.wxSTATIC_BORDER"
export wxTRANSPARENT_WINDOW:                     int : !foreign lua "wx.wxTRANSPARENT_WINDOW"
export wxNO_3D:                                  int : !foreign lua "wx.wxNO_3D"
export wxTAB_TRAVERSAL:                          int : !foreign lua "wx.wxTAB_TRAVERSAL"
export wxWANTS_CHARS:                            int : !foreign lua "wx.wxWANTS_CHARS"
export wxVSCROLL:                                int : !foreign lua "wx.wxVSCROLL"
export wxHSCROLL:                                int : !foreign lua "wx.wxHSCROLL"
export wxALWAYS_SHOW_SB:                         int : !foreign lua "wx.wxALWAYS_SHOW_SB"
export wxCLIP_CHILDREN:                          int : !foreign lua "wx.wxCLIP_CHILDREN"
export wxNO_FULL_REPAINT_ON_RESIZE:              int : !foreign lua "wx.wxNO_FULL_REPAINT_ON_RESIZE"
export wxFULL_REPAINT_ON_RESIZE:                 int : !foreign lua "wx.wxFULL_REPAINT_ON_RESIZE"
export wxWS_EX_VALIDATE_RECURSIVELY:             int : !foreign lua "wx.wxWS_EX_VALIDATE_RECURSIVELY"
export wxWS_EX_BLOCK_EVENTS:                     int : !foreign lua "wx.wxWS_EX_BLOCK_EVENTS"
export wxWS_EX_TRANSIENT:                        int : !foreign lua "wx.wxWS_EX_TRANSIENT"
export wxWS_EX_PROCESS_IDLE:                     int : !foreign lua "wx.wxWS_EX_PROCESS_IDLE"
export wxWS_EX_PROCESS_UI_UPDATES:               int : !foreign lua "wx.wxWS_EX_PROCESS_UI_UPDATES"
export wxBK_DEFAULT:                             int : !foreign lua "wx.wxBK_DEFAULT"
export wxBK_TOP:                                 int : !foreign lua "wx.wxBK_TOP"
export wxBK_LEFT:                                int : !foreign lua "wx.wxBK_LEFT"
export wxBK_RIGHT:                               int : !foreign lua "wx.wxBK_RIGHT"
export wxBK_BOTTOM:                              int : !foreign lua "wx.wxBK_BOTTOM"
export wxBK_ALIGN_MASK:                          int : !foreign lua "wx.wxBK_ALIGN_MASK"
export wxNB_TOP:                                 int : !foreign lua "wx.wxNB_TOP"
export wxNB_LEFT:                                int : !foreign lua "wx.wxNB_LEFT"
export wxNB_RIGHT:                               int : !foreign lua "wx.wxNB_RIGHT"
export wxNB_BOTTOM:                              int : !foreign lua "wx.wxNB_BOTTOM"
export wxNB_FIXEDWIDTH:                          int : !foreign lua "wx.wxNB_FIXEDWIDTH"
export wxNB_MULTILINE:                           int : !foreign lua "wx.wxNB_MULTILINE"
export wxNB_NOPAGETHEME:                         int : !foreign lua "wx.wxNB_NOPAGETHEME"
export wxLB_DEFAULT:                             int : !foreign lua "wx.wxLB_DEFAULT"
export wxLB_TOP:                                 int : !foreign lua "wx.wxLB_TOP"
export wxLB_BOTTOM:                              int : !foreign lua "wx.wxLB_BOTTOM"
export wxLB_LEFT:                                int : !foreign lua "wx.wxLB_LEFT"
export wxLB_RIGHT:                               int : !foreign lua "wx.wxLB_RIGHT"
export wxLB_ALIGN_MASK:                          int : !foreign lua "wx.wxLB_ALIGN_MASK"
export wxCHB_DEFAULT:                            int : !foreign lua "wx.wxCHB_DEFAULT"
export wxCHB_TOP:                                int : !foreign lua "wx.wxCHB_TOP"
export wxCHB_BOTTOM:                             int : !foreign lua "wx.wxCHB_BOTTOM"
export wxCHB_LEFT:                               int : !foreign lua "wx.wxCHB_LEFT"
export wxCHB_RIGHT:                              int : !foreign lua "wx.wxCHB_RIGHT"
export wxCHB_ALIGN_MASK:                         int : !foreign lua "wx.wxCHB_ALIGN_MASK"
export wxTC_RIGHTJUSTIFY:                        int : !foreign lua "wx.wxTC_RIGHTJUSTIFY"
export wxTC_FIXEDWIDTH:                          int : !foreign lua "wx.wxTC_FIXEDWIDTH"
export wxTC_TOP:                                 int : !foreign lua "wx.wxTC_TOP"
export wxTC_LEFT:                                int : !foreign lua "wx.wxTC_LEFT"
export wxTC_RIGHT:                               int : !foreign lua "wx.wxTC_RIGHT"
export wxTC_BOTTOM:                              int : !foreign lua "wx.wxTC_BOTTOM"
export wxTC_MULTILINE:                           int : !foreign lua "wx.wxTC_MULTILINE"
export wxTC_OWNERDRAW:                           int : !foreign lua "wx.wxTC_OWNERDRAW"
export wxSP_NOBORDER:                            int : !foreign lua "wx.wxSP_NOBORDER"
export wxSP_NOSASH:                              int : !foreign lua "wx.wxSP_NOSASH"
export wxSP_BORDER:                              int : !foreign lua "wx.wxSP_BORDER"
export wxSP_PERMIT_UNSPLIT:                      int : !foreign lua "wx.wxSP_PERMIT_UNSPLIT"
export wxSP_LIVE_UPDATE:                         int : !foreign lua "wx.wxSP_LIVE_UPDATE"
export wxSP_3DSASH:                              int : !foreign lua "wx.wxSP_3DSASH"
export wxSP_3DBORDER:                            int : !foreign lua "wx.wxSP_3DBORDER"
export wxSP_FULLSASH:                            int : !foreign lua "wx.wxSP_FULLSASH"
export wxSP_3D:                                  int : !foreign lua "wx.wxSP_3D"
export wxSP_NO_XP_THEME:                         int : !foreign lua "wx.wxSP_NO_XP_THEME"
export wxSP_SASH_AQUA:                           int : !foreign lua "wx.wxSP_SASH_AQUA"
export wxCP_DEFAULT_STYLE:                       int : !foreign lua "wx.wxCP_DEFAULT_STYLE"
export wxST_NO_AUTORESIZE:                       int : !foreign lua "wx.wxST_NO_AUTORESIZE"
export wxST_DOTS_MIDDLE:                         int : !foreign lua "wx.wxST_DOTS_MIDDLE"
export wxST_DOTS_END:                            int : !foreign lua "wx.wxST_DOTS_END"
export wxLI_HORIZONTAL:                          int : !foreign lua "wx.wxLI_HORIZONTAL"
export wxLI_VERTICAL:                            int : !foreign lua "wx.wxLI_VERTICAL"
export wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED:      wxEventType : !foreign lua "wx.wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED" -- EVT_NOTEBOOK_PAGE_CHANGED(winid, fn)
export wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING:     wxEventType : !foreign lua "wx.wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING" -- EVT_NOTEBOOK_PAGE_CHANGING(winid, fn)
export wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED:      wxEventType : !foreign lua "wx.wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED" -- EVT_LISTBOOK_PAGE_CHANGED(winid, fn)
export wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING:     wxEventType : !foreign lua "wx.wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING" -- EVT_LISTBOOK_PAGE_CHANGING(winid, fn)
export wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED:    wxEventType : !foreign lua "wx.wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED" -- EVT_CHOICEBOOK_PAGE_CHANGED(winid, fn)
export wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING:   wxEventType : !foreign lua "wx.wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING" -- EVT_CHOICEBOOK_PAGE_CHANGING(winid, fn)
export wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED:      wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED" -- EVT_TREEBOOK_PAGE_CHANGED(winid, fn)
export wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING:     wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING" -- EVT_TREEBOOK_PAGE_CHANGING(winid, fn)
export wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED:    wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED" -- EVT_TREEBOOK_NODE_COLLAPSED(winid, fn)
export wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED:     wxEventType : !foreign lua "wx.wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED" -- EVT_TREEBOOK_NODE_EXPANDED(winid, fn)
export wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED:      wxEventType : !foreign lua "wx.wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED" -- EVT_TOOLBOOK_PAGE_CHANGED(winid, fn)
export wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING:     wxEventType : !foreign lua "wx.wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING" -- EVT_TOOLBOOK_PAGE_CHANGING(winid, fn)
export wxEVT_COMMAND_TAB_SEL_CHANGED:            wxEventType : !foreign lua "wx.wxEVT_COMMAND_TAB_SEL_CHANGED" -- EVT_TAB_SEL_CHANGED(id, fn)
export wxEVT_COMMAND_TAB_SEL_CHANGING:           wxEventType : !foreign lua "wx.wxEVT_COMMAND_TAB_SEL_CHANGING" -- EVT_TAB_SEL_CHANGING(id, fn)
export wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING: wxEventType : !foreign lua "wx.wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING" -- EVT_SPLITTER_SASH_POS_CHANGING(id, fn)
export wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED:  wxEventType : !foreign lua "wx.wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED" -- EVT_SPLITTER_SASH_POS_CHANGED(id, fn)
export wxEVT_COMMAND_SPLITTER_DOUBLECLICKED:     wxEventType : !foreign lua "wx.wxEVT_COMMAND_SPLITTER_DOUBLECLICKED" -- EVT_SPLITTER_DCLICK(id, fn)
export wxEVT_COMMAND_SPLITTER_UNSPLIT:           wxEventType : !foreign lua "wx.wxEVT_COMMAND_SPLITTER_UNSPLIT" -- EVT_SPLITTER_UNSPLIT(id, fn)
export wxEVT_COMMAND_COLLPANE_CHANGED:           wxEventType : !foreign lua "wx.wxEVT_COMMAND_COLLPANE_CHANGED" -- EVT_COLLAPSIBLEPANE_CHANGED(id, fn)

export wxWindowVariant :: wxEnum
export wxWINDOW_VARIANT_NORMAL: wxWindowVariant : !foreign lua "wx.wxWINDOW_VARIANT_NORMAL"
export wxWINDOW_VARIANT_SMALL:  wxWindowVariant : !foreign lua "wx.wxWINDOW_VARIANT_SMALL"
export wxWINDOW_VARIANT_MINI:   wxWindowVariant : !foreign lua "wx.wxWINDOW_VARIANT_MINI"
export wxWINDOW_VARIANT_LARGE:  wxWindowVariant : !foreign lua "wx.wxWINDOW_VARIANT_LARGE"
export wxWINDOW_VARIANT_MAX:    wxWindowVariant : !foreign lua "wx.wxWINDOW_VARIANT_MAX"

export wxUpdateUI :: wxEnum
export wxUPDATE_UI_NONE:     wxUpdateUI : !foreign lua "wx.wxUPDATE_UI_NONE"
export wxUPDATE_UI_RECURSE:  wxUpdateUI : !foreign lua "wx.wxUPDATE_UI_RECURSE"
export wxUPDATE_UI_FROMIDLE: wxUpdateUI : !foreign lua "wx.wxUPDATE_UI_FROMIDLE"

export wxBK_HITTEST_NOWHERE: wxEnum : !foreign lua "wx.wxBK_HITTEST_NOWHERE"
export wxBK_HITTEST_ONICON:  wxEnum : !foreign lua "wx.wxBK_HITTEST_ONICON"
export wxBK_HITTEST_ONLABEL: wxEnum : !foreign lua "wx.wxBK_HITTEST_ONLABEL"
export wxBK_HITTEST_ONITEM:  wxEnum : !foreign lua "wx.wxBK_HITTEST_ONITEM"
export wxBK_HITTEST_ONPAGE:  wxEnum : !foreign lua "wx.wxBK_HITTEST_ONPAGE"

export wxNB_HITTEST_NOWHERE: wxEnum : !foreign lua "wx.wxNB_HITTEST_NOWHERE"
export wxNB_HITTEST_ONICON:  wxEnum : !foreign lua "wx.wxNB_HITTEST_ONICON"
export wxNB_HITTEST_ONLABEL: wxEnum : !foreign lua "wx.wxNB_HITTEST_ONLABEL"
export wxNB_HITTEST_ONITEM:  wxEnum : !foreign lua "wx.wxNB_HITTEST_ONITEM"

export wxToolTip :: !foreign struct {
	using wxObject,

	!call    :: (tip:wxString|string) -> wxToolTip !foreign lua "wx.wxToolTip",
	Enable   :: (flag:bool) !foreign lua "wx.wxToolTip.Enable",
	SetDelay :: (milliseconds:int--[[long]]) !foreign lua "wx.wxToolTip.SetDelay",

	SetTip    :: (self:wxToolTip, tip:wxString|string) !foreign method "SetTip",
	GetTip    :: (self:wxToolTip) -> string !foreign method "GetTip",
	GetWindow :: (self:wxToolTip) -> wxWindow !foreign method "GetWindow",
}

export wxWindowDisabler :: !foreign struct {
	using wxLuaUserdata,

	!call :: (winToSkip:wxWindow=wxWindow.null) -> wxWindowDisabler !foreign lua "wx.wxWindowDisabler",
}

export wxWindowUpdateLocker :: !foreign struct {
	using wxLuaUserdata,

	!call :: (winToLock:wxWindow=wxWindow.null) -> wxWindowUpdateLocker !foreign lua "wx.wxWindowUpdateLocker",
}

export wxVisualAttributes :: !foreign struct {
	using wxLuaUserdata,

	font:  wxFont,
	colFg: wxColour,
	colBg: wxColour,
}

export wxWindow :: !foreign struct {
	using wxEvtHandler,

	null: wxWindow : !foreign lua "wx.NULL",

	!call             :: () -> wxWindow !foreign lua "wx.wxWindow",
	!call             :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxWindow") -> wxWindow !foreign lua "wx.wxWindow",
	FindFocus         :: () -> wxWindow !foreign lua "wx.wxWindow.FindFocus",
	FindWindowById    :: (id:int--[[long]], parent:wxWindow=wxWindow.null) -> wxWindow !foreign lua "wx.wxWindow.FindWindowById",
	FindWindowByName  :: (name:wxString|string, parent:wxWindow=wxWindow.null) -> wxWindow !foreign lua "wx.wxWindow.FindWindowByName",
	FindWindowByLabel :: (label:wxString|string, parent:wxWindow=wxWindow.null) -> wxWindow !foreign lua "wx.wxWindow.FindWindowByLabel",
	GetCapture        :: () -> wxWindow !foreign lua "wx.wxWindow.GetCapture",

	Create                   :: (self:wxWindow, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxWindow") -> bool !foreign method "Create",
	AddChild                 :: (self:wxWindow, child:wxWindow) !foreign method "AddChild",
	CacheBestSize            :: (self:wxWindow, size:wxSize) !foreign method "CacheBestSize",
	CaptureMouse             :: (self:wxWindow) !foreign method "CaptureMouse",
	Center                   :: (self:wxWindow, direction:int=wxBOTH) !foreign method "Center",
	CenterOnParent           :: (self:wxWindow, direction:int=wxBOTH) !foreign method "CenterOnParent",
	Centre                   :: (self:wxWindow, direction:int=wxBOTH) !foreign method "Centre",
	CentreOnParent           :: (self:wxWindow, direction:int=wxBOTH) !foreign method "CentreOnParent",
	ClearBackground          :: (self:wxWindow) !foreign method "ClearBackground",
	ClientToScreen           :: (self:wxWindow, x,y:int) -> (x:int, y:int) !foreign method "ClientToScreen",
	ClientToScreen           :: (self:wxWindow, pt:wxPoint) -> wxPoint !foreign method "ClientToScreen",
	Close                    :: (self:wxWindow, force:bool=false) -> bool !foreign method "Close",
	ConvertDialogToPixels    :: (self:wxWindow, pt:wxPoint) -> wxPoint !foreign method "ConvertDialogToPixels",
	ConvertDialogToPixels    :: (self:wxWindow, sz:wxSize) -> wxSize !foreign method "ConvertDialogToPixels",
	ConvertPixelsToDialog    :: (self:wxWindow, pt:wxPoint) -> wxPoint !foreign method "ConvertPixelsToDialog",
	ConvertPixelsToDialog    :: (self:wxWindow, sz:wxSize) -> wxSize !foreign method "ConvertPixelsToDialog",
	Destroy                  :: (self:wxWindow) -> bool !foreign method "Destroy",
	DestroyChildren          :: (self:wxWindow) !foreign method "DestroyChildren",
	Disable                  :: (self:wxWindow) -> bool !foreign method "Disable",
	DragAcceptFiles          :: (self:wxWindow, accept:bool) !foreign method "DragAcceptFiles",
	Enable                   :: (self:wxWindow, enable:bool) !foreign method "Enable",
	FindWindow               :: (self:wxWindow, id:int--[[long]]) -> wxWindow !foreign method "FindWindow",
	FindWindow               :: (self:wxWindow, name:wxString|string) -> wxWindow !foreign method "FindWindow",
	Fit                      :: (self:wxWindow) !foreign method "Fit",
	FitInside                :: (self:wxWindow) !foreign method "FitInside",
	Freeze                   :: (self:wxWindow) !foreign method "Freeze",
	GetAcceleratorTable      :: (self:wxWindow) -> wxAcceleratorTable !foreign method "GetAcceleratorTable",
	GetBackgroundColour      :: (self:wxWindow) -> wxColour !foreign method "GetBackgroundColour",
	GetBackgroundStyle       :: (self:wxWindow) -> wxBackgroundStyle !foreign method "GetBackgroundStyle",
	GetBestFittingSize       :: (self:wxWindow) -> wxSize !foreign method "GetBestFittingSize",
	GetBestSize              :: (self:wxWindow) -> wxSize !foreign method "GetBestSize",
	GetCaret                 :: (self:wxWindow) -> wxCaret !foreign method "GetCaret",
	GetCharHeight            :: (self:wxWindow) -> int !foreign method "GetCharHeight",
	GetCharWidth             :: (self:wxWindow) -> int !foreign method "GetCharWidth",
	GetChildren              :: (self:wxWindow) -> wxWindowList !foreign method "GetChildren",
	GetClientSizeWH          :: (self:wxWindow) -> (width:int, height:int) !foreign method "GetClientSizeWH",
	GetClientSize            :: (self:wxWindow) -> wxSize !foreign method "GetClientSize",
	GetContainingSizer       :: (self:wxWindow) -> wxSizer !foreign method "GetContainingSizer",
	GetCursor                :: (self:wxWindow) -> wxCursor !foreign method "GetCursor",
	GetDefaultAttributes     :: (self:wxWindow) -> wxVisualAttributes !foreign method "GetDefaultAttributes",
	GetDropTarget            :: (self:wxWindow) -> wxDropTarget !foreign method "GetDropTarget",
	GetEventHandler          :: (self:wxWindow) -> wxEvtHandler !foreign method "GetEventHandler",
	GetExtraStyle            :: (self:wxWindow) -> int--[[long]] !foreign method "GetExtraStyle",
	GetFont                  :: (self:wxWindow) -> wxFont !foreign method "GetFont",
	GetForegroundColour      :: (self:wxWindow) -> wxColour !foreign method "GetForegroundColour",
	GetGrandParent           :: (self:wxWindow) -> wxWindow !foreign method "GetGrandParent",
	GetHandle                :: (self:wxWindow) -> wxLuaUserdata--[[void*]] !foreign method "GetHandle",
	GetHelpText              :: (self:wxWindow) -> string !foreign method "GetHelpText",
	GetId                    :: (self:wxWindow) -> int !foreign method "GetId",
	GetLabel                 :: (self:wxWindow) -> string !foreign method "GetLabel",
	GetMaxSize               :: (self:wxWindow) -> wxSize !foreign method "GetMaxSize",
	GetMinSize               :: (self:wxWindow) -> wxSize !foreign method "GetMinSize",
	GetName                  :: (self:wxWindow) -> string !foreign method "GetName",
	GetParent                :: (self:wxWindow) -> wxWindow !foreign method "GetParent",
	GetPositionXY            :: (self:wxWindow) -> (x:int, y:int) !foreign method "GetPositionXY",
	GetPosition              :: (self:wxWindow) -> wxPoint !foreign method "GetPosition",
	GetRect                  :: (self:wxWindow) -> wxRect !foreign method "GetRect",
	GetScreenPositionXY      :: (self:wxWindow) -> (x:int, y:int) !foreign method "GetScreenPositionXY",
	GetScreenPosition        :: (self:wxWindow) -> wxPoint !foreign method "GetScreenPosition",
	GetScreenRect            :: (self:wxWindow) -> wxRect !foreign method "GetScreenRect",
	GetScrollPos             :: (self:wxWindow, orientation:int) -> int !foreign method "GetScrollPos",
	GetScrollRange           :: (self:wxWindow, orientation:int) -> int !foreign method "GetScrollRange",
	GetScrollThumb           :: (self:wxWindow, orientation:int) -> int !foreign method "GetScrollThumb",
	GetSize                  :: (self:wxWindow) -> wxSize !foreign method "GetSize",
	GetSizeWH                :: (self:wxWindow) -> (width:int, height:int) !foreign method "GetSizeWH",
	GetSizer                 :: (self:wxWindow) -> wxSizer !foreign method "GetSizer",
	GetTextExtent            :: (self:wxWindow, str:wxString|string, font:wxFont=wxFont.null) -> (x:int, y:int, descent:int, externalLeading:int) !foreign method "GetTextExtent",
	GetToolTip               :: (self:wxWindow) -> wxToolTip !foreign method "GetToolTip",
	GetUpdateRegion          :: (self:wxWindow) -> wxRegion !foreign method "GetUpdateRegion",
	GetValidator             :: (self:wxWindow) -> wxValidator !foreign method "GetValidator",
	GetVirtualSizeWH         :: (self:wxWindow) -> (width:int, height:int) !foreign method "GetVirtualSizeWH",
	GetVirtualSize           :: (self:wxWindow) -> wxSize !foreign method "GetVirtualSize",
	GetWindowStyleFlag       :: (self:wxWindow) -> int--[[long]] !foreign method "GetWindowStyleFlag",
	GetWindowVariant         :: (self:wxWindow) -> wxWindowVariant !foreign method "GetWindowVariant",
	HasCapture               :: (self:wxWindow) -> bool !foreign method "HasCapture",
	HasScrollbar             :: (self:wxWindow, orient:int) -> bool !foreign method "HasScrollbar",
	HasTransparentBackground :: (self:wxWindow) -> bool !foreign method "HasTransparentBackground",
	Hide                     :: (self:wxWindow) -> bool !foreign method "Hide",
	InheritAttributes        :: (self:wxWindow) !foreign method "InheritAttributes",
	InitDialog               :: (self:wxWindow) !foreign method "InitDialog",
	InvalidateBestSize       :: (self:wxWindow) !foreign method "InvalidateBestSize",
	IsEnabled                :: (self:wxWindow) -> bool !foreign method "IsEnabled",
	IsExposed                :: (self:wxWindow, x,y:int) -> bool !foreign method "IsExposed",
	IsExposed                :: (self:wxWindow, pt:wxPoint) -> bool !foreign method "IsExposed",
	IsExposed                :: (self:wxWindow, x,y:int, w,h:int) -> bool !foreign method "IsExposed",
	IsExposed                :: (self:wxWindow, rect:wxRect) -> bool !foreign method "IsExposed",
	IsRetained               :: (self:wxWindow) -> bool !foreign method "IsRetained",
	IsShown                  :: (self:wxWindow) -> bool !foreign method "IsShown",
	IsTopLevel               :: (self:wxWindow) -> bool !foreign method "IsTopLevel",
	Layout                   :: (self:wxWindow) !foreign method "Layout",
	Lower                    :: (self:wxWindow) !foreign method "Lower",
	MakeModal                :: (self:wxWindow, flag:bool) !foreign method "MakeModal",
	Move                     :: (self:wxWindow, x,y:int) !foreign method "Move",
	Move                     :: (self:wxWindow, pt:wxPoint) !foreign method "Move",
	MoveAfterInTabOrder      :: (self:wxWindow, win:wxWindow) !foreign method "MoveAfterInTabOrder",
	MoveBeforeInTabOrder     :: (self:wxWindow, win:wxWindow) !foreign method "MoveBeforeInTabOrder",
	Navigate                 :: (self:wxWindow, flags:int=wxNavigationKeyEvent.IsForward) -> bool !foreign method "Navigate",
	PopEventHandler          :: (self:wxWindow, deleteHandler:bool=false) -> wxEvtHandler !foreign method "PopEventHandler",
	PopupMenu                :: (self:wxWindow, menu:wxMenu, pos:wxPoint=wxDefaultPosition) -> bool !foreign method "PopupMenu",
	PopupMenu                :: (self:wxWindow, menu:wxMenu, x,y:int) -> bool !foreign method "PopupMenu",
	PushEventHandler         :: (self:wxWindow, handler:wxEvtHandler) !foreign method "PushEventHandler",
	Raise                    :: (self:wxWindow) !foreign method "Raise",
	Refresh                  :: (self:wxWindow, eraseBackground:bool=true, rect:wxRect=wxRect.null) !foreign method "Refresh",
	ReleaseMouse             :: (self:wxWindow) !foreign method "ReleaseMouse",
	RemoveChild              :: (self:wxWindow, child:wxWindow) !foreign method "RemoveChild",
	RemoveEventHandler       :: (self:wxWindow, handler:wxEvtHandler) -> bool !foreign method "RemoveEventHandler",
	Reparent                 :: (self:wxWindow, newParent:wxWindow) -> bool !foreign method "Reparent",
	ScreenToClient           :: (self:wxWindow, pt:wxPoint) -> wxPoint !foreign method "ScreenToClient",
	ScreenToClient           :: (self:wxWindow, x,y:int) -> (x:int, y:int) !foreign method "ScreenToClient",
	ScrollLines              :: (self:wxWindow, lines:int) -> bool !foreign method "ScrollLines",
	ScrollPages              :: (self:wxWindow, pages:int) -> bool !foreign method "ScrollPages",
	ScrollWindow             :: (self:wxWindow, dx,dy:int, rect:wxRect=wxRect.null) !foreign method "ScrollWindow",
	SetAcceleratorTable      :: (self:wxWindow, accel:wxAcceleratorTable) !foreign method "SetAcceleratorTable",
	SetAutoLayout            :: (self:wxWindow, autoLayout:bool) !foreign method "SetAutoLayout",
	SetBackgroundColour      :: (self:wxWindow, colour:wxColour) !foreign method "SetBackgroundColour",
	SetBackgroundStyle       :: (self:wxWindow, style:wxBackgroundStyle) !foreign method "SetBackgroundStyle",
	SetCaret                 :: (self:wxWindow, caret:wxCaret) !foreign method "SetCaret",
	SetClientSize            :: (self:wxWindow, size:wxSize) !foreign method "SetClientSize",
	SetClientSize            :: (self:wxWindow, width,height:int) !foreign method "SetClientSize",
	SetContainingSizer       :: (self:wxWindow, sizer:wxSizer) !foreign method "SetContainingSizer",
	SetCursor                :: (self:wxWindow, cursor:wxCursor) !foreign method "SetCursor",
	SetInitialSize           :: (self:wxWindow, size:wxSize=wxDefaultSize) !foreign method "SetInitialSize",
	SetMaxSize               :: (self:wxWindow, size:wxSize) !foreign method "SetMaxSize",
	SetMinSize               :: (self:wxWindow, size:wxSize) !foreign method "SetMinSize",
	SetOwnBackgroundColour   :: (self:wxWindow, colour:wxColour) !foreign method "SetOwnBackgroundColour",
	SetOwnFont               :: (self:wxWindow, font:wxFont) !foreign method "SetOwnFont",
	SetOwnForegroundColour   :: (self:wxWindow, colour:wxColour) !foreign method "SetOwnForegroundColour",
	SetDropTarget            :: (self:wxWindow, target:wxDropTarget) !foreign method "SetDropTarget",
	SetEventHandler          :: (self:wxWindow, handler:wxEvtHandler) !foreign method "SetEventHandler",
	SetExtraStyle            :: (self:wxWindow, exStyle:int--[[long]]) !foreign method "SetExtraStyle",
	SetFocus                 :: (self:wxWindow) !foreign method "SetFocus",
	SetFont                  :: (self:wxWindow, font:wxFont) !foreign method "SetFont",
	SetForegroundColour      :: (self:wxWindow, colour:wxColour) !foreign method "SetForegroundColour",
	SetHelpText              :: (self:wxWindow, helpText:wxString|string) !foreign method "SetHelpText",
	SetId                    :: (self:wxWindow, id:int) !foreign method "SetId",
	SetLabel                 :: (self:wxWindow, label:wxString|string) !foreign method "SetLabel",
	SetName                  :: (self:wxWindow, name:wxString|string) !foreign method "SetName",
	SetScrollbar             :: (self:wxWindow, orientation:int, position:int, thumbSize:int, range:int, refresh:bool=true) !foreign method "SetScrollbar",
	SetScrollPos             :: (self:wxWindow, orientation:int, pos:int, refresh:bool=true) !foreign method "SetScrollPos",
	SetSize                  :: (self:wxWindow, x,y:int, width,height:int, sizeFlags:int=wxSIZE_AUTO) !foreign method "SetSize",
	SetSize                  :: (self:wxWindow, width,height:int) !foreign method "SetSize",
	SetSize                  :: (self:wxWindow, size:wxSize) !foreign method "SetSize",
	SetSize                  :: (self:wxWindow, rect:wxRect) !foreign method "SetSize",
	SetSizeHints             :: (self:wxWindow, minW:int, minH:int, maxW:int=-1, maxH:int=-1, incW:int=-1, incH:int=-1) !foreign method "SetSizeHints",
	SetSizeHints             :: (self:wxWindow, minSize:wxSize, maxSize:wxSize=wxDefaultSize, incSize:wxSize=wxDefaultSize) !foreign method "SetSizeHints",
	SetSizer                 :: (self:wxWindow, sizer:wxSizer, deleteOld:bool=true) !foreign method "SetSizer",
	SetSizerAndFit           :: (self:wxWindow, sizer:wxSizer, deleteOld:bool=true) !foreign method "SetSizerAndFit",
	SetThemeEnabled          :: (self:wxWindow, enable:bool) !foreign method "SetThemeEnabled",
	SetToolTip               :: (self:wxWindow, tip:wxString|string) !foreign method "SetToolTip",
	SetToolTip               :: (self:wxWindow, tip:wxToolTip) !foreign method "SetToolTip",
	SetValidator             :: (self:wxWindow, validator:wxValidator) !foreign method "SetValidator",
	SetVirtualSize           :: (self:wxWindow, width,height:int) !foreign method "SetVirtualSize",
	SetVirtualSize           :: (self:wxWindow, size:wxSize) !foreign method "SetVirtualSize",
	SetVirtualSizeHints      :: (self:wxWindow, minW:int, minH:int, maxW:int=-1, maxH:int=-1) !foreign method "SetVirtualSizeHints",
	SetVirtualSizeHints      :: (self:wxWindow, minSize:wxSize=wxDefaultSize, maxSize:wxSize=wxDefaultSize) !foreign method "SetVirtualSizeHints",
	SetWindowStyle           :: (self:wxWindow, style:int--[[long]]) !foreign method "SetWindowStyle",
	SetWindowStyleFlag       :: (self:wxWindow, style:int--[[long]]) !foreign method "SetWindowStyleFlag",
	SetWindowVariant         :: (self:wxWindow, variant:wxWindowVariant) !foreign method "SetWindowVariant",
	ShouldInheritColours     :: (self:wxWindow) -> bool !foreign method "ShouldInheritColours",
	Show                     :: (self:wxWindow, show:bool=true) -> bool !foreign method "Show",
	Thaw                     :: (self:wxWindow) !foreign method "Thaw",
	TransferDataFromWindow   :: (self:wxWindow) -> bool !foreign method "TransferDataFromWindow",
	TransferDataToWindow     :: (self:wxWindow) -> bool !foreign method "TransferDataToWindow",
	Update                   :: (self:wxWindow) !foreign method "Update",
	UpdateWindowUI           :: (self:wxWindow, flags:int--[[long]]=wxUPDATE_UI_NONE) !foreign method "UpdateWindowUI",
	Validate                 :: (self:wxWindow) -> bool !foreign method "Validate",
	WarpPointer              :: (self:wxWindow, x,y:int) !foreign method "WarpPointer",
}

export wxWindowList :: !foreign struct {
	using wxList,
}

export wxPanel :: !foreign struct {
	using wxWindow,

	!call :: () -> wxPanel !foreign lua "wx.wxPanel",
	!call :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxTAB_TRAVERSAL, name:wxString|string="wxPanel") -> wxPanel !foreign lua "wx.wxPanel",

	Create                   :: (self:wxPanel, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxTAB_TRAVERSAL, name:wxString|string="wxPanel") -> bool !foreign method "Create",
	SetFocusIgnoringChildren :: (self:wxPanel) !foreign method "SetFocusIgnoringChildren",
}

export wxControl :: !foreign struct {
	using wxWindow,

	!call :: () -> wxControl !foreign lua "wx.wxControl",
	!call :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxControl") -> wxControl !foreign lua "wx.wxControl",

	Create       :: (self:wxControl, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxControl") -> bool !foreign method "Create",
	Command      :: (self:wxControl, event:wxCommandEvent) !foreign method "Command",
	GetLabelText :: (self:wxControl) -> string !foreign method "GetLabelText",
}

export wxBookCtrlBase :: !foreign struct {
	using wxControl,

	AdvanceSelection    :: (self:wxBookCtrlBase, forward:bool=true) !foreign method "AdvanceSelection",
	AddPage             :: (self:wxBookCtrlBase, page:wxWindow, text:wxString|string, bSelect:bool=false, imageId:int=-1) -> bool !foreign method "AddPage",
	CalcSizeFromPage    :: (self:wxBookCtrlBase, sizePage:wxSize) -> wxSize !foreign method "CalcSizeFromPage",
	DeleteAllPages      :: (self:wxBookCtrlBase) -> bool !foreign method "DeleteAllPages",
	DeletePage          :: (self:wxBookCtrlBase, n:int--[[size_t]]) -> bool !foreign method "DeletePage",
	GetCurrentPage      :: (self:wxBookCtrlBase) -> wxWindow !foreign method "GetCurrentPage",
	GetImageList        :: (self:wxBookCtrlBase) -> wxImageList !foreign method "GetImageList",
	GetPage             :: (self:wxBookCtrlBase, n:int--[[size_t]]) -> wxWindow !foreign method "GetPage",
	GetPageCount        :: (self:wxBookCtrlBase) -> int--[[size_t]] !foreign method "GetPageCount",
	GetPageImage        :: (self:wxBookCtrlBase, n:int--[[size_t]]) -> int !foreign method "GetPageImage",
	GetPageText         :: (self:wxBookCtrlBase, n:int--[[size_t]]) -> string !foreign method "GetPageText",
	GetSelection        :: (self:wxBookCtrlBase) -> int !foreign method "GetSelection",
	InsertPage          :: (self:wxBookCtrlBase, n:int--[[size_t]], page:wxWindow, text:wxString|string, bSelect:bool=false, imageId:int=-1) -> bool !foreign method "InsertPage",
	RemovePage          :: (self:wxBookCtrlBase, n:int--[[size_t]]) -> bool !foreign method "RemovePage",
	SetImageList        :: (self:wxBookCtrlBase, imageList:wxImageList) !foreign method "SetImageList",
	SetPageImage        :: (self:wxBookCtrlBase, n:int--[[size_t]], imageId:int) -> bool !foreign method "SetPageImage",
	SetPageSize         :: (self:wxBookCtrlBase, size:wxSize) !foreign method "SetPageSize",
	SetPageText         :: (self:wxBookCtrlBase, n:int--[[size_t]], strText:wxString|string) -> bool !foreign method "SetPageText",
	SetSelection        :: (self:wxBookCtrlBase, n:int--[[size_t]]) -> int !foreign method "SetSelection",
	GetInternalBorder   :: (self:wxBookCtrlBase) -> int !foreign method "GetInternalBorder",
	SetInternalBorder   :: (self:wxBookCtrlBase, border:int) !foreign method "SetInternalBorder",
	SetControlMargin    :: (self:wxBookCtrlBase, margin:int) !foreign method "SetControlMargin",
	GetControlMargin    :: (self:wxBookCtrlBase) -> int !foreign method "GetControlMargin",
	IsVertical          :: (self:wxBookCtrlBase) -> bool !foreign method "IsVertical",
	SetFitToCurrentPage :: (self:wxBookCtrlBase, fit:bool) !foreign method "SetFitToCurrentPage",
	GetFitToCurrentPage :: (self:wxBookCtrlBase) -> bool !foreign method "GetFitToCurrentPage",
	ChangeSelection     :: (self:wxBookCtrlBase, n:int--[[size_t]]) -> int !foreign method "ChangeSelection",
	GetControlSizer     :: (self:wxBookCtrlBase) -> wxSizer !foreign method "GetControlSizer",
}

export wxBookCtrlBaseEvent :: !foreign struct {
	using wxNotifyEvent,

	!call :: (commandType:wxEventType=wxEVT_NULL, winid:int=0, nSel:int=-1, nOldSel:int=-1) -> wxBookCtrlBaseEvent !foreign lua "wx.wxBookCtrlBaseEvent",

	GetOldSelection :: (self:wxBookCtrlBaseEvent) -> int !foreign method "GetOldSelection",
	GetSelection    :: (self:wxBookCtrlBaseEvent) -> int !foreign method "GetSelection",
	SetOldSelection :: (self:wxBookCtrlBaseEvent, page:int) !foreign method "SetOldSelection",
	SetSelection    :: (self:wxBookCtrlBaseEvent, page:int) !foreign method "SetSelection",
}

export wxNotebook :: !foreign struct {
	using wxBookCtrlBase,

	!call :: () -> wxNotebook !foreign lua "wx.wxNotebook",
	!call :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxNotebook") -> wxNotebook !foreign lua "wx.wxNotebook",

	Create                   :: (self:wxNotebook, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxNotebook") -> bool !foreign method "Create",
	GetRowCount              :: (self:wxNotebook) -> int !foreign method "GetRowCount",
	GetThemeBackgroundColour :: (self:wxNotebook) -> wxColour !foreign method "GetThemeBackgroundColour",
	HitTest                  :: (self:wxNotebook, pt:wxPoint) -> (page:int, flags:int) !foreign method "HitTest",
	SetPadding               :: (self:wxNotebook, padding:wxSize) !foreign method "SetPadding",
}

export wxNotebookEvent :: !foreign struct {
	using wxBookCtrlBaseEvent,

	!call :: (eventType:wxEventType=wxEVT_NULL, id:int=0, sel:int=-1, oldSel:int=-1) -> wxNotebookEvent !foreign lua "wx.wxNotebookEvent",
}

export wxListbook :: !foreign struct {
	using wxBookCtrlBase,

	!call :: () -> wxListbook !foreign lua "wx.wxListbook",
	!call :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxListbook") -> wxListbook !foreign lua "wx.wxListbook",

	Create      :: (self:wxListbook, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxListbook") -> bool !foreign method "Create",
	GetListView :: (self:wxListbook) -> wxListView !foreign method "GetListView",
}

export wxListbookEvent :: !foreign struct {
	using wxBookCtrlBaseEvent,

	!call :: (eventType:wxEventType=wxEVT_NULL, id:int=0, sel:int=-1, oldSel:int=-1) -> wxListbookEvent !foreign lua "wx.wxListbookEvent",
}

export wxChoicebook :: !foreign struct {
	using wxBookCtrlBase,

	!call :: () -> wxChoicebook !foreign lua "wx.wxChoicebook",
	!call :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxChoicebook") -> wxChoicebook !foreign lua "wx.wxChoicebook",

	Create        :: (self:wxChoicebook, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxChoicebook") -> bool !foreign method "Create",
	GetChoiceCtrl :: (self:wxChoicebook) -> wxChoice !foreign method "GetChoiceCtrl",
}

export wxChoicebookEvent :: !foreign struct {
	using wxBookCtrlBaseEvent,

	!call :: (eventType:wxEventType=wxEVT_NULL, id:int=0, sel:int=-1, oldSel:int=-1) -> wxChoicebookEvent !foreign lua "wx.wxChoicebookEvent",
}

export wxTreebook :: !foreign struct {
	using wxBookCtrlBase,

	!call :: () -> wxTreebook !foreign lua "wx.wxTreebook",
	!call :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxBK_DEFAULT, name:wxString|string="wxTreebook") -> wxTreebook !foreign lua "wx.wxTreebook",

	Create         :: (self:wxTreebook, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxBK_DEFAULT, name:wxString|string="wxTreebook") -> bool !foreign method "Create",
	InsertPage     :: (self:wxTreebook, pos:int--[[size_t]], page:wxWindow, text:wxString|string, bSelect:bool=false, imageId:int=wxNOT_FOUND) -> bool !foreign method "InsertPage",
	InsertSubPage  :: (self:wxTreebook, pos:int--[[size_t]], page:wxWindow, text:wxString|string, bSelect:bool=false, imageId:int=wxNOT_FOUND) -> bool !foreign method "InsertSubPage",
	AddPage        :: (self:wxTreebook, page:wxWindow, text:wxString|string, bSelect:bool=false, imageId:int=wxNOT_FOUND) -> bool !foreign method "AddPage",
	AddSubPage     :: (self:wxTreebook, page:wxWindow, text:wxString|string, bSelect:bool=false, imageId:int=wxNOT_FOUND) -> bool !foreign method "AddSubPage",
	IsNodeExpanded :: (self:wxTreebook, pos:int--[[size_t]]) -> bool !foreign method "IsNodeExpanded",
	ExpandNode     :: (self:wxTreebook, pos:int--[[size_t]], expand:bool=true) -> bool !foreign method "ExpandNode",
	CollapseNode   :: (self:wxTreebook, pos:int--[[size_t]]) -> bool !foreign method "CollapseNode",
	GetPageParent  :: (self:wxTreebook, pos:int--[[size_t]]) -> int !foreign method "GetPageParent",
	GetTreeCtrl    :: (self:wxTreebook) -> wxTreeCtrl !foreign method "GetTreeCtrl",
}

export wxTreebookEvent :: !foreign struct {
	using wxBookCtrlBaseEvent,

	!call :: (event:wxTreebookEvent) -> wxTreebookEvent !foreign lua "wx.wxTreebookEvent",
	!call :: (commandType:wxEventType=wxEVT_NULL, id:int=0, nSel:int=wxNOT_FOUND, nOldSel:int=wxNOT_FOUND) -> wxTreebookEvent !foreign lua "wx.wxTreebookEvent",
}

export wxToolbook :: !foreign struct {
	using wxBookCtrlBase,

	!call :: () -> wxToolbook !foreign lua "wx.wxToolbook",
	!call :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxToolbook") -> wxToolbook !foreign lua "wx.wxToolbook",

	Create     :: (self:wxToolbook, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxToolbook") -> bool !foreign method "Create",
	GetToolBar :: (self:wxToolbook) -> wxToolBarBase !foreign method "GetToolBar",
	Realize    :: (self:wxToolbook) !foreign method "Realize",
}

export wxToolbookEvent :: !foreign struct {
	using wxBookCtrlBaseEvent,

	!call :: (event:wxToolbookEvent) -> wxToolbookEvent !foreign lua "wx.wxToolbookEvent",
	!call :: (commandType:wxEventType=wxEVT_NULL, id:int=0, nSel:int=wxNOT_FOUND, nOldSel:int=wxNOT_FOUND) -> wxToolbookEvent !foreign lua "wx.wxToolbookEvent",
}

export wxTabCtrl :: !foreign struct {
	using wxControl,

	!call :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxTabCtrl") -> wxTabCtrl !foreign lua "wx.wxTabCtrl",

	DeleteAllItems :: (self:wxTabCtrl) -> bool !foreign method "DeleteAllItems",
	DeleteItem     :: (self:wxTabCtrl, item:int) -> bool !foreign method "DeleteItem",
	GetCurFocus    :: (self:wxTabCtrl) -> int !foreign method "GetCurFocus",
	GetImageList   :: (self:wxTabCtrl) -> wxImageList !foreign method "GetImageList",
	GetItemCount   :: (self:wxTabCtrl) -> int !foreign method "GetItemCount",
	GetItemData    :: (self:wxTabCtrl, item:int) -> wxObject !foreign method "GetItemData",
	GetItemImage   :: (self:wxTabCtrl, item:int) -> int !foreign method "GetItemImage",
	GetItemRect    :: (self:wxTabCtrl, item:int, rect:wxRect) -> bool !foreign method "GetItemRect",
	GetItemText    :: (self:wxTabCtrl, item:int) -> string !foreign method "GetItemText",
	GetRowCount    :: (self:wxTabCtrl) -> int !foreign method "GetRowCount",
	GetSelection   :: (self:wxTabCtrl) -> int !foreign method "GetSelection",
	HitTest        :: (self:wxTabCtrl, pt:wxPoint, flags:int--[[long]]) -> int !foreign method "HitTest",
	InsertItem     :: (self:wxTabCtrl, item:int, text:wxString|string, imageId:int=-1, clientData:wxObject=wxObject.null) !foreign method "InsertItem",
	SetItemData    :: (self:wxTabCtrl, item:int, data:wxObject) -> bool !foreign method "SetItemData",
	SetItemImage   :: (self:wxTabCtrl, item:int, image:int) -> bool !foreign method "SetItemImage",
	SetImageList   :: (self:wxTabCtrl, imageList:wxImageList) !foreign method "SetImageList",
	SetItemSize    :: (self:wxTabCtrl, size:wxSize) !foreign method "SetItemSize",
	SetItemText    :: (self:wxTabCtrl, item:int, text:wxString|string) -> bool !foreign method "SetItemText",
	SetPadding     :: (self:wxTabCtrl, padding:wxSize) !foreign method "SetPadding",
	SetSelection   :: (self:wxTabCtrl, item:int) -> int !foreign method "SetSelection",
}

export wxTabEvent :: !foreign struct {
	using wxCommandEvent,

	!call :: (commandType:wxEventType=0, id:int=0) -> wxTabEvent !foreign lua "wx.wxTabEvent",
}

export wxScrolledWindow :: !foreign struct {
	using wxPanel,

	!call :: () -> wxScrolledWindow !foreign lua "wx.wxScrolledWindow",
	!call :: (parent:wxWindow, id:wxWindowID=wxID_ANY, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxHSCROLL|wxVSCROLL)]], name:wxString|string="wxScrolledWindow") -> wxScrolledWindow !foreign lua "wx.wxScrolledWindow",

	Create                 :: (self:wxScrolledWindow, parent:wxWindow, id:wxWindowID=-1, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxHSCROLL|wxVSCROLL)]], name:wxString|string="wxScrolledWindow") -> bool !foreign method "Create",
	CalcScrolledPosition   :: (self:wxScrolledWindow, x,y:int) -> (xx:int, yy:int) !foreign method "CalcScrolledPosition",
	CalcUnscrolledPosition :: (self:wxScrolledWindow, x,y:int) -> (xx:int, yy:int) !foreign method "CalcUnscrolledPosition",
	EnableScrolling        :: (self:wxScrolledWindow, xScrolling:bool, yScrolling:bool) !foreign method "EnableScrolling",
	GetScrollPixelsPerUnit :: (self:wxScrolledWindow) -> (xUnit:int, yUnit:int) !foreign method "GetScrollPixelsPerUnit",
	GetViewStart           :: (self:wxScrolledWindow) -> (x:int, y:int) !foreign method "GetViewStart",
	PrepareDC              :: (self:wxScrolledWindow, dc:wxDC) !foreign method "PrepareDC",
	Scroll                 :: (self:wxScrolledWindow, x,y:int) !foreign method "Scroll",
	SetScrollbars          :: (self:wxScrolledWindow, pixelsPerUnitX:int, pixelsPerUnitY:int, noUnitsX:int, noUnitsY:int, xPos:int=0, yPos:int=0, noRefresh:bool=false) !foreign method "SetScrollbars",
	SetScrollRate          :: (self:wxScrolledWindow, xstep:int, ystep:int) !foreign method "SetScrollRate",
	SetTargetWindow        :: (self:wxScrolledWindow, window:wxWindow) !foreign method "SetTargetWindow",
}

export wxSplitterWindow :: !foreign struct {
	using wxWindow,

	null: wxSplitterWindow : !foreign lua "wx.NULL",

	!call :: () -> wxSplitterWindow !foreign lua "wx.wxSplitterWindow",
	!call :: (parent:wxWindow, id:wxWindowID, point:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxSP_3D, name:wxString|string="wxSplitterWindow") -> wxSplitterWindow !foreign lua "wx.wxSplitterWindow",

	Create             :: (self:wxSplitterWindow, parent:wxWindow, id:wxWindowID=wxID_ANY, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxSP_3D|wxCLIP_CHILDREN)]], name:wxString|string="wxSplitterWindow") -> bool !foreign method "Create",
	GetMinimumPaneSize :: (self:wxSplitterWindow) -> int !foreign method "GetMinimumPaneSize",
	GetSashGravity     :: (self:wxSplitterWindow) -> float--[[double]] !foreign method "GetSashGravity",
	GetSashPosition    :: (self:wxSplitterWindow) -> int !foreign method "GetSashPosition",
	GetSplitMode       :: (self:wxSplitterWindow) -> int !foreign method "GetSplitMode",
	GetWindow1         :: (self:wxSplitterWindow) -> wxWindow !foreign method "GetWindow1",
	GetWindow2         :: (self:wxSplitterWindow) -> wxWindow !foreign method "GetWindow2",
	Initialize         :: (self:wxSplitterWindow, window:wxWindow) !foreign method "Initialize",
	IsSplit            :: (self:wxSplitterWindow) -> bool !foreign method "IsSplit",
	ReplaceWindow      :: (self:wxSplitterWindow, winOld:wxWindow, winNew:wxWindow) -> bool !foreign method "ReplaceWindow",
	SetSashGravity     :: (self:wxSplitterWindow, gravity:float--[[double]]) !foreign method "SetSashGravity",
	SetSashPosition    :: (self:wxSplitterWindow, position:int, redraw:bool=true) !foreign method "SetSashPosition",
	SetSashSize        :: (self:wxSplitterWindow, size:int) !foreign method "SetSashSize",
	SetMinimumPaneSize :: (self:wxSplitterWindow, paneSize:int) !foreign method "SetMinimumPaneSize",
	SetSplitMode       :: (self:wxSplitterWindow, mode:int) !foreign method "SetSplitMode",
	SplitHorizontally  :: (self:wxSplitterWindow, window1:wxWindow, window2:wxWindow, sashPosition:int=0) -> bool !foreign method "SplitHorizontally",
	SplitVertically    :: (self:wxSplitterWindow, window1:wxWindow, window2:wxWindow, sashPosition:int=0) -> bool !foreign method "SplitVertically",
	Unsplit            :: (self:wxSplitterWindow, toRemove:wxWindow=wxWindow.null) -> bool !foreign method "Unsplit",
	UpdateSize         :: (self:wxSplitterWindow) !foreign method "UpdateSize",
}

export wxSplitterEvent :: !foreign struct {
	using wxNotifyEvent,

	!call :: (type:wxEventType=wxEVT_NULL, splitter:wxSplitterWindow=wxSplitterWindow.null) -> wxSplitterEvent !foreign lua "wx.wxSplitterEvent",

	GetSashPosition       :: (self:wxSplitterEvent) -> int !foreign method "GetSashPosition",
	GetX                  :: (self:wxSplitterEvent) -> int !foreign method "GetX",
	GetY                  :: (self:wxSplitterEvent) -> int !foreign method "GetY",
	GetWindowBeingRemoved :: (self:wxSplitterEvent) -> wxWindow !foreign method "GetWindowBeingRemoved",
	SetSashPosition       :: (self:wxSplitterEvent, pos:int) !foreign method "SetSashPosition",
}

export wxCollapsiblePane :: !foreign struct {
	using wxControl,

	!call :: () -> wxCollapsiblePane !foreign lua "wx.wxCollapsiblePane",
	!call :: (parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxCP_DEFAULT_STYLE, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxCollapsiblePane") -> wxCollapsiblePane !foreign lua "wx.wxCollapsiblePane",

	Create      :: (self:wxCollapsiblePane, parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxCP_DEFAULT_STYLE, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxCollapsiblePane") -> bool !foreign method "Create",
	IsCollapsed :: (self:wxCollapsiblePane) -> bool !foreign method "IsCollapsed",
	IsExpanded  :: (self:wxCollapsiblePane) -> bool !foreign method "IsExpanded",
	Collapse    :: (self:wxCollapsiblePane, collapse:bool=true) !foreign method "Collapse",
	Expand      :: (self:wxCollapsiblePane) !foreign method "Expand",
	GetPane     :: (self:wxCollapsiblePane) -> wxWindow !foreign method "GetPane",
}

export wxCollapsiblePaneEvent :: !foreign struct {
	using wxCommandEvent,

	!call :: () -> wxCollapsiblePaneEvent !foreign lua "wx.wxCollapsiblePaneEvent",
	!call :: (generator:wxObject, id:int, collapsed:bool) -> wxCollapsiblePaneEvent !foreign lua "wx.wxCollapsiblePaneEvent",

	GetCollapsed :: (self:wxCollapsiblePaneEvent) -> bool !foreign method "GetCollapsed",
	SetCollapsed :: (self:wxCollapsiblePaneEvent, c:bool) !foreign method "SetCollapsed",
}

export wxStaticBox :: !foreign struct {
	using wxControl,

	!call :: () -> wxStaticBox !foreign lua "wx.wxStaticBox",
	!call :: (parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxStaticBox") -> wxStaticBox !foreign lua "wx.wxStaticBox",

	Create :: (self:wxStaticBox, parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxStaticBox") -> bool !foreign method "Create",
}

export wxStaticBitmap :: !foreign struct {
	using wxControl,

	!call :: () -> wxStaticBitmap !foreign lua "wx.wxStaticBitmap",
	!call :: (parent:wxWindow, id:wxWindowID, label:wxBitmap=wxNullBitmap, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxStaticBitmap") -> wxStaticBitmap !foreign lua "wx.wxStaticBitmap",

	Create    :: (self:wxStaticBitmap, parent:wxWindow, id:wxWindowID, label:wxBitmap=wxNullBitmap, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxStaticBitmap") -> bool !foreign method "Create",
	GetBitmap :: (self:wxStaticBitmap) -> wxBitmap !foreign method "GetBitmap",
	SetBitmap :: (self:wxStaticBitmap, label:wxBitmap) !foreign method "SetBitmap",
}

export wxStaticText :: !foreign struct {
	using wxControl,

	!call :: () -> wxStaticText !foreign lua "wx.wxStaticText",
	!call :: (parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxStaticText") -> wxStaticText !foreign lua "wx.wxStaticText",

	Create :: (self:wxStaticText, parent:wxWindow, id:wxWindowID, label:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxStaticText") -> bool !foreign method "Create",
	Wrap   :: (self:wxStaticText, width:int) !foreign method "Wrap",
}

export wxStaticLine :: !foreign struct {
	using wxControl,

	!call          :: () -> wxStaticLine !foreign lua "wx.wxStaticLine",
	!call          :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxLI_HORIZONTAL, name:wxString|string="wxStaticLine") -> wxStaticLine !foreign lua "wx.wxStaticLine",
	GetDefaultSize :: () -> int !foreign lua "wx.wxStaticLine.GetDefaultSize",

	Create     :: (self:wxStaticLine, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0, name:wxString|string="wxStaticLine") -> bool !foreign method "Create",
	IsVertical :: (self:wxStaticLine) -> bool !foreign method "IsVertical",
}

export wxFindFocusDescendant :: (ancestor:wxWindow) -> wxWindow !foreign lua "wx.wxFindFocusDescendant"
