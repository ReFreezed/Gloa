--[[============================================================
--=
--=  wxLua/wxWidget bindings for GlÃ³a
--=  Interface source: wxadv_adv.i
--=
--=  Tested with:
--=  - wxLua 2.8.7.0 / wxWidgets 2.8.8
--=
--=  Note: Most bindings have not been tested yet!
--=
--============================================================]]

!import "wx/common"
!import "wx/wxcore_gdi"
!import "wx/wxbase_data"
!import "wx/wxcore_image"
!import "wx/wxbase_file"
!import "wx/wxcore_windows"
!import "wx/wxcore_core"
!import "wx/wxbase_datetime"
!import "wx/wxcore_event"
!import "wx/wxcore_appframe"
!import "wx/wxcore_mdi"
!import "wx/wxcore_dialogs"
!import "wx/wxcore_sizer"
!import "wx/wxcore_menutool"

export wxAC_NO_AUTORESIZE:             int : !foreign lua "wx.wxAC_NO_AUTORESIZE"
export wxAC_DEFAULT_STYLE:             int : !foreign lua "wx.wxAC_DEFAULT_STYLE"
export wxHL_CONTEXTMENU:               int : !foreign lua "wx.wxHL_CONTEXTMENU"
export wxHL_ALIGN_LEFT:                int : !foreign lua "wx.wxHL_ALIGN_LEFT"
export wxHL_ALIGN_RIGHT:               int : !foreign lua "wx.wxHL_ALIGN_RIGHT"
export wxHL_ALIGN_CENTRE:              int : !foreign lua "wx.wxHL_ALIGN_CENTRE"
export wxHL_DEFAULT_STYLE:             int : !foreign lua "wx.wxHL_DEFAULT_STYLE"
export wxSW_3D:                        int : !foreign lua "wx.wxSW_3D"
export wxSW_3DSASH:                    int : !foreign lua "wx.wxSW_3DSASH"
export wxSW_3DBORDER:                  int : !foreign lua "wx.wxSW_3DBORDER"
export wxSW_BORDER:                    int : !foreign lua "wx.wxSW_BORDER"
export wxSPLASH_CENTRE_ON_PARENT:      int : !foreign lua "wx.wxSPLASH_CENTRE_ON_PARENT"
export wxSPLASH_CENTRE_ON_SCREEN:      int : !foreign lua "wx.wxSPLASH_CENTRE_ON_SCREEN"
export wxSPLASH_NO_CENTRE:             int : !foreign lua "wx.wxSPLASH_NO_CENTRE"
export wxSPLASH_TIMEOUT:               int : !foreign lua "wx.wxSPLASH_TIMEOUT"
export wxSPLASH_NO_TIMEOUT:            int : !foreign lua "wx.wxSPLASH_NO_TIMEOUT"
export wxWIZARD_EX_HELPBUTTON:         int : !foreign lua "wx.wxWIZARD_EX_HELPBUTTON"
export wxSOUND_SYNC:                   int : !foreign lua "wx.wxSOUND_SYNC"
export wxSOUND_ASYNC:                  int : !foreign lua "wx.wxSOUND_ASYNC"
export wxSOUND_LOOP:                   int : !foreign lua "wx.wxSOUND_LOOP"
export wxEVT_DATE_CHANGED:             wxEventType : !foreign lua "wx.wxEVT_DATE_CHANGED" -- EVT_DATE_CHANGED(id, fn)
export wxEVT_CALENDAR_SEL_CHANGED:     wxEventType : !foreign lua "wx.wxEVT_CALENDAR_SEL_CHANGED" -- EVT_CALENDAR_SEL_CHANGED(id, fn)
export wxEVT_CALENDAR_DAY_CHANGED:     wxEventType : !foreign lua "wx.wxEVT_CALENDAR_DAY_CHANGED" -- EVT_CALENDAR_DAY(id, fn)
export wxEVT_CALENDAR_MONTH_CHANGED:   wxEventType : !foreign lua "wx.wxEVT_CALENDAR_MONTH_CHANGED" -- EVT_CALENDAR_MONTH(id, fn)
export wxEVT_CALENDAR_YEAR_CHANGED:    wxEventType : !foreign lua "wx.wxEVT_CALENDAR_YEAR_CHANGED" -- EVT_CALENDAR_YEAR(id, fn)
export wxEVT_CALENDAR_DOUBLECLICKED:   wxEventType : !foreign lua "wx.wxEVT_CALENDAR_DOUBLECLICKED" -- EVT_CALENDAR(id, fn)
export wxEVT_CALENDAR_WEEKDAY_CLICKED: wxEventType : !foreign lua "wx.wxEVT_CALENDAR_WEEKDAY_CLICKED" -- EVT_CALENDAR_WEEKDAY_CLICKED(id, fn)
export wxEVT_COMMAND_HYPERLINK:        wxEventType : !foreign lua "wx.wxEVT_COMMAND_HYPERLINK" -- EVT_HYPERLINK(id, fn)
export wxEVT_QUERY_LAYOUT_INFO:        wxEventType : !foreign lua "wx.wxEVT_QUERY_LAYOUT_INFO" -- EVT_QUERY_LAYOUT_INFO(func)
export wxEVT_CALCULATE_LAYOUT:         wxEventType : !foreign lua "wx.wxEVT_CALCULATE_LAYOUT" -- EVT_CALCULATE_LAYOUT(func)
export wxEVT_SASH_DRAGGED:             wxEventType : !foreign lua "wx.wxEVT_SASH_DRAGGED" -- EVT_SASH_DRAGGED(id, fn) EVT_SASH_DRAGGED_RANGE(id1, id2, fn)
export wxEVT_WIZARD_CANCEL:            wxEventType : !foreign lua "wx.wxEVT_WIZARD_CANCEL" -- EVT_WIZARD_CANCEL(id, fn)
export wxEVT_WIZARD_PAGE_CHANGED:      wxEventType : !foreign lua "wx.wxEVT_WIZARD_PAGE_CHANGED" -- EVT_WIZARD_PAGE_CHANGED(id, fn)
export wxEVT_WIZARD_PAGE_CHANGING:     wxEventType : !foreign lua "wx.wxEVT_WIZARD_PAGE_CHANGING" -- EVT_WIZARD_PAGE_CHANGING(id, fn)
export wxEVT_WIZARD_HELP:              wxEventType : !foreign lua "wx.wxEVT_WIZARD_HELP" -- EVT_WIZARD_HELP(id, fn)
export wxEVT_WIZARD_FINISHED:          wxEventType : !foreign lua "wx.wxEVT_WIZARD_FINISHED" -- EVT_WIZARD_FINISHED(id, fn)
export wxEVT_TASKBAR_MOVE:             wxEventType : !foreign lua "wx.wxEVT_TASKBAR_MOVE" -- EVT_TASKBAR_MOVE(func)
export wxEVT_TASKBAR_LEFT_DOWN:        wxEventType : !foreign lua "wx.wxEVT_TASKBAR_LEFT_DOWN" -- EVT_TASKBAR_LEFT_DOWN(func)
export wxEVT_TASKBAR_LEFT_UP:          wxEventType : !foreign lua "wx.wxEVT_TASKBAR_LEFT_UP" -- EVT_TASKBAR_LEFT_UP(func)
export wxEVT_TASKBAR_RIGHT_DOWN:       wxEventType : !foreign lua "wx.wxEVT_TASKBAR_RIGHT_DOWN" -- EVT_TASKBAR_RIGHT_DOWN(func)
export wxEVT_TASKBAR_RIGHT_UP:         wxEventType : !foreign lua "wx.wxEVT_TASKBAR_RIGHT_UP" -- EVT_TASKBAR_RIGHT_UP(func)
export wxEVT_TASKBAR_LEFT_DCLICK:      wxEventType : !foreign lua "wx.wxEVT_TASKBAR_LEFT_DCLICK" -- EVT_TASKBAR_LEFT_DCLICK(func)
export wxEVT_TASKBAR_RIGHT_DCLICK:     wxEventType : !foreign lua "wx.wxEVT_TASKBAR_RIGHT_DCLICK" -- EVT_TASKBAR_RIGHT_DCLICK(func)
export wxEVT_JOY_BUTTON_DOWN:          wxEventType : !foreign lua "wx.wxEVT_JOY_BUTTON_DOWN" -- EVT_JOY_BUTTON_DOWN(func)
export wxEVT_JOY_BUTTON_UP:            wxEventType : !foreign lua "wx.wxEVT_JOY_BUTTON_UP" -- EVT_JOY_BUTTON_UP(func)
export wxEVT_JOY_MOVE:                 wxEventType : !foreign lua "wx.wxEVT_JOY_MOVE" -- EVT_JOY_MOVE(func)
export wxEVT_JOY_ZMOVE:                wxEventType : !foreign lua "wx.wxEVT_JOY_ZMOVE" -- EVT_JOY_ZMOVE(func)

export wxAnimationType :: wxEnum
export wxANIMATION_TYPE_INVALID: wxAnimationType : !foreign lua "wx.wxANIMATION_TYPE_INVALID"
export wxANIMATION_TYPE_GIF:     wxAnimationType : !foreign lua "wx.wxANIMATION_TYPE_GIF"
export wxANIMATION_TYPE_ANI:     wxAnimationType : !foreign lua "wx.wxANIMATION_TYPE_ANI"
export wxANIMATION_TYPE_ANY:     wxAnimationType : !foreign lua "wx.wxANIMATION_TYPE_ANY"

export wxCAL_SUNDAY_FIRST:               wxEnum : !foreign lua "wx.wxCAL_SUNDAY_FIRST"
export wxCAL_MONDAY_FIRST:               wxEnum : !foreign lua "wx.wxCAL_MONDAY_FIRST"
export wxCAL_SHOW_HOLIDAYS:              wxEnum : !foreign lua "wx.wxCAL_SHOW_HOLIDAYS"
export wxCAL_NO_YEAR_CHANGE:             wxEnum : !foreign lua "wx.wxCAL_NO_YEAR_CHANGE"
export wxCAL_NO_MONTH_CHANGE:            wxEnum : !foreign lua "wx.wxCAL_NO_MONTH_CHANGE"
export wxCAL_SHOW_SURROUNDING_WEEKS:     wxEnum : !foreign lua "wx.wxCAL_SHOW_SURROUNDING_WEEKS"
export wxCAL_SEQUENTIAL_MONTH_SELECTION: wxEnum : !foreign lua "wx.wxCAL_SEQUENTIAL_MONTH_SELECTION"

export wxCalendarHitTestResult :: wxEnum
export wxCAL_HITTEST_NOWHERE:          wxCalendarHitTestResult : !foreign lua "wx.wxCAL_HITTEST_NOWHERE"
export wxCAL_HITTEST_HEADER:           wxCalendarHitTestResult : !foreign lua "wx.wxCAL_HITTEST_HEADER"
export wxCAL_HITTEST_DAY:              wxCalendarHitTestResult : !foreign lua "wx.wxCAL_HITTEST_DAY"
export wxCAL_HITTEST_INCMONTH:         wxCalendarHitTestResult : !foreign lua "wx.wxCAL_HITTEST_INCMONTH"
export wxCAL_HITTEST_DECMONTH:         wxCalendarHitTestResult : !foreign lua "wx.wxCAL_HITTEST_DECMONTH"
export wxCAL_HITTEST_SURROUNDING_WEEK: wxCalendarHitTestResult : !foreign lua "wx.wxCAL_HITTEST_SURROUNDING_WEEK"

export wxCalendarDateBorder :: wxEnum
export wxCAL_BORDER_NONE:   wxCalendarDateBorder : !foreign lua "wx.wxCAL_BORDER_NONE"
export wxCAL_BORDER_SQUARE: wxCalendarDateBorder : !foreign lua "wx.wxCAL_BORDER_SQUARE"
export wxCAL_BORDER_ROUND:  wxCalendarDateBorder : !foreign lua "wx.wxCAL_BORDER_ROUND"

export wxSashEdgePosition :: wxEnum
export wxSASH_TOP:    wxSashEdgePosition : !foreign lua "wx.wxSASH_TOP"
export wxSASH_RIGHT:  wxSashEdgePosition : !foreign lua "wx.wxSASH_RIGHT"
export wxSASH_BOTTOM: wxSashEdgePosition : !foreign lua "wx.wxSASH_BOTTOM"
export wxSASH_LEFT:   wxSashEdgePosition : !foreign lua "wx.wxSASH_LEFT"
export wxSASH_NONE:   wxSashEdgePosition : !foreign lua "wx.wxSASH_NONE"

export wxSashDragStatus :: wxEnum
export wxSASH_STATUS_OK:           wxSashDragStatus : !foreign lua "wx.wxSASH_STATUS_OK"
export wxSASH_STATUS_OUT_OF_RANGE: wxSashDragStatus : !foreign lua "wx.wxSASH_STATUS_OUT_OF_RANGE"

export wxLayoutAlignment :: wxEnum
export wxLAYOUT_NONE:   wxLayoutAlignment : !foreign lua "wx.wxLAYOUT_NONE"
export wxLAYOUT_TOP:    wxLayoutAlignment : !foreign lua "wx.wxLAYOUT_TOP"
export wxLAYOUT_LEFT:   wxLayoutAlignment : !foreign lua "wx.wxLAYOUT_LEFT"
export wxLAYOUT_RIGHT:  wxLayoutAlignment : !foreign lua "wx.wxLAYOUT_RIGHT"
export wxLAYOUT_BOTTOM: wxLayoutAlignment : !foreign lua "wx.wxLAYOUT_BOTTOM"

export wxLayoutOrientation :: wxEnum
export wxLAYOUT_HORIZONTAL: wxLayoutOrientation : !foreign lua "wx.wxLAYOUT_HORIZONTAL"
export wxLAYOUT_VERTICAL:   wxLayoutOrientation : !foreign lua "wx.wxLAYOUT_VERTICAL"

export wxJOYSTICK1: wxEnum : !foreign lua "wx.wxJOYSTICK1"
export wxJOYSTICK2: wxEnum : !foreign lua "wx.wxJOYSTICK2"

export wxJOY_BUTTON_ANY: wxEnum : !foreign lua "wx.wxJOY_BUTTON_ANY"
export wxJOY_BUTTON1:    wxEnum : !foreign lua "wx.wxJOY_BUTTON1"
export wxJOY_BUTTON2:    wxEnum : !foreign lua "wx.wxJOY_BUTTON2"
export wxJOY_BUTTON3:    wxEnum : !foreign lua "wx.wxJOY_BUTTON3"
export wxJOY_BUTTON4:    wxEnum : !foreign lua "wx.wxJOY_BUTTON4"

export wxAboutDialogInfo :: !foreign struct {
	using wxLuaUserdata,

	!call :: () -> wxAboutDialogInfo !foreign lua "wx.wxAboutDialogInfo",

	SetName                  :: (self:wxAboutDialogInfo, name:wxString|string) !foreign method "SetName",
	GetName                  :: (self:wxAboutDialogInfo) -> string !foreign method "GetName",
	SetVersion               :: (self:wxAboutDialogInfo, version:wxString|string) !foreign method "SetVersion",
	HasVersion               :: (self:wxAboutDialogInfo) -> bool !foreign method "HasVersion",
	GetVersion               :: (self:wxAboutDialogInfo) -> string !foreign method "GetVersion",
	SetDescription           :: (self:wxAboutDialogInfo, desc:wxString|string) !foreign method "SetDescription",
	HasDescription           :: (self:wxAboutDialogInfo) -> bool !foreign method "HasDescription",
	GetDescription           :: (self:wxAboutDialogInfo) -> string !foreign method "GetDescription",
	SetCopyright             :: (self:wxAboutDialogInfo, copyright:wxString|string) !foreign method "SetCopyright",
	HasCopyright             :: (self:wxAboutDialogInfo) -> bool !foreign method "HasCopyright",
	GetCopyright             :: (self:wxAboutDialogInfo) -> string !foreign method "GetCopyright",
	SetLicence               :: (self:wxAboutDialogInfo, licence:wxString|string) !foreign method "SetLicence",
	SetLicense               :: (self:wxAboutDialogInfo, licence:wxString|string) !foreign method "SetLicense",
	HasLicence               :: (self:wxAboutDialogInfo) -> bool !foreign method "HasLicence",
	GetLicence               :: (self:wxAboutDialogInfo) -> string !foreign method "GetLicence",
	SetIcon                  :: (self:wxAboutDialogInfo, icon:wxIcon) !foreign method "SetIcon",
	HasIcon                  :: (self:wxAboutDialogInfo) -> bool !foreign method "HasIcon",
	GetIcon                  :: (self:wxAboutDialogInfo) -> wxIcon !foreign method "GetIcon",
	SetWebSite               :: (self:wxAboutDialogInfo, url:wxString|string, desc:wxString|string="") !foreign method "SetWebSite",
	HasWebSite               :: (self:wxAboutDialogInfo) -> bool !foreign method "HasWebSite",
	GetWebSiteURL            :: (self:wxAboutDialogInfo) -> string !foreign method "GetWebSiteURL",
	GetWebSiteDescription    :: (self:wxAboutDialogInfo) -> string !foreign method "GetWebSiteDescription",
	SetDevelopers            :: (self:wxAboutDialogInfo, developers:wxArrayString|[]string) !foreign method "SetDevelopers",
	AddDeveloper             :: (self:wxAboutDialogInfo, developer:wxString|string) !foreign method "AddDeveloper",
	HasDevelopers            :: (self:wxAboutDialogInfo) -> bool !foreign method "HasDevelopers",
	GetDevelopers            :: (self:wxAboutDialogInfo) -> wxArrayString !foreign method "GetDevelopers",
	SetDocWriters            :: (self:wxAboutDialogInfo, docwriters:wxArrayString|[]string) !foreign method "SetDocWriters",
	AddDocWriter             :: (self:wxAboutDialogInfo, docwriter:wxString|string) !foreign method "AddDocWriter",
	HasDocWriters            :: (self:wxAboutDialogInfo) -> bool !foreign method "HasDocWriters",
	GetDocWriters            :: (self:wxAboutDialogInfo) -> wxArrayString !foreign method "GetDocWriters",
	SetArtists               :: (self:wxAboutDialogInfo, artists:wxArrayString|[]string) !foreign method "SetArtists",
	AddArtist                :: (self:wxAboutDialogInfo, artist:wxString|string) !foreign method "AddArtist",
	HasArtists               :: (self:wxAboutDialogInfo) -> bool !foreign method "HasArtists",
	GetArtists               :: (self:wxAboutDialogInfo) -> wxArrayString !foreign method "GetArtists",
	SetTranslators           :: (self:wxAboutDialogInfo, translators:wxArrayString|[]string) !foreign method "SetTranslators",
	AddTranslator            :: (self:wxAboutDialogInfo, translator:wxString|string) !foreign method "AddTranslator",
	HasTranslators           :: (self:wxAboutDialogInfo) -> bool !foreign method "HasTranslators",
	GetTranslators           :: (self:wxAboutDialogInfo) -> wxArrayString !foreign method "GetTranslators",
	IsSimple                 :: (self:wxAboutDialogInfo) -> bool !foreign method "IsSimple",
	GetDescriptionAndCredits :: (self:wxAboutDialogInfo) -> string !foreign method "GetDescriptionAndCredits",
}

export wxAnimation :: !foreign struct {
	using wxGDIObject,

	!call :: () -> wxAnimation !foreign lua "wx.wxAnimation",
	!call :: (anim:wxAnimation) -> wxAnimation !foreign lua "wx.wxAnimation",

	IsOk          :: (self:wxAnimation) -> bool !foreign method "IsOk",
	GetDelay      :: (self:wxAnimation, frame:int) -> int !foreign method "GetDelay",
	GetFrameCount :: (self:wxAnimation) -> int !foreign method "GetFrameCount",
	GetFrame      :: (self:wxAnimation, frame:int) -> wxImage !foreign method "GetFrame",
	GetSize       :: (self:wxAnimation) -> wxSize !foreign method "GetSize",
	LoadFile      :: (self:wxAnimation, name:wxString|string, type:wxAnimationType=wxANIMATION_TYPE_ANY) -> bool !foreign method "LoadFile",
	Load          :: (self:wxAnimation, stream:wxInputStream, type:wxAnimationType=wxANIMATION_TYPE_ANY) -> bool !foreign method "Load",
}

export wxAnimationCtrl :: !foreign struct {
	using wxControl,

	!call :: () -> wxAnimationCtrl !foreign lua "wx.wxAnimationCtrl",
	!call :: (parent:wxWindow, id:wxWindowID, anim:wxAnimation, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxAC_DEFAULT_STYLE, name:wxString|string="wxAnimationCtrl") -> wxAnimationCtrl !foreign lua "wx.wxAnimationCtrl",

	Create            :: (self:wxAnimationCtrl, parent:wxWindow, id:wxWindowID, anim:wxAnimation, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxAC_DEFAULT_STYLE, name:wxString|string="wxAnimationCtrl") -> bool !foreign method "Create",
	GetAnimation      :: (self:wxAnimationCtrl) -> wxAnimation !foreign method "GetAnimation",
	GetInactiveBitmap :: (self:wxAnimationCtrl) -> wxBitmap !foreign method "GetInactiveBitmap",
	IsPlaying         :: (self:wxAnimationCtrl) -> bool !foreign method "IsPlaying",
	LoadFile          :: (self:wxAnimationCtrl, file:wxString|string, animType:wxAnimationType=wxANIMATION_TYPE_ANY) -> bool !foreign method "LoadFile",
	Play              :: (self:wxAnimationCtrl) -> bool !foreign method "Play",
	SetAnimation      :: (self:wxAnimationCtrl, anim:wxAnimation) !foreign method "SetAnimation",
	SetInactiveBitmap :: (self:wxAnimationCtrl, bmp:wxBitmap) !foreign method "SetInactiveBitmap",
	Stop              :: (self:wxAnimationCtrl) !foreign method "Stop",
}

export wxBitmapComboBox :: !foreign struct {
	using wxLuaUserdata,

	!call :: () -> wxBitmapComboBox !foreign lua "wx.wxBitmapComboBox",
	!call :: (parent:wxWindow, id:wxWindowID, value:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, choices:wxArrayString|[]string=wxArrayString.null, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxBitmapComboBox") -> wxBitmapComboBox !foreign lua "wx.wxBitmapComboBox",

	Create        :: (self:wxBitmapComboBox, parent:wxWindow, id:wxWindowID, value:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, choices:wxArrayString|[]string=wxArrayString.null, style:int--[[long]]=0, validator:wxValidator=wxDefaultValidator, name:wxString|string="wxBitmapComboBox") -> bool !foreign method "Create",
	Append        :: (self:wxBitmapComboBox, item:wxString|string, bitmap:wxBitmap=wxNullBitmap) -> int !foreign method "Append",
	Append        :: (self:wxBitmapComboBox, item:wxString|string, bitmap:wxBitmap, data:int--[[voidptr_long]]) -> int !foreign method "Append",
	Append        :: (self:wxBitmapComboBox, item:wxString|string, bitmap:wxBitmap, clientData:wxClientData) -> int !foreign method "Append",
	GetBitmapSize :: (self:wxBitmapComboBox) -> wxSize !foreign method "GetBitmapSize",
	GetItemBitmap :: (self:wxBitmapComboBox, n:int) -> wxBitmap !foreign method "GetItemBitmap",
	Insert        :: (self:wxBitmapComboBox, item:wxString|string, bitmap:wxBitmap, pos:int) -> int !foreign method "Insert",
	Insert        :: (self:wxBitmapComboBox, item:wxString|string, bitmap:wxBitmap, pos:int, data:int--[[voidptr_long]]) -> int !foreign method "Insert",
	Insert        :: (self:wxBitmapComboBox, item:wxString|string, bitmap:wxBitmap, pos:int, clientData:wxClientData) -> int !foreign method "Insert",
	SetItemBitmap :: (self:wxBitmapComboBox, n:int, bitmap:wxBitmap) !foreign method "SetItemBitmap",
}

export wxCalendarCtrl :: !foreign struct {
	using wxControl,

	!call :: (parent:wxWindow, id:wxWindowID, date:wxDateTime=wxDefaultDateTime, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxCAL_SHOW_HOLIDAYS, name:wxString|string="wxCalendarCtrl") -> wxCalendarCtrl !foreign lua "wx.wxCalendarCtrl",

	SetDate              :: (self:wxCalendarCtrl, date:wxDateTime) !foreign method "SetDate",
	GetDate              :: (self:wxCalendarCtrl) -> wxDateTime !foreign method "GetDate",
	EnableYearChange     :: (self:wxCalendarCtrl, enable:bool=true) !foreign method "EnableYearChange",
	EnableMonthChange    :: (self:wxCalendarCtrl, enable:bool=true) !foreign method "EnableMonthChange",
	EnableHolidayDisplay :: (self:wxCalendarCtrl, display:bool=true) !foreign method "EnableHolidayDisplay",
	SetHeaderColours     :: (self:wxCalendarCtrl, colFg:wxColour, colBg:wxColour) !foreign method "SetHeaderColours",
	GetHeaderColourFg    :: (self:wxCalendarCtrl) -> wxColour !foreign method "GetHeaderColourFg",
	GetHeaderColourBg    :: (self:wxCalendarCtrl) -> wxColour !foreign method "GetHeaderColourBg",
	SetHighlightColours  :: (self:wxCalendarCtrl, colFg:wxColour, colBg:wxColour) !foreign method "SetHighlightColours",
	GetHighlightColourFg :: (self:wxCalendarCtrl) -> wxColour !foreign method "GetHighlightColourFg",
	GetHighlightColourBg :: (self:wxCalendarCtrl) -> wxColour !foreign method "GetHighlightColourBg",
	SetHolidayColours    :: (self:wxCalendarCtrl, colFg:wxColour, colBg:wxColour) !foreign method "SetHolidayColours",
	GetHolidayColourFg   :: (self:wxCalendarCtrl) -> wxColour !foreign method "GetHolidayColourFg",
	GetHolidayColourBg   :: (self:wxCalendarCtrl) -> wxColour !foreign method "GetHolidayColourBg",
	GetAttr              :: (self:wxCalendarCtrl, day:int--[[size_t]]) -> wxCalendarDateAttr !foreign method "GetAttr",
	SetAttr              :: (self:wxCalendarCtrl, day:int--[[size_t]], attr:wxCalendarDateAttr) !foreign method "SetAttr",
	SetHoliday           :: (self:wxCalendarCtrl, day:int--[[size_t]]) !foreign method "SetHoliday",
	ResetAttr            :: (self:wxCalendarCtrl, day:int--[[size_t]]) !foreign method "ResetAttr",
	HitTest              :: (self:wxCalendarCtrl, pos:wxPoint) -> wxCalendarHitTestResult, wxDateTime, wxDateTime.WeekDay !foreign method "HitTest",
}

export wxCalendarDateAttr :: !foreign struct {
	using wxLuaUserdata,

	!call :: () -> wxCalendarDateAttr !foreign lua "wx.wxCalendarDateAttr",
	!call :: (colText:wxColour, colBack:wxColour=wxNullColour, colBorder:wxColour=wxNullColour, font:wxFont=wxNullFont, border:wxCalendarDateBorder=wxCAL_BORDER_NONE) -> wxCalendarDateAttr !foreign lua "wx.wxCalendarDateAttr",
	!call :: (border:wxCalendarDateBorder, colBorder:wxColour=wxNullColour) -> wxCalendarDateAttr !foreign lua "wx.wxCalendarDateAttr",

	SetTextColour       :: (self:wxCalendarDateAttr, colText:wxColour) !foreign method "SetTextColour",
	SetBackgroundColour :: (self:wxCalendarDateAttr, colBack:wxColour) !foreign method "SetBackgroundColour",
	SetBorderColour     :: (self:wxCalendarDateAttr, col:wxColour) !foreign method "SetBorderColour",
	SetFont             :: (self:wxCalendarDateAttr, font:wxFont) !foreign method "SetFont",
	SetBorder           :: (self:wxCalendarDateAttr, border:wxCalendarDateBorder) !foreign method "SetBorder",
	SetHoliday          :: (self:wxCalendarDateAttr, holiday:bool) !foreign method "SetHoliday",
	HasTextColour       :: (self:wxCalendarDateAttr) -> bool !foreign method "HasTextColour",
	HasBackgroundColour :: (self:wxCalendarDateAttr) -> bool !foreign method "HasBackgroundColour",
	HasBorderColour     :: (self:wxCalendarDateAttr) -> bool !foreign method "HasBorderColour",
	HasFont             :: (self:wxCalendarDateAttr) -> bool !foreign method "HasFont",
	HasBorder           :: (self:wxCalendarDateAttr) -> bool !foreign method "HasBorder",
	IsHoliday           :: (self:wxCalendarDateAttr) -> bool !foreign method "IsHoliday",
	GetTextColour       :: (self:wxCalendarDateAttr) -> wxColour !foreign method "GetTextColour",
	GetBackgroundColour :: (self:wxCalendarDateAttr) -> wxColour !foreign method "GetBackgroundColour",
	GetBorderColour     :: (self:wxCalendarDateAttr) -> wxColour !foreign method "GetBorderColour",
	GetFont             :: (self:wxCalendarDateAttr) -> wxFont !foreign method "GetFont",
	GetBorder           :: (self:wxCalendarDateAttr) -> wxCalendarDateBorder !foreign method "GetBorder",
}

export wxDateEvent :: !foreign struct {
	using wxCommandEvent,

	!call :: (win:wxWindow, dt:wxDateTime, type:wxEventType) -> wxDateEvent !foreign lua "wx.wxDateEvent",

	GetDate :: (self:wxDateEvent) -> wxDateTime !foreign method "GetDate",
	SetDate :: (self:wxDateEvent, date:wxDateTime) !foreign method "SetDate",
}

export wxCalendarEvent :: !foreign struct {
	using wxDateEvent,

	!call :: (cal:wxCalendarCtrl, type:wxEventType) -> wxCalendarEvent !foreign lua "wx.wxCalendarEvent",

	GetWeekDay :: (self:wxCalendarEvent) -> wxDateTime.WeekDay !foreign method "GetWeekDay",
	SetWeekDay :: (self:wxCalendarEvent, wd:wxDateTime.WeekDay) !foreign method "SetWeekDay",
}

export wxHyperlinkCtrl :: !foreign struct {
	using wxControl,

	!call :: () -> wxHyperlinkCtrl !foreign lua "wx.wxHyperlinkCtrl",
	!call :: (parent:wxWindow, id:wxWindowID, label:wxString|string, url:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxHL_DEFAULT_STYLE, name:wxString|string="wxHyperlinkCtrl") -> wxHyperlinkCtrl !foreign lua "wx.wxHyperlinkCtrl",

	Create           :: (self:wxHyperlinkCtrl, parent:wxWindow, id:wxWindowID, label:wxString|string, url:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxHL_DEFAULT_STYLE, name:wxString|string="wxHyperlinkCtrl") -> bool !foreign method "Create",
	GetHoverColour   :: (self:wxHyperlinkCtrl) -> wxColour !foreign method "GetHoverColour",
	GetNormalColour  :: (self:wxHyperlinkCtrl) -> wxColour !foreign method "GetNormalColour",
	GetVisitedColour :: (self:wxHyperlinkCtrl) -> wxColour !foreign method "GetVisitedColour",
	GetVisited       :: (self:wxHyperlinkCtrl) -> bool !foreign method "GetVisited",
	GetURL           :: (self:wxHyperlinkCtrl) -> string !foreign method "GetURL",
	SetHoverColour   :: (self:wxHyperlinkCtrl, colour:wxColour) !foreign method "SetHoverColour",
	SetNormalColour  :: (self:wxHyperlinkCtrl, colour:wxColour) !foreign method "SetNormalColour",
	SetVisitedColour :: (self:wxHyperlinkCtrl, colour:wxColour) !foreign method "SetVisitedColour",
	SetVisited       :: (self:wxHyperlinkCtrl, visited:bool=true) !foreign method "SetVisited",
	SetURL           :: (self:wxHyperlinkCtrl, url:wxString|string) !foreign method "SetURL",
}

export wxHyperlinkEvent :: !foreign struct {
	using wxCommandEvent,

	!call :: (generator:wxObject, id:wxWindowID, url:wxString|string) -> wxHyperlinkEvent !foreign lua "wx.wxHyperlinkEvent",

	GetURL :: (self:wxHyperlinkEvent) -> string !foreign method "GetURL",
	SetURL :: (self:wxHyperlinkEvent, url:wxString|string) !foreign method "SetURL",
}

export wxSashWindow :: !foreign struct {
	using wxWindow,

	!call :: () -> wxSashWindow !foreign lua "wx.wxSashWindow",
	!call :: (parent:wxWindow, id:wxWindowID=-1, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxSW_3D|wxCLIP_CHILDREN)]], name:wxString|string="wxSashWindow") -> wxSashWindow !foreign lua "wx.wxSashWindow",

	GetSashVisible  :: (self:wxSashWindow, edge:wxSashEdgePosition) -> bool !foreign method "GetSashVisible",
	GetMaximumSizeX :: (self:wxSashWindow) -> int !foreign method "GetMaximumSizeX",
	GetMaximumSizeY :: (self:wxSashWindow) -> int !foreign method "GetMaximumSizeY",
	GetMinimumSizeX :: (self:wxSashWindow) -> int !foreign method "GetMinimumSizeX",
	GetMinimumSizeY :: (self:wxSashWindow) -> int !foreign method "GetMinimumSizeY",
	HasBorder       :: (self:wxSashWindow, edge:wxSashEdgePosition) -> bool !foreign method "HasBorder",
	SetMaximumSizeX :: (self:wxSashWindow, min:int) !foreign method "SetMaximumSizeX",
	SetMaximumSizeY :: (self:wxSashWindow, min:int) !foreign method "SetMaximumSizeY",
	SetMinimumSizeX :: (self:wxSashWindow, min:int) !foreign method "SetMinimumSizeX",
	SetMinimumSizeY :: (self:wxSashWindow, min:int) !foreign method "SetMinimumSizeY",
	SetSashVisible  :: (self:wxSashWindow, edge:wxSashEdgePosition, visible:bool) !foreign method "SetSashVisible",
	SetSashBorder   :: (self:wxSashWindow, edge:wxSashEdgePosition, hasBorder:bool) !foreign method "SetSashBorder",
}

export wxSashLayoutWindow :: !foreign struct {
	using wxSashWindow,

	!call :: () -> wxSashLayoutWindow !foreign lua "wx.wxSashLayoutWindow",
	!call :: (parent:wxWindow, id:wxWindowID=-1, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxSW_3D|wxCLIP_CHILDREN)]], name:wxString|string="wxSashLayoutWindow") -> wxSashLayoutWindow !foreign lua "wx.wxSashLayoutWindow",

	Create         :: (self:wxSashLayoutWindow, parent:wxWindow, id:wxWindowID=-1, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxSW_3D|wxCLIP_CHILDREN)]], name:wxString|string="wxSashLayoutWindow") -> bool !foreign method "Create",
	GetAlignment   :: (self:wxSashLayoutWindow) -> wxLayoutAlignment !foreign method "GetAlignment",
	GetOrientation :: (self:wxSashLayoutWindow) -> wxLayoutOrientation !foreign method "GetOrientation",
	SetAlignment   :: (self:wxSashLayoutWindow, alignment:wxLayoutAlignment) !foreign method "SetAlignment",
	SetDefaultSize :: (self:wxSashLayoutWindow, size:wxSize) !foreign method "SetDefaultSize",
	SetOrientation :: (self:wxSashLayoutWindow, orientation:wxLayoutOrientation) !foreign method "SetOrientation",
}

export wxLayoutAlgorithm :: !foreign struct {
	using wxObject,

	!call :: () -> wxLayoutAlgorithm !foreign lua "wx.wxLayoutAlgorithm",

	LayoutFrame    :: (self:wxLayoutAlgorithm, frame:wxFrame, mainWindow:wxWindow=wxWindow.null) -> bool !foreign method "LayoutFrame",
	LayoutMDIFrame :: (self:wxLayoutAlgorithm, frame:wxMDIParentFrame, rect:wxRect=wxRect.null) -> bool !foreign method "LayoutMDIFrame",
	LayoutWindow   :: (self:wxLayoutAlgorithm, frame:wxWindow, mainWindow:wxWindow=wxWindow.null) -> bool !foreign method "LayoutWindow",
}

export wxQueryLayoutInfoEvent :: !foreign struct {
	using wxEvent,

	!call :: (id:wxWindowID=0) -> wxQueryLayoutInfoEvent !foreign lua "wx.wxQueryLayoutInfoEvent",

	GetAlignment       :: (self:wxQueryLayoutInfoEvent) -> wxLayoutAlignment !foreign method "GetAlignment",
	GetFlags           :: (self:wxQueryLayoutInfoEvent) -> int !foreign method "GetFlags",
	GetOrientation     :: (self:wxQueryLayoutInfoEvent) -> wxLayoutOrientation !foreign method "GetOrientation",
	GetRequestedLength :: (self:wxQueryLayoutInfoEvent) -> int !foreign method "GetRequestedLength",
	GetSize            :: (self:wxQueryLayoutInfoEvent) -> wxSize !foreign method "GetSize",
	SetAlignment       :: (self:wxQueryLayoutInfoEvent, alignment:wxLayoutAlignment) !foreign method "SetAlignment",
	SetFlags           :: (self:wxQueryLayoutInfoEvent, flags:int) !foreign method "SetFlags",
	SetOrientation     :: (self:wxQueryLayoutInfoEvent, orientation:wxLayoutOrientation) !foreign method "SetOrientation",
	SetRequestedLength :: (self:wxQueryLayoutInfoEvent, length:int) !foreign method "SetRequestedLength",
	SetSize            :: (self:wxQueryLayoutInfoEvent, size:wxSize) !foreign method "SetSize",
}

export wxCalculateLayoutEvent :: !foreign struct {
	using wxEvent,

	!call :: (id:wxWindowID=0) -> wxCalculateLayoutEvent !foreign lua "wx.wxCalculateLayoutEvent",

	GetFlags :: (self:wxCalculateLayoutEvent) -> int !foreign method "GetFlags",
	GetRect  :: (self:wxCalculateLayoutEvent) -> wxRect !foreign method "GetRect",
	SetFlags :: (self:wxCalculateLayoutEvent, flags:int) !foreign method "SetFlags",
	SetRect  :: (self:wxCalculateLayoutEvent, rect:wxRect) !foreign method "SetRect",
}

export wxSashEvent :: !foreign struct {
	using wxCommandEvent,

	!call :: (id:int=0, edge:wxSashEdgePosition=wxSASH_NONE) -> wxSashEvent !foreign lua "wx.wxSashEvent",

	SetEdge       :: (self:wxSashEvent, edge:wxSashEdgePosition) !foreign method "SetEdge",
	GetEdge       :: (self:wxSashEvent) -> int !foreign method "GetEdge",
	SetDragRect   :: (self:wxSashEvent, rect:wxRect) !foreign method "SetDragRect",
	GetDragRect   :: (self:wxSashEvent) -> wxRect !foreign method "GetDragRect",
	SetDragStatus :: (self:wxSashEvent, status:wxSashDragStatus) !foreign method "SetDragStatus",
	GetDragStatus :: (self:wxSashEvent) -> int !foreign method "GetDragStatus",
}

export wxSplashScreen :: !foreign struct {
	using wxFrame,

	!call :: (bitmap:wxBitmap, splashStyle:int--[[long]], milliseconds:int, parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxSIMPLE_BORDER|wxFRAME_NO_TASKBAR|wxSTAY_ON_TOP)]]) -> wxSplashScreen !foreign lua "wx.wxSplashScreen",

	GetSplashStyle  :: (self:wxSplashScreen) -> int--[[long]] !foreign method "GetSplashStyle",
	GetSplashWindow :: (self:wxSplashScreen) -> wxSplashScreenWindow !foreign method "GetSplashWindow",
	GetTimeout      :: (self:wxSplashScreen) -> int !foreign method "GetTimeout",
}

export wxSplashScreenWindow :: !foreign struct {
	using wxWindow,

	SetBitmap :: (self:wxSplashScreenWindow, bitmap:wxBitmap) !foreign method "SetBitmap",
	GetBitmap :: (self:wxSplashScreenWindow) -> wxBitmap !foreign method "GetBitmap",
}

export wxWizard :: !foreign struct {
	using wxDialog,

	null: wxWizard : !foreign lua "wx.NULL",

	!call :: () -> wxWizard !foreign lua "wx.wxWizard",
	!call :: (parent:wxWindow, id:int=-1, title:wxString|string="", bitmap:wxBitmap=wxNullBitmap, pos:wxPoint=wxDefaultPosition, style:int--[[long]]=wxDEFAULT_DIALOG_STYLE) -> wxWizard !foreign lua "wx.wxWizard",

	Create           :: (self:wxWizard, parent:wxWindow, id:int=-1, title:wxString|string="", bitmap:wxBitmap=wxNullBitmap, pos:wxPoint=wxDefaultPosition, style:int--[[long]]=wxDEFAULT_DIALOG_STYLE) -> bool !foreign method "Create",
	GetCurrentPage   :: (self:wxWizard) -> wxWizardPage !foreign method "GetCurrentPage",
	GetPageAreaSizer :: (self:wxWizard) -> wxSizer !foreign method "GetPageAreaSizer",
	GetPageSize      :: (self:wxWizard) -> wxSize !foreign method "GetPageSize",
	HasNextPage      :: (self:wxWizard, page:wxWizardPage) -> bool !foreign method "HasNextPage",
	HasPrevPage      :: (self:wxWizard, page:wxWizardPage) -> bool !foreign method "HasPrevPage",
	RunWizard        :: (self:wxWizard, firstPage:wxWizardPage) -> bool !foreign method "RunWizard",
	SetPageSize      :: (self:wxWizard, sizePage:wxSize) !foreign method "SetPageSize",
	SetBorder        :: (self:wxWizard, border:int) !foreign method "SetBorder",
}

export wxWizardPage :: !foreign struct {
	using wxPanel,

	null: wxWizardPage : !foreign lua "wx.NULL",

	GetBitmap :: (self:wxWizardPage) -> wxBitmap !foreign method "GetBitmap",
}

export wxWizardPageSimple :: !foreign struct {
	using wxWizardPage,

	!call :: (parent:wxWizard=wxWizard.null, prev:wxWizardPage=wxWizardPage.null, next:wxWizardPage=wxWizardPage.null, bitmap:wxBitmap=wxNullBitmap) -> wxWizardPageSimple !foreign lua "wx.wxWizardPageSimple",
	Chain :: (first:wxWizardPageSimple, second:wxWizardPageSimple) !foreign lua "wx.wxWizardPageSimple.Chain",

	GetPrev :: (self:wxWizardPageSimple) -> wxWizardPage !foreign method "GetPrev",
	GetNext :: (self:wxWizardPageSimple) -> wxWizardPage !foreign method "GetNext",
	SetPrev :: (self:wxWizardPageSimple, prev:wxWizardPage) !foreign method "SetPrev",
	SetNext :: (self:wxWizardPageSimple, next:wxWizardPage) !foreign method "SetNext",
}

export wxWizardEvent :: !foreign struct {
	using wxNotifyEvent,

	!call :: (type:wxEventType=wxEVT_NULL, id:int=-1, direction:bool=true) -> wxWizardEvent !foreign lua "wx.wxWizardEvent",

	GetDirection :: (self:wxWizardEvent) -> bool !foreign method "GetDirection",
	GetPage      :: (self:wxWizardEvent) -> wxWizardPage !foreign method "GetPage",
}

export wxTaskBarIcon :: !foreign struct {
	using wxEvtHandler,

	!call :: () -> wxTaskBarIcon !foreign lua "wx.wxTaskBarIcon",

	IsIconInstalled :: (self:wxTaskBarIcon) -> bool !foreign method "IsIconInstalled",
	IsOk            :: (self:wxTaskBarIcon) -> bool !foreign method "IsOk",
	PopupMenu       :: (self:wxTaskBarIcon, menu:wxMenu) -> bool !foreign method "PopupMenu",
	RemoveIcon      :: (self:wxTaskBarIcon) -> bool !foreign method "RemoveIcon",
	SetIcon         :: (self:wxTaskBarIcon, icon:wxIcon, tooltip:wxString|string) -> bool !foreign method "SetIcon",
}

export wxTaskBarIconEvent :: !foreign struct {
	using wxEvent,

	!call :: (evtType:wxEventType, tbIcon:wxTaskBarIcon) -> wxTaskBarIconEvent !foreign lua "wx.wxTaskBarIconEvent",
}

export wxJoystick :: !foreign struct {
	using wxObject,

	!call              :: (joystick:int=wxJOYSTICK1) -> wxJoystick !foreign lua "wx.wxJoystick",
	GetNumberJoysticks :: () -> int !foreign lua "wx.wxJoystick.GetNumberJoysticks",

	GetButtonState       :: (self:wxJoystick) -> int !foreign method "GetButtonState",
	GetManufacturerId    :: (self:wxJoystick) -> int !foreign method "GetManufacturerId",
	GetMovementThreshold :: (self:wxJoystick) -> int !foreign method "GetMovementThreshold",
	GetNumberAxes        :: (self:wxJoystick) -> int !foreign method "GetNumberAxes",
	GetNumberButtons     :: (self:wxJoystick) -> int !foreign method "GetNumberButtons",
	GetPollingMax        :: (self:wxJoystick) -> int !foreign method "GetPollingMax",
	GetPollingMin        :: (self:wxJoystick) -> int !foreign method "GetPollingMin",
	GetProductId         :: (self:wxJoystick) -> int !foreign method "GetProductId",
	GetProductName       :: (self:wxJoystick) -> string !foreign method "GetProductName",
	GetPosition          :: (self:wxJoystick) -> wxPoint !foreign method "GetPosition",
	GetPOVPosition       :: (self:wxJoystick) -> int !foreign method "GetPOVPosition",
	GetPOVCTSPosition    :: (self:wxJoystick) -> int !foreign method "GetPOVCTSPosition",
	GetRudderMax         :: (self:wxJoystick) -> int !foreign method "GetRudderMax",
	GetRudderMin         :: (self:wxJoystick) -> int !foreign method "GetRudderMin",
	GetRudderPosition    :: (self:wxJoystick) -> int !foreign method "GetRudderPosition",
	GetUMax              :: (self:wxJoystick) -> int !foreign method "GetUMax",
	GetUMin              :: (self:wxJoystick) -> int !foreign method "GetUMin",
	GetUPosition         :: (self:wxJoystick) -> int !foreign method "GetUPosition",
	GetVMax              :: (self:wxJoystick) -> int !foreign method "GetVMax",
	GetVMin              :: (self:wxJoystick) -> int !foreign method "GetVMin",
	GetVPosition         :: (self:wxJoystick) -> int !foreign method "GetVPosition",
	GetXMax              :: (self:wxJoystick) -> int !foreign method "GetXMax",
	GetXMin              :: (self:wxJoystick) -> int !foreign method "GetXMin",
	GetYMax              :: (self:wxJoystick) -> int !foreign method "GetYMax",
	GetYMin              :: (self:wxJoystick) -> int !foreign method "GetYMin",
	GetZMax              :: (self:wxJoystick) -> int !foreign method "GetZMax",
	GetZMin              :: (self:wxJoystick) -> int !foreign method "GetZMin",
	GetZPosition         :: (self:wxJoystick) -> int !foreign method "GetZPosition",
	HasPOV               :: (self:wxJoystick) -> bool !foreign method "HasPOV",
	HasPOV4Dir           :: (self:wxJoystick) -> bool !foreign method "HasPOV4Dir",
	HasPOVCTS            :: (self:wxJoystick) -> bool !foreign method "HasPOVCTS",
	HasRudder            :: (self:wxJoystick) -> bool !foreign method "HasRudder",
	HasU                 :: (self:wxJoystick) -> bool !foreign method "HasU",
	HasV                 :: (self:wxJoystick) -> bool !foreign method "HasV",
	HasZ                 :: (self:wxJoystick) -> bool !foreign method "HasZ",
	IsOk                 :: (self:wxJoystick) -> bool !foreign method "IsOk",
	ReleaseCapture       :: (self:wxJoystick) -> bool !foreign method "ReleaseCapture",
	SetCapture           :: (self:wxJoystick, win:wxWindow, pollingFreq:int=0) -> bool !foreign method "SetCapture",
	SetMovementThreshold :: (self:wxJoystick, threshold:int) !foreign method "SetMovementThreshold",
}

export wxJoystickEvent :: !foreign struct {
	using wxEvent,

	!call :: (eventType:wxEventType=wxEVT_NULL, state:int=0, joystick:int=wxJOYSTICK1, change:int=0) -> wxJoystickEvent !foreign lua "wx.wxJoystickEvent",

	ButtonDown      :: (self:wxJoystickEvent, button:int=wxJOY_BUTTON_ANY) -> bool !foreign method "ButtonDown",
	ButtonIsDown    :: (self:wxJoystickEvent, button:int=wxJOY_BUTTON_ANY) -> bool !foreign method "ButtonIsDown",
	ButtonUp        :: (self:wxJoystickEvent, button:int=wxJOY_BUTTON_ANY) -> bool !foreign method "ButtonUp",
	GetButtonChange :: (self:wxJoystickEvent) -> int !foreign method "GetButtonChange",
	GetButtonState  :: (self:wxJoystickEvent) -> int !foreign method "GetButtonState",
	GetJoystick     :: (self:wxJoystickEvent) -> int !foreign method "GetJoystick",
	GetPosition     :: (self:wxJoystickEvent) -> wxPoint !foreign method "GetPosition",
	GetZPosition    :: (self:wxJoystickEvent) -> int !foreign method "GetZPosition",
	IsButton        :: (self:wxJoystickEvent) -> bool !foreign method "IsButton",
	IsMove          :: (self:wxJoystickEvent) -> bool !foreign method "IsMove",
	IsZMove         :: (self:wxJoystickEvent) -> bool !foreign method "IsZMove",
}

export wxSound :: !foreign struct {
	using wxObject,

	!call :: () -> wxSound !foreign lua "wx.wxSound",
	!call :: (fileName:wxString|string, isResource:bool=false) -> wxSound !foreign lua "wx.wxSound",
	Play  :: (filename:wxString|string, flags:int=wxSOUND_ASYNC) -> bool !foreign lua "wx.wxSound.Play",
	Stop  :: () !foreign lua "wx.wxSound.Stop",

	Create :: (self:wxSound, fileName:wxString|string, isResource:bool=false) -> bool !foreign method "Create",
	IsOk   :: (self:wxSound) -> bool !foreign method "IsOk",
	Play   :: (self:wxSound, flags:int=wxSOUND_ASYNC) -> bool !foreign method "Play",
}

export wxAboutBox :: (info:wxAboutDialogInfo) !foreign lua "wx.wxAboutBox"
