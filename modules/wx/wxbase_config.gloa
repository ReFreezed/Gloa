--[[============================================================
--=
--=  wxLua/wxWidget bindings for GlÃ³a
--=  Interface source: wxbase_config.i
--=
--=  Tested with:
--=  - wxLua 2.8.7.0 / wxWidgets 2.8.8
--=
--=  Note: Most bindings have not been tested yet!
--=
--============================================================]]

!import "wx/common"


export wxCONFIG_USE_LOCAL_FILE:           wxEnum : !foreign lua "wx.wxCONFIG_USE_LOCAL_FILE"
export wxCONFIG_USE_GLOBAL_FILE:          wxEnum : !foreign lua "wx.wxCONFIG_USE_GLOBAL_FILE"
export wxCONFIG_USE_RELATIVE_PATH:        wxEnum : !foreign lua "wx.wxCONFIG_USE_RELATIVE_PATH"
export wxCONFIG_USE_NO_ESCAPE_CHARACTERS: wxEnum : !foreign lua "wx.wxCONFIG_USE_NO_ESCAPE_CHARACTERS"
export wxCONFIG_USE_SUBDIR:               wxEnum : !foreign lua "wx.wxCONFIG_USE_SUBDIR"

export wxConfigBase :: !foreign struct {
	using wxLuaUserdata,

	null: wxConfigBase : !foreign lua "wx.NULL",

	EntryType :: wxEnum,
	Type_Unknown: EntryType : !foreign lua "wx.wxConfigBase.Type_Unknown",
	Type_String:  EntryType : !foreign lua "wx.wxConfigBase.Type_String",
	Type_Boolean: EntryType : !foreign lua "wx.wxConfigBase.Type_Boolean",
	Type_Integer: EntryType : !foreign lua "wx.wxConfigBase.Type_Integer",
	Type_Float:   EntryType : !foreign lua "wx.wxConfigBase.Type_Float",

	Create             :: () -> wxConfigBase !foreign lua "wx.wxConfigBase.Create",
	DontCreateOnDemand :: () !foreign lua "wx.wxConfigBase.DontCreateOnDemand",
	Get                :: (CreateOnDemand:bool=true) -> wxConfigBase !foreign lua "wx.wxConfigBase.Get",
	Set                :: (pConfig:wxConfigBase=wxConfigBase.null) -> wxConfigBase !foreign lua "wx.wxConfigBase.Set",

	DeleteAll           :: (self:wxConfigBase) -> bool !foreign method "DeleteAll",
	DeleteEntry         :: (self:wxConfigBase, key:wxString|string, bDeleteGroupIfEmpty:bool=true) -> bool !foreign method "DeleteEntry",
	DeleteGroup         :: (self:wxConfigBase, key:wxString|string) -> bool !foreign method "DeleteGroup",
	Exists              :: (self:wxConfigBase, strName:wxString|string) -> bool !foreign method "Exists",
	Flush               :: (self:wxConfigBase, bCurrentOnly:bool=false) -> bool !foreign method "Flush",
	GetAppName          :: (self:wxConfigBase) -> string !foreign method "GetAppName",
	GetEntryType        :: (self:wxConfigBase, name:wxString|string) -> wxConfigBase.EntryType !foreign method "GetEntryType",
	GetFirstGroup       :: (self:wxConfigBase) -> bool, string, int--[[long]] !foreign method "GetFirstGroup",
	GetFirstEntry       :: (self:wxConfigBase) -> bool, string, int--[[long]] !foreign method "GetFirstEntry",
	GetNextGroup        :: (self:wxConfigBase, index:int--[[long]]) -> bool, string, int--[[long]] !foreign method "GetNextGroup",
	GetNextEntry        :: (self:wxConfigBase, index:int--[[long]]) -> bool, string, int--[[long]] !foreign method "GetNextEntry",
	GetNumberOfEntries  :: (self:wxConfigBase, bRecursive:bool=false) -> int !foreign method "GetNumberOfEntries",
	GetNumberOfGroups   :: (self:wxConfigBase, bRecursive:bool=false) -> int !foreign method "GetNumberOfGroups",
	GetPath             :: (self:wxConfigBase) -> string !foreign method "GetPath",
	GetVendorName       :: (self:wxConfigBase) -> string !foreign method "GetVendorName",
	HasEntry            :: (self:wxConfigBase, strName:wxString|string) -> bool !foreign method "HasEntry",
	HasGroup            :: (self:wxConfigBase, strName:wxString|string) -> bool !foreign method "HasGroup",
	IsExpandingEnvVars  :: (self:wxConfigBase) -> bool !foreign method "IsExpandingEnvVars",
	IsRecordingDefaults :: (self:wxConfigBase) -> bool !foreign method "IsRecordingDefaults",
	Read                :: (self:wxConfigBase, key:wxString|string, defaultVal:wxString|string="") -> bool, string !foreign method "Read",
	Read                :: (self:wxConfigBase, key:wxString|string, defaultVal:float--[[double]]) -> bool, float--[[double]] !foreign method "Read",
	RenameEntry         :: (self:wxConfigBase, oldName:wxString|string, newName:wxString|string) -> bool !foreign method "RenameEntry",
	RenameGroup         :: (self:wxConfigBase, oldName:wxString|string, newName:wxString|string) -> bool !foreign method "RenameGroup",
	SetExpandEnvVars    :: (self:wxConfigBase, bDoIt:bool=true) !foreign method "SetExpandEnvVars",
	SetPath             :: (self:wxConfigBase, strPath:wxString|string) !foreign method "SetPath",
	SetRecordDefaults   :: (self:wxConfigBase, bDoIt:bool=true) !foreign method "SetRecordDefaults",
	Write               :: (self:wxConfigBase, key:wxString|string, value:wxString|string) -> bool !foreign method "Write",
	Write               :: (self:wxConfigBase, key:wxString|string, value:float--[[double]]) -> bool !foreign method "Write",
}

export wxConfig :: !foreign struct {
	using wxConfigBase,

	!call :: (appName:wxString|string="", vendorName:wxString|string="", localFilename:wxString|string="", globalFilename:wxString|string="", style:int--[[long]]=0) -> wxConfig !foreign lua "wx.wxConfig",
}

export wxFileConfig :: !foreign struct {
	using wxConfigBase,

	!call :: (appName:wxString|string="", vendorName:wxString|string="", localFilename:wxString|string="", globalFilename:wxString|string="", style:int--[[long]]=0--[[bitwise(wxCONFIG_USE_LOCAL_FILE|wxCONFIG_USE_GLOBAL_FILE)]]) -> wxFileConfig !foreign lua "wx.wxFileConfig",

	SetUmask :: (self:wxFileConfig, mode:int) !foreign method "SetUmask",
}

export wxMemoryConfig :: !foreign struct {
	using wxFileConfig,

	!call :: () -> wxMemoryConfig !foreign lua "wx.wxMemoryConfig",
}

export wxConfigPathChanger :: !foreign struct {
	using wxLuaUserdata,

	!call :: (pContainer:wxConfigBase, strEntry:wxString|string) -> wxConfigPathChanger !foreign lua "wx.wxConfigPathChanger",

	Name            :: (self:wxConfigPathChanger) -> string !foreign method "Name",
	UpdateIfDeleted :: (self:wxConfigPathChanger) !foreign method "UpdateIfDeleted",
}
