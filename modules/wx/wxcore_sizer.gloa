--[[============================================================
--=
--=  wxLua/wxWidget bindings for GlÃ³a
--=  Interface source: wxcore_sizer.i
--=
--=  Tested with:
--=  - wxLua 2.8.7.0 / wxWidgets 2.8.8
--=
--=  Note: Most bindings have not been tested yet!
--=
--============================================================]]

!import "wx/common"
!import "wx/wxcore_defsutils"
!import "wx/wxcore_windows"
!import "wx/wxcore_gdi"
!import "wx/wxcore_controls"

export wxDefaultSpan: wxGBSpan : !foreign lua "wx.wxDefaultSpan" -- Does this exist in wxLua?


export wxFlexSizerGrowMode :: wxEnum
export wxFLEX_GROWMODE_NONE:      wxFlexSizerGrowMode : !foreign lua "wx.wxFLEX_GROWMODE_NONE"
export wxFLEX_GROWMODE_SPECIFIED: wxFlexSizerGrowMode : !foreign lua "wx.wxFLEX_GROWMODE_SPECIFIED"
export wxFLEX_GROWMODE_ALL:       wxFlexSizerGrowMode : !foreign lua "wx.wxFLEX_GROWMODE_ALL"

export wxSizerFlags :: !foreign struct {
	using wxLuaUserdata,

	!call            :: (proportion:int=0) -> wxSizerFlags !foreign lua "wx.wxSizerFlags",
	GetDefaultBorder :: () -> int !foreign lua "wx.wxSizerFlags.GetDefaultBorder",

	Proportion        :: (self:wxSizerFlags, proportion:int) -> wxSizerFlags !foreign method "Proportion",
	Align             :: (self:wxSizerFlags, alignment:int) -> wxSizerFlags !foreign method "Align",
	Expand            :: (self:wxSizerFlags) -> wxSizerFlags !foreign method "Expand",
	Centre            :: (self:wxSizerFlags) -> wxSizerFlags !foreign method "Centre",
	Center            :: (self:wxSizerFlags) -> wxSizerFlags !foreign method "Center",
	Left              :: (self:wxSizerFlags) -> wxSizerFlags !foreign method "Left",
	Right             :: (self:wxSizerFlags) -> wxSizerFlags !foreign method "Right",
	Top               :: (self:wxSizerFlags) -> wxSizerFlags !foreign method "Top",
	Bottom            :: (self:wxSizerFlags) -> wxSizerFlags !foreign method "Bottom",
	Border            :: (self:wxSizerFlags, direction:int, borderInPixels:int) -> wxSizerFlags !foreign method "Border",
	Border            :: (self:wxSizerFlags, direction:int=wxALL) -> wxSizerFlags !foreign method "Border",
	DoubleBorder      :: (self:wxSizerFlags, direction:int=wxALL) -> wxSizerFlags !foreign method "DoubleBorder",
	TripleBorder      :: (self:wxSizerFlags, direction:int=wxALL) -> wxSizerFlags !foreign method "TripleBorder",
	HorzBorder        :: (self:wxSizerFlags) -> wxSizerFlags !foreign method "HorzBorder",
	DoubleHorzBorder  :: (self:wxSizerFlags) -> wxSizerFlags !foreign method "DoubleHorzBorder",
	Shaped            :: (self:wxSizerFlags) -> wxSizerFlags !foreign method "Shaped",
	FixedMinSize      :: (self:wxSizerFlags) -> wxSizerFlags !foreign method "FixedMinSize",
	GetProportion     :: (self:wxSizerFlags) -> int !foreign method "GetProportion",
	GetFlags          :: (self:wxSizerFlags) -> int !foreign method "GetFlags",
	GetBorderInPixels :: (self:wxSizerFlags) -> int !foreign method "GetBorderInPixels",
}

export wxSizerItem :: !foreign struct {
	using wxObject,

	!call :: (width,height:int, proportion:int, flag:int, border:int, userData:wxObject) -> wxSizerItem !foreign lua "wx.wxSizerItem",
	!call :: (window:wxWindow, proportion:int, flag:int, border:int, userData:wxObject) -> wxSizerItem !foreign lua "wx.wxSizerItem",
	!call :: (sizer:wxSizer, proportion:int, flag:int, border:int, userData:wxObject) -> wxSizerItem !foreign lua "wx.wxSizerItem",

	CalcMin       :: (self:wxSizerItem) -> wxSize !foreign method "CalcMin",
	DeleteWindows :: (self:wxSizerItem) !foreign method "DeleteWindows",
	DetachSizer   :: (self:wxSizerItem) !foreign method "DetachSizer",
	GetBorder     :: (self:wxSizerItem) -> int !foreign method "GetBorder",
	GetFlag       :: (self:wxSizerItem) -> int !foreign method "GetFlag",
	GetMinSize    :: (self:wxSizerItem) -> wxSize !foreign method "GetMinSize",
	GetPosition   :: (self:wxSizerItem) -> wxPoint !foreign method "GetPosition",
	GetProportion :: (self:wxSizerItem) -> int !foreign method "GetProportion",
	GetRatio      :: (self:wxSizerItem) -> float !foreign method "GetRatio",
	GetRect       :: (self:wxSizerItem) -> wxRect !foreign method "GetRect",
	GetSize       :: (self:wxSizerItem) -> wxSize !foreign method "GetSize",
	GetSizer      :: (self:wxSizerItem) -> wxSizer !foreign method "GetSizer",
	GetSpacer     :: (self:wxSizerItem) -> wxSize !foreign method "GetSpacer",
	GetUserData   :: (self:wxSizerItem) -> wxObject !foreign method "GetUserData",
	GetWindow     :: (self:wxSizerItem) -> wxWindow !foreign method "GetWindow",
	IsShown       :: (self:wxSizerItem) -> bool !foreign method "IsShown",
	IsSizer       :: (self:wxSizerItem) -> bool !foreign method "IsSizer",
	IsSpacer      :: (self:wxSizerItem) -> bool !foreign method "IsSpacer",
	IsWindow      :: (self:wxSizerItem) -> bool !foreign method "IsWindow",
	SetBorder     :: (self:wxSizerItem, border:int) !foreign method "SetBorder",
	SetDimension  :: (self:wxSizerItem, pos:wxPoint, size:wxSize) !foreign method "SetDimension",
	SetFlag       :: (self:wxSizerItem, flag:int) !foreign method "SetFlag",
	SetInitSize   :: (self:wxSizerItem, x,y:int) !foreign method "SetInitSize",
	SetProportion :: (self:wxSizerItem, proportion:int) !foreign method "SetProportion",
	SetRatio      :: (self:wxSizerItem, width,height:int) !foreign method "SetRatio",
	SetRatio      :: (self:wxSizerItem, ratio:float) !foreign method "SetRatio",
	SetSizer      :: (self:wxSizerItem, sizer:wxSizer) !foreign method "SetSizer",
	SetSpacer     :: (self:wxSizerItem, size:wxSize) !foreign method "SetSpacer",
	SetWindow     :: (self:wxSizerItem, window:wxWindow) !foreign method "SetWindow",
	Show          :: (self:wxSizerItem, show:bool) !foreign method "Show",
}

export wxSizer :: !foreign struct {
	using wxObject,

	Add                  :: (self:wxSizer, window:wxWindow, proportion:int=0, flag:int=0, border:int=0, userData:wxObject=wxObject.null) -> wxSizerItem !foreign method "Add",
	Add                  :: (self:wxSizer, sizer:wxSizer, proportion:int=0, flag:int=0, border:int=0, userData:wxObject=wxObject.null) -> wxSizerItem !foreign method "Add",
	Add                  :: (self:wxSizer, width,height:int, proportion:int=0, flag:int=0, border:int=0, userData:wxObject=wxObject.null) -> wxSizerItem !foreign method "Add",
	AddSpacer            :: (self:wxSizer, size:int) -> wxSizerItem !foreign method "AddSpacer",
	AddStretchSpacer     :: (self:wxSizer, prop:int=1) -> wxSizerItem !foreign method "AddStretchSpacer",
	CalcMin              :: (self:wxSizer) -> wxSize !foreign method "CalcMin",
	Detach               :: (self:wxSizer, window:wxWindow) -> bool !foreign method "Detach",
	Detach               :: (self:wxSizer, sizer:wxSizer) -> bool !foreign method "Detach",
	Detach               :: (self:wxSizer, index:int--[[size_t]]) -> bool !foreign method "Detach",
	Fit                  :: (self:wxSizer, window:wxWindow) !foreign method "Fit",
	FitInside            :: (self:wxSizer, window:wxWindow) !foreign method "FitInside",
	GetItem              :: (self:wxSizer, window:wxWindow, recursive:bool=false) -> wxSizerItem !foreign method "GetItem",
	GetItem              :: (self:wxSizer, sizer:wxSizer, recursive:bool=false) -> wxSizerItem !foreign method "GetItem",
	GetItem              :: (self:wxSizer, index:int--[[size_t]]) -> wxSizerItem !foreign method "GetItem",
	GetSize              :: (self:wxSizer) -> wxSize !foreign method "GetSize",
	GetPosition          :: (self:wxSizer) -> wxPoint !foreign method "GetPosition",
	GetMinSize           :: (self:wxSizer) -> wxSize !foreign method "GetMinSize",
	Insert               :: (self:wxSizer, index:int--[[size_t]], window:wxWindow, proportion:int=0, flag:int=0, border:int=0, userData:wxObject=wxObject.null) -> wxSizerItem !foreign method "Insert",
	Insert               :: (self:wxSizer, index:int--[[size_t]], sizer:wxSizer, proportion:int=0, flag:int=0, border:int=0, userData:wxObject=wxObject.null) -> wxSizerItem !foreign method "Insert",
	Insert               :: (self:wxSizer, index:int--[[size_t]], width,height:int, proportion:int=0, flag:int=0, border:int=0, userData:wxObject=wxObject.null) -> wxSizerItem !foreign method "Insert",
	InsertSpacer         :: (self:wxSizer, index:int--[[size_t]], size:int) -> wxSizerItem !foreign method "InsertSpacer",
	InsertStretchSpacer  :: (self:wxSizer, index:int--[[size_t]], prop:int=1) -> wxSizerItem !foreign method "InsertStretchSpacer",
	Layout               :: (self:wxSizer) !foreign method "Layout",
	Prepend              :: (self:wxSizer, window:wxWindow, proportion:int=0, flag:int=0, border:int=0, userData:wxObject=wxObject.null) !foreign method "Prepend",
	Prepend              :: (self:wxSizer, sizer:wxSizer, proportion:int=0, flag:int=0, border:int=0, userData:wxObject=wxObject.null) !foreign method "Prepend",
	Prepend              :: (self:wxSizer, width,height:int, proportion:int=0, flag:int=0, border:int=0, userData:wxObject=wxObject.null) !foreign method "Prepend",
	PrependSpacer        :: (self:wxSizer, size:int) -> wxSizerItem !foreign method "PrependSpacer",
	PrependStretchSpacer :: (self:wxSizer, prop:int=1) -> wxSizerItem !foreign method "PrependStretchSpacer",
	RecalcSizes          :: (self:wxSizer) !foreign method "RecalcSizes",
	SetDimension         :: (self:wxSizer, x,y:int, width,height:int) !foreign method "SetDimension",
	SetMinSize           :: (self:wxSizer, width,height:int) !foreign method "SetMinSize",
	SetMinSize           :: (self:wxSizer, size:wxSize) !foreign method "SetMinSize",
	SetItemMinSize       :: (self:wxSizer, window:wxWindow, width,height:int) !foreign method "SetItemMinSize",
	SetItemMinSize       :: (self:wxSizer, sizer:wxSizer, width,height:int) !foreign method "SetItemMinSize",
	SetItemMinSize       :: (self:wxSizer, pos:int, width,height:int) !foreign method "SetItemMinSize",
	SetSizeHints         :: (self:wxSizer, window:wxWindow) !foreign method "SetSizeHints",
	SetVirtualSizeHints  :: (self:wxSizer, window:wxWindow) !foreign method "SetVirtualSizeHints",
	Show                 :: (self:wxSizer, window:wxWindow, show:bool=true, recursive:bool=false) -> bool !foreign method "Show",
	Show                 :: (self:wxSizer, sizer:wxSizer, show:bool=true, recursive:bool=false) -> bool !foreign method "Show",
	Show                 :: (self:wxSizer, index:int--[[size_t]], show:bool=true) -> bool !foreign method "Show",
}

export wxBoxSizer :: !foreign struct {
	using wxSizer,

	!call :: (orient:int) -> wxBoxSizer !foreign lua "wx.wxBoxSizer",

	GetOrientation :: (self:wxBoxSizer) -> int !foreign method "GetOrientation",
}

export wxGridSizer :: !foreign struct {
	using wxSizer,

	!call :: (cols:int, rows:int, vgap:int, hgap:int) -> wxGridSizer !foreign lua "wx.wxGridSizer",

	GetCols :: (self:wxGridSizer) -> int !foreign method "GetCols",
	GetHGap :: (self:wxGridSizer) -> int !foreign method "GetHGap",
	GetRows :: (self:wxGridSizer) -> int !foreign method "GetRows",
	GetVGap :: (self:wxGridSizer) -> int !foreign method "GetVGap",
	SetCols :: (self:wxGridSizer, cols:int) !foreign method "SetCols",
	SetHGap :: (self:wxGridSizer, gap:int) !foreign method "SetHGap",
	SetRows :: (self:wxGridSizer, rows:int) !foreign method "SetRows",
	SetVGap :: (self:wxGridSizer, gap:int) !foreign method "SetVGap",
}

export wxFlexGridSizer :: !foreign struct {
	using wxGridSizer,

	!call :: (rows:int, cols:int, vgap:int=0, hgap:int=0) -> wxFlexGridSizer !foreign lua "wx.wxFlexGridSizer",

	AddGrowableCol         :: (self:wxFlexGridSizer, idx:int--[[size_t]], proportion:int=0) !foreign method "AddGrowableCol",
	AddGrowableRow         :: (self:wxFlexGridSizer, idx:int--[[size_t]], proportion:int=0) !foreign method "AddGrowableRow",
	GetFlexibleDirection   :: (self:wxFlexGridSizer) -> int !foreign method "GetFlexibleDirection",
	GetNonFlexibleGrowMode :: (self:wxFlexGridSizer) -> wxFlexSizerGrowMode !foreign method "GetNonFlexibleGrowMode",
	RemoveGrowableCol      :: (self:wxFlexGridSizer, idx:int--[[size_t]]) !foreign method "RemoveGrowableCol",
	RemoveGrowableRow      :: (self:wxFlexGridSizer, idx:int--[[size_t]]) !foreign method "RemoveGrowableRow",
	SetFlexibleDirection   :: (self:wxFlexGridSizer, direction:int) !foreign method "SetFlexibleDirection",
	SetNonFlexibleGrowMode :: (self:wxFlexGridSizer, mode:wxFlexSizerGrowMode) !foreign method "SetNonFlexibleGrowMode",
}

export wxGridBagSizer :: !foreign struct {
	using wxFlexGridSizer,

	!call :: (vgap:int=0, hgap:int=0) -> wxGridBagSizer !foreign lua "wx.wxGridBagSizer",

	Add                  :: (self:wxGridBagSizer, window:wxWindow, pos:wxGBPosition, span:wxGBSpan=wxDefaultSpan, flag:int=0, border:int=0, userData:wxObject=wxObject.null) -> wxSizerItem !foreign method "Add",
	Add                  :: (self:wxGridBagSizer, sizer:wxSizer, pos:wxGBPosition, span:wxGBSpan=wxDefaultSpan, flag:int=0, border:int=0, userData:wxObject=wxObject.null) -> wxSizerItem !foreign method "Add",
	Add                  :: (self:wxGridBagSizer, width,height:int, pos:wxGBPosition, span:wxGBSpan=wxDefaultSpan, flag:int=0, border:int=0, userData:wxObject=wxObject.null) -> wxSizerItem !foreign method "Add",
	Add                  :: (self:wxGridBagSizer, item:wxGBSizerItem) -> wxSizerItem !foreign method "Add",
	CheckForIntersection :: (self:wxGridBagSizer, item:wxGBSizerItem, excludeItem:wxGBSizerItem=wxGBSizerItem.null) -> bool !foreign method "CheckForIntersection",
	CheckForIntersection :: (self:wxGridBagSizer, pos:wxGBPosition, span:wxGBSpan, excludeItem:wxGBSizerItem=wxGBSizerItem.null) -> bool !foreign method "CheckForIntersection",
	FindItem             :: (self:wxGridBagSizer, window:wxWindow) -> wxGBSizerItem !foreign method "FindItem",
	FindItem             :: (self:wxGridBagSizer, sizer:wxSizer) -> wxGBSizerItem !foreign method "FindItem",
	FindItemAtPoint      :: (self:wxGridBagSizer, pt:wxPoint) -> wxGBSizerItem !foreign method "FindItemAtPoint",
	FindItemAtPosition   :: (self:wxGridBagSizer, pos:wxGBPosition) -> wxGBSizerItem !foreign method "FindItemAtPosition",
	FindItemWithData     :: (self:wxGridBagSizer, userData:wxObject) -> wxGBSizerItem !foreign method "FindItemWithData",
	GetCellSize          :: (self:wxGridBagSizer, row:int, col:int) -> wxSize !foreign method "GetCellSize",
	GetEmptyCellSize     :: (self:wxGridBagSizer) -> wxSize !foreign method "GetEmptyCellSize",
	GetItemPosition      :: (self:wxGridBagSizer, window:wxWindow) -> wxGBPosition !foreign method "GetItemPosition",
	GetItemPosition      :: (self:wxGridBagSizer, sizer:wxSizer) -> wxGBPosition !foreign method "GetItemPosition",
	GetItemPosition      :: (self:wxGridBagSizer, index:int--[[size_t]]) -> wxGBPosition !foreign method "GetItemPosition",
	GetItemSpan          :: (self:wxGridBagSizer, window:wxWindow) -> wxGBSpan !foreign method "GetItemSpan",
	GetItemSpan          :: (self:wxGridBagSizer, sizer:wxSizer) -> wxGBSpan !foreign method "GetItemSpan",
	GetItemSpan          :: (self:wxGridBagSizer, index:int--[[size_t]]) -> wxGBSpan !foreign method "GetItemSpan",
	SetEmptyCellSize     :: (self:wxGridBagSizer, sz:wxSize) !foreign method "SetEmptyCellSize",
	SetItemPosition      :: (self:wxGridBagSizer, window:wxWindow, pos:wxGBPosition) -> bool !foreign method "SetItemPosition",
	SetItemPosition      :: (self:wxGridBagSizer, sizer:wxSizer, pos:wxGBPosition) -> bool !foreign method "SetItemPosition",
	SetItemPosition      :: (self:wxGridBagSizer, index:int--[[size_t]], pos:wxGBPosition) -> bool !foreign method "SetItemPosition",
	SetItemSpan          :: (self:wxGridBagSizer, window:wxWindow, span:wxGBSpan) -> bool !foreign method "SetItemSpan",
	SetItemSpan          :: (self:wxGridBagSizer, sizer:wxSizer, span:wxGBSpan) -> bool !foreign method "SetItemSpan",
	SetItemSpan          :: (self:wxGridBagSizer, index:int--[[size_t]], span:wxGBSpan) -> bool !foreign method "SetItemSpan",
}

export wxGBPosition :: !foreign struct {
	using wxLuaUserdata,

	!call :: (row:int=0, col:int=0) -> wxGBPosition !foreign lua "wx.wxGBPosition",
	!call :: (pos:wxGBPosition) -> wxGBPosition !foreign lua "wx.wxGBPosition",

	GetRow :: (self:wxGBPosition) -> int !foreign method "GetRow",
	GetCol :: (self:wxGBPosition) -> int !foreign method "GetCol",
	SetRow :: (self:wxGBPosition, row:int) !foreign method "SetRow",
	SetCol :: (self:wxGBPosition, col:int) !foreign method "SetCol",
}

export wxGBSpan :: !foreign struct {
	using wxLuaUserdata,

	!call :: (rowspan:int=1, colspan:int=1) -> wxGBSpan !foreign lua "wx.wxGBSpan",
	!call :: (span:wxGBSpan) -> wxGBSpan !foreign lua "wx.wxGBSpan",

	GetRowspan :: (self:wxGBSpan) -> int !foreign method "GetRowspan",
	GetColspan :: (self:wxGBSpan) -> int !foreign method "GetColspan",
	SetRowspan :: (self:wxGBSpan, rowspan:int) !foreign method "SetRowspan",
	SetColspan :: (self:wxGBSpan, colspan:int) !foreign method "SetColspan",
}

export wxGBSizerItem :: !foreign struct {
	using wxSizerItem,

	null: wxGBSizerItem : !foreign lua "wx.NULL",

	!call :: () -> wxGBSizerItem !foreign lua "wx.wxGBSizerItem",
	!call :: (width,height:int, pos:wxGBPosition, span:wxGBSpan, flag:int, border:int, userData:wxObject) -> wxGBSizerItem !foreign lua "wx.wxGBSizerItem",
	!call :: (window:wxWindow, pos:wxGBPosition, span:wxGBSpan, flag:int, border:int, userData:wxObject) -> wxGBSizerItem !foreign lua "wx.wxGBSizerItem",
	!call :: (sizer:wxSizer, pos:wxGBPosition, span:wxGBSpan, flag:int, border:int, userData:wxObject) -> wxGBSizerItem !foreign lua "wx.wxGBSizerItem",

	GetPos     :: (self:wxGBSizerItem) -> wxGBPosition !foreign method "GetPos",
	GetSpan    :: (self:wxGBSizerItem) -> wxGBSpan !foreign method "GetSpan",
	SetPos     :: (self:wxGBSizerItem, pos:wxGBPosition) -> bool !foreign method "SetPos",
	SetSpan    :: (self:wxGBSizerItem, span:wxGBSpan) -> bool !foreign method "SetSpan",
	Intersects :: (self:wxGBSizerItem, other:wxGBSizerItem) -> bool !foreign method "Intersects",
	Intersects :: (self:wxGBSizerItem, pos:wxGBPosition, span:wxGBSpan) -> bool !foreign method "Intersects",
	GetEndPos  :: (self:wxGBSizerItem) -> (row:int, col:int) !foreign method "GetEndPos",
	GetGBSizer :: (self:wxGBSizerItem) -> wxGridBagSizer !foreign method "GetGBSizer",
	SetGBSizer :: (self:wxGBSizerItem, sizer:wxGridBagSizer) !foreign method "SetGBSizer",
}

export wxStaticBoxSizer :: !foreign struct {
	using wxBoxSizer,

	!call :: (box:wxStaticBox, orient:int) -> wxStaticBoxSizer !foreign lua "wx.wxStaticBoxSizer",
	!call :: (orient:int, parent:wxWindow, label:wxString|string="") -> wxStaticBoxSizer !foreign lua "wx.wxStaticBoxSizer",

	GetStaticBox :: (self:wxStaticBoxSizer) -> wxStaticBox !foreign method "GetStaticBox",
}

export wxStdDialogButtonSizer :: !foreign struct {
	using wxBoxSizer,

	!call :: () -> wxStdDialogButtonSizer !foreign lua "wx.wxStdDialogButtonSizer",

	AddButton            :: (self:wxStdDialogButtonSizer, button:wxButton) !foreign method "AddButton",
	SetAffirmativeButton :: (self:wxStdDialogButtonSizer, button:wxButton) !foreign method "SetAffirmativeButton",
	SetNegativeButton    :: (self:wxStdDialogButtonSizer, button:wxButton) !foreign method "SetNegativeButton",
	SetCancelButton      :: (self:wxStdDialogButtonSizer, button:wxButton) !foreign method "SetCancelButton",
	Realize              :: (self:wxStdDialogButtonSizer) !foreign method "Realize",
	GetAffirmativeButton :: (self:wxStdDialogButtonSizer) -> wxButton !foreign method "GetAffirmativeButton",
	GetApplyButton       :: (self:wxStdDialogButtonSizer) -> wxButton !foreign method "GetApplyButton",
	GetNegativeButton    :: (self:wxStdDialogButtonSizer) -> wxButton !foreign method "GetNegativeButton",
	GetCancelButton      :: (self:wxStdDialogButtonSizer) -> wxButton !foreign method "GetCancelButton",
	GetHelpButton        :: (self:wxStdDialogButtonSizer) -> wxButton !foreign method "GetHelpButton",
}
