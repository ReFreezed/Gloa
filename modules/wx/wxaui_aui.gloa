--[[============================================================
--=
--=  wxLua/wxWidget bindings for Gl√≥a
--=  Interface source: wxaui_aui.i
--=
--=  Tested with:
--=  - wxLua 2.8.7.0 / wxWidgets 2.8.8
--=
--=  Note: Most bindings have not been tested yet!
--=
--============================================================]]

!import "wx/wxcore_event"
!import "wx/common"
!import "wx/wxcore_windows"
!import "wx/wxcore_gdi"
!import "wx/wxcore_defsutils"
!import "wx/wxcore_appframe"
!import "wx/wxcore_sizer"
!import "wx/wxcore_menutool"

export wxAuiNullDockInfo:                         wxAuiDockInfo : !foreign lua "wxaui.wxAuiNullDockInfo"
export wxAuiNullPaneInfo:                         wxAuiPaneInfo : !foreign lua "wxaui.wxAuiNullPaneInfo"
export wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE:      wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE" -- EVT_AUINOTEBOOK_PAGE_CLOSE(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED:    wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED" -- EVT_AUINOTEBOOK_PAGE_CHANGED(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING:   wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING" -- EVT_AUINOTEBOOK_PAGE_CHANGING(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_BUTTON:          wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_BUTTON" -- EVT_AUINOTEBOOK_BUTTON(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG:      wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG" -- EVT_AUINOTEBOOK_BEGIN_DRAG(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_END_DRAG:        wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_END_DRAG" -- EVT_AUINOTEBOOK_END_DRAG(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION:     wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION" -- EVT_AUINOTEBOOK_DRAG_MOTION(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND:       wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND" -- EVT_AUINOTEBOOK_ALLOW_DND(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN: wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN" -- EVT_AUINOTEBOOK_TAB_MIDDLE_DOWN(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP:   wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP" -- EVT_AUINOTEBOOK_TAB_MIDDLE_UP(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN:  wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN" -- EVT_AUINOTEBOOK_TAB_RIGHT_DOWN(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP:    wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP" -- EVT_AUINOTEBOOK_TAB_RIGHT_UP(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED:     wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED"
export wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE:       wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE" -- EVT_AUINOTEBOOK_DRAG_DONE(winid, fn)
export wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK:       wxEventType : !foreign lua "wxaui.wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK" -- EVT_AUINOTEBOOK_BG_DCLICK(winid, fn)
export wxEVT_AUI_PANE_BUTTON:                     wxEventType : !foreign lua "wxaui.wxEVT_AUI_PANE_BUTTON" -- EVT_AUI_PANE_BUTTON(func)
export wxEVT_AUI_PANE_CLOSE:                      wxEventType : !foreign lua "wxaui.wxEVT_AUI_PANE_CLOSE" -- EVT_AUI_PANE_CLOSE(func)
export wxEVT_AUI_PANE_MAXIMIZE:                   wxEventType : !foreign lua "wxaui.wxEVT_AUI_PANE_MAXIMIZE" -- EVT_AUI_PANE_MAXIMIZE(func)
export wxEVT_AUI_PANE_RESTORE:                    wxEventType : !foreign lua "wxaui.wxEVT_AUI_PANE_RESTORE" -- EVT_AUI_PANE_RESTORE(func)
export wxEVT_AUI_RENDER:                          wxEventType : !foreign lua "wxaui.wxEVT_AUI_RENDER" -- EVT_AUI_RENDER(func)
export wxEVT_AUI_FIND_MANAGER:                    wxEventType : !foreign lua "wxaui.wxEVT_AUI_FIND_MANAGER" -- EVT_AUI_FIND_MANAGER(func)

export wxAuiNotebookOption :: wxEnum
export wxAUI_NB_TOP:                 wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_TOP"
export wxAUI_NB_LEFT:                wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_LEFT"
export wxAUI_NB_RIGHT:               wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_RIGHT"
export wxAUI_NB_BOTTOM:              wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_BOTTOM"
export wxAUI_NB_TAB_SPLIT:           wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_TAB_SPLIT"
export wxAUI_NB_TAB_MOVE:            wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_TAB_MOVE"
export wxAUI_NB_TAB_EXTERNAL_MOVE:   wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_TAB_EXTERNAL_MOVE"
export wxAUI_NB_TAB_FIXED_WIDTH:     wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_TAB_FIXED_WIDTH"
export wxAUI_NB_SCROLL_BUTTONS:      wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_SCROLL_BUTTONS"
export wxAUI_NB_WINDOWLIST_BUTTON:   wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_WINDOWLIST_BUTTON"
export wxAUI_NB_CLOSE_BUTTON:        wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_CLOSE_BUTTON"
export wxAUI_NB_CLOSE_ON_ACTIVE_TAB: wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_CLOSE_ON_ACTIVE_TAB"
export wxAUI_NB_CLOSE_ON_ALL_TABS:   wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_CLOSE_ON_ALL_TABS"
export wxAUI_NB_MIDDLE_CLICK_CLOSE:  wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_MIDDLE_CLICK_CLOSE"
export wxAUI_NB_DEFAULT_STYLE:       wxAuiNotebookOption : !foreign lua "wxaui.wxAUI_NB_DEFAULT_STYLE"

export wxAuiManagerDock :: wxEnum
export wxAUI_DOCK_NONE:   wxAuiManagerDock : !foreign lua "wxaui.wxAUI_DOCK_NONE"
export wxAUI_DOCK_TOP:    wxAuiManagerDock : !foreign lua "wxaui.wxAUI_DOCK_TOP"
export wxAUI_DOCK_RIGHT:  wxAuiManagerDock : !foreign lua "wxaui.wxAUI_DOCK_RIGHT"
export wxAUI_DOCK_BOTTOM: wxAuiManagerDock : !foreign lua "wxaui.wxAUI_DOCK_BOTTOM"
export wxAUI_DOCK_LEFT:   wxAuiManagerDock : !foreign lua "wxaui.wxAUI_DOCK_LEFT"
export wxAUI_DOCK_CENTER: wxAuiManagerDock : !foreign lua "wxaui.wxAUI_DOCK_CENTER"
export wxAUI_DOCK_CENTRE: wxAuiManagerDock : !foreign lua "wxaui.wxAUI_DOCK_CENTRE"

export wxAuiManagerOption :: wxEnum
export wxAUI_MGR_ALLOW_FLOATING:          wxAuiManagerOption : !foreign lua "wxaui.wxAUI_MGR_ALLOW_FLOATING"
export wxAUI_MGR_ALLOW_ACTIVE_PANE:       wxAuiManagerOption : !foreign lua "wxaui.wxAUI_MGR_ALLOW_ACTIVE_PANE"
export wxAUI_MGR_TRANSPARENT_DRAG:        wxAuiManagerOption : !foreign lua "wxaui.wxAUI_MGR_TRANSPARENT_DRAG"
export wxAUI_MGR_TRANSPARENT_HINT:        wxAuiManagerOption : !foreign lua "wxaui.wxAUI_MGR_TRANSPARENT_HINT"
export wxAUI_MGR_VENETIAN_BLINDS_HINT:    wxAuiManagerOption : !foreign lua "wxaui.wxAUI_MGR_VENETIAN_BLINDS_HINT"
export wxAUI_MGR_RECTANGLE_HINT:          wxAuiManagerOption : !foreign lua "wxaui.wxAUI_MGR_RECTANGLE_HINT"
export wxAUI_MGR_HINT_FADE:               wxAuiManagerOption : !foreign lua "wxaui.wxAUI_MGR_HINT_FADE"
export wxAUI_MGR_NO_VENETIAN_BLINDS_FADE: wxAuiManagerOption : !foreign lua "wxaui.wxAUI_MGR_NO_VENETIAN_BLINDS_FADE"
export wxAUI_MGR_DEFAULT:                 wxAuiManagerOption : !foreign lua "wxaui.wxAUI_MGR_DEFAULT"

export wxAuiPaneDockArtSetting :: wxEnum
export wxAUI_DOCKART_SASH_SIZE:                        wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_SASH_SIZE"
export wxAUI_DOCKART_CAPTION_SIZE:                     wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_CAPTION_SIZE"
export wxAUI_DOCKART_GRIPPER_SIZE:                     wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_GRIPPER_SIZE"
export wxAUI_DOCKART_PANE_BORDER_SIZE:                 wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_PANE_BORDER_SIZE"
export wxAUI_DOCKART_PANE_BUTTON_SIZE:                 wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_PANE_BUTTON_SIZE"
export wxAUI_DOCKART_BACKGROUND_COLOUR:                wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_BACKGROUND_COLOUR"
export wxAUI_DOCKART_SASH_COLOUR:                      wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_SASH_COLOUR"
export wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR:            wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR"
export wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR:   wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR"
export wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR:          wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR"
export wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR: wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR"
export wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR:       wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR"
export wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR:     wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR"
export wxAUI_DOCKART_BORDER_COLOUR:                    wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_BORDER_COLOUR"
export wxAUI_DOCKART_GRIPPER_COLOUR:                   wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_GRIPPER_COLOUR"
export wxAUI_DOCKART_CAPTION_FONT:                     wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_CAPTION_FONT"
export wxAUI_DOCKART_GRADIENT_TYPE:                    wxAuiPaneDockArtSetting : !foreign lua "wxaui.wxAUI_DOCKART_GRADIENT_TYPE"

export wxAuiPaneDockArtGradients :: wxEnum
export wxAUI_GRADIENT_NONE:       wxAuiPaneDockArtGradients : !foreign lua "wxaui.wxAUI_GRADIENT_NONE"
export wxAUI_GRADIENT_VERTICAL:   wxAuiPaneDockArtGradients : !foreign lua "wxaui.wxAUI_GRADIENT_VERTICAL"
export wxAUI_GRADIENT_HORIZONTAL: wxAuiPaneDockArtGradients : !foreign lua "wxaui.wxAUI_GRADIENT_HORIZONTAL"

export wxAuiPaneButtonState :: wxEnum
export wxAUI_BUTTON_STATE_NORMAL:   wxAuiPaneButtonState : !foreign lua "wxaui.wxAUI_BUTTON_STATE_NORMAL"
export wxAUI_BUTTON_STATE_HOVER:    wxAuiPaneButtonState : !foreign lua "wxaui.wxAUI_BUTTON_STATE_HOVER"
export wxAUI_BUTTON_STATE_PRESSED:  wxAuiPaneButtonState : !foreign lua "wxaui.wxAUI_BUTTON_STATE_PRESSED"
export wxAUI_BUTTON_STATE_DISABLED: wxAuiPaneButtonState : !foreign lua "wxaui.wxAUI_BUTTON_STATE_DISABLED"
export wxAUI_BUTTON_STATE_HIDDEN:   wxAuiPaneButtonState : !foreign lua "wxaui.wxAUI_BUTTON_STATE_HIDDEN"
export wxAUI_BUTTON_STATE_CHECKED:  wxAuiPaneButtonState : !foreign lua "wxaui.wxAUI_BUTTON_STATE_CHECKED"

export wxAuiButtonId :: wxEnum
export wxAUI_BUTTON_CLOSE:            wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_CLOSE"
export wxAUI_BUTTON_MAXIMIZE_RESTORE: wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_MAXIMIZE_RESTORE"
export wxAUI_BUTTON_MINIMIZE:         wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_MINIMIZE"
export wxAUI_BUTTON_PIN:              wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_PIN"
export wxAUI_BUTTON_OPTIONS:          wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_OPTIONS"
export wxAUI_BUTTON_WINDOWLIST:       wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_WINDOWLIST"
export wxAUI_BUTTON_LEFT:             wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_LEFT"
export wxAUI_BUTTON_RIGHT:            wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_RIGHT"
export wxAUI_BUTTON_UP:               wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_UP"
export wxAUI_BUTTON_DOWN:             wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_DOWN"
export wxAUI_BUTTON_CUSTOM1:          wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_CUSTOM1"
export wxAUI_BUTTON_CUSTOM2:          wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_CUSTOM2"
export wxAUI_BUTTON_CUSTOM3:          wxAuiButtonId : !foreign lua "wxaui.wxAUI_BUTTON_CUSTOM3"

export wxAuiPaneInsertLevel :: wxEnum
export wxAUI_INSERT_PANE: wxAuiPaneInsertLevel : !foreign lua "wxaui.wxAUI_INSERT_PANE"
export wxAUI_INSERT_ROW:  wxAuiPaneInsertLevel : !foreign lua "wxaui.wxAUI_INSERT_ROW"
export wxAUI_INSERT_DOCK: wxAuiPaneInsertLevel : !foreign lua "wxaui.wxAUI_INSERT_DOCK"

export wxAuiNotebookEvent :: !foreign struct {
	using wxNotifyEvent,

	!call :: (command_type:wxEventType=wxEVT_NULL, win_id:int=0) -> wxAuiNotebookEvent !foreign lua "wxaui.wxAuiNotebookEvent",
	!call :: (c:wxAuiNotebookEvent) -> wxAuiNotebookEvent !foreign lua "wxaui.wxAuiNotebookEvent",

	SetSelection    :: (self:wxAuiNotebookEvent, s:int) !foreign method "SetSelection",
	GetSelection    :: (self:wxAuiNotebookEvent) -> int !foreign method "GetSelection",
	SetOldSelection :: (self:wxAuiNotebookEvent, s:int) !foreign method "SetOldSelection",
	GetOldSelection :: (self:wxAuiNotebookEvent) -> int !foreign method "GetOldSelection",
	SetDragSource   :: (self:wxAuiNotebookEvent, s:wxAuiNotebook) !foreign method "SetDragSource",
	GetDragSource   :: (self:wxAuiNotebookEvent) -> wxAuiNotebook !foreign method "GetDragSource",
}

export wxAuiNotebookPage :: !foreign struct {
	using wxLuaUserdata,

	window:  wxWindow,
	caption: string,
	bitmap:  wxBitmap,
	rect:    wxRect,
	active:  bool,
}

export wxAuiNotebookPageArray :: !foreign struct {
	using wxLuaUserdata,

	!call :: () -> wxAuiNotebookPageArray !foreign lua "wxaui.wxAuiNotebookPageArray",
	!call :: (array:wxAuiNotebookPageArray) -> wxAuiNotebookPageArray !foreign lua "wxaui.wxAuiNotebookPageArray",

	Add      :: (self:wxAuiNotebookPageArray, page:wxAuiNotebookPage) !foreign method "Add",
	Clear    :: (self:wxAuiNotebookPageArray) !foreign method "Clear",
	GetCount :: (self:wxAuiNotebookPageArray) -> int !foreign method "GetCount",
	Insert   :: (self:wxAuiNotebookPageArray, page:wxAuiNotebookPage, nIndex:int) !foreign method "Insert",
	IsEmpty  :: (self:wxAuiNotebookPageArray) -> bool !foreign method "IsEmpty",
	Item     :: (self:wxAuiNotebookPageArray, nIndex:int--[[size_t]]) -> wxAuiNotebookPage !foreign method "Item",
	RemoveAt :: (self:wxAuiNotebookPageArray, nIndex:int--[[size_t]]) !foreign method "RemoveAt",
}

export wxAuiTabContainerButton :: !foreign struct {
	using wxLuaUserdata,

	id:         int,
	cur_state:  int,
	location:   int,
	bitmap:     wxBitmap,
	dis_bitmap: wxBitmap,
	rect:       wxRect,
}

export wxAuiTabArt :: !foreign struct {
	using wxLuaUserdata,

	Clone              :: (self:wxAuiTabArt) -> wxAuiTabArt !foreign method "Clone",
	SetFlags           :: (self:wxAuiTabArt, flags:int) !foreign method "SetFlags",
	SetSizingInfo      :: (self:wxAuiTabArt, tab_ctrl_size:wxSize, tab_count:int--[[size_t]]) !foreign method "SetSizingInfo",
	SetNormalFont      :: (self:wxAuiTabArt, font:wxFont) !foreign method "SetNormalFont",
	SetSelectedFont    :: (self:wxAuiTabArt, font:wxFont) !foreign method "SetSelectedFont",
	SetMeasuringFont   :: (self:wxAuiTabArt, font:wxFont) !foreign method "SetMeasuringFont",
	DrawBackground     :: (self:wxAuiTabArt, dc:wxDC, wnd:wxWindow, rect:wxRect) !foreign method "DrawBackground",
	DrawTab            :: (self:wxAuiTabArt, dc:wxDC, wnd:wxWindow, pane:wxAuiNotebookPage, in_rect:wxRect, close_button_state:int, out_tab_rect:wxRect, out_button_rect:wxRect, x_extent:int) !foreign method "DrawTab",
	DrawButton         :: (self:wxAuiTabArt, dc:wxDC, wnd:wxWindow, in_rect:wxRect, bitmap_id:int, button_state:int, orientation:int, out_rect:wxRect) !foreign method "DrawButton",
	GetTabSize         :: (self:wxAuiTabArt, dc:wxDC, wnd:wxWindow, caption:wxString|string, bitmap:wxBitmap, active:bool, close_button_state:int, x_extent:int) -> wxSize !foreign method "GetTabSize",
	ShowDropDown       :: (self:wxAuiTabArt, wnd:wxWindow, items:wxAuiNotebookPageArray, active_idx:int) -> int !foreign method "ShowDropDown",
	GetIndentSize      :: (self:wxAuiTabArt) -> int !foreign method "GetIndentSize",
	GetBestTabCtrlSize :: (self:wxAuiTabArt, wnd:wxWindow, pages:wxAuiNotebookPageArray, required_bmp_size:wxSize) -> int !foreign method "GetBestTabCtrlSize",
}

export wxAuiDefaultTabArt :: !foreign struct {
	using wxAuiTabArt,

	!call :: () -> wxAuiDefaultTabArt !foreign lua "wxaui.wxAuiDefaultTabArt",
}

export wxAuiSimpleTabArt :: !foreign struct {
	using wxAuiTabArt,

	!call :: () -> wxAuiSimpleTabArt !foreign lua "wxaui.wxAuiSimpleTabArt",
}

export wxAuiTabCtrl :: !foreign struct {
	using wxControl,

	!call :: (parent:wxWindow, id:wxWindowID=wxID_ANY, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0) -> wxAuiTabCtrl !foreign lua "wxaui.wxAuiTabCtrl",

	SetArtProvider   :: (self:wxAuiTabCtrl, art:wxAuiTabArt) !foreign method "SetArtProvider",
	GetArtProvider   :: (self:wxAuiTabCtrl) -> wxAuiTabArt !foreign method "GetArtProvider",
	SetFlags         :: (self:wxAuiTabCtrl, flags:int) !foreign method "SetFlags",
	GetFlags         :: (self:wxAuiTabCtrl) -> int !foreign method "GetFlags",
	AddPage          :: (self:wxAuiTabCtrl, page:wxWindow, info:wxAuiNotebookPage) -> bool !foreign method "AddPage",
	InsertPage       :: (self:wxAuiTabCtrl, page:wxWindow, info:wxAuiNotebookPage, idx:int--[[size_t]]) -> bool !foreign method "InsertPage",
	MovePage         :: (self:wxAuiTabCtrl, page:wxWindow, new_idx:int--[[size_t]]) -> bool !foreign method "MovePage",
	RemovePage       :: (self:wxAuiTabCtrl, page:wxWindow) -> bool !foreign method "RemovePage",
	SetActivePage    :: (self:wxAuiTabCtrl, page:wxWindow) -> bool !foreign method "SetActivePage",
	SetActivePage    :: (self:wxAuiTabCtrl, page:int--[[size_t]]) -> bool !foreign method "SetActivePage",
	SetNoneActive    :: (self:wxAuiTabCtrl) !foreign method "SetNoneActive",
	GetActivePage    :: (self:wxAuiTabCtrl) -> int !foreign method "GetActivePage",
	TabHitTest       :: (self:wxAuiTabCtrl, x,y:int, hit:wxWindow) -> bool !foreign method "TabHitTest",
	ButtonHitTest    :: (self:wxAuiTabCtrl, x,y:int, hit:wxAuiTabContainerButton) -> bool !foreign method "ButtonHitTest",
	GetWindowFromIdx :: (self:wxAuiTabCtrl, idx:int--[[size_t]]) -> wxWindow !foreign method "GetWindowFromIdx",
	GetIdxFromWindow :: (self:wxAuiTabCtrl, page:wxWindow) -> int !foreign method "GetIdxFromWindow",
	GetPageCount     :: (self:wxAuiTabCtrl) -> int--[[size_t]] !foreign method "GetPageCount",
	GetPage          :: (self:wxAuiTabCtrl, idx:int--[[size_t]]) -> wxAuiNotebookPage !foreign method "GetPage",
	GetPages         :: (self:wxAuiTabCtrl) -> wxAuiNotebookPageArray !foreign method "GetPages",
	SetNormalFont    :: (self:wxAuiTabCtrl, normal_font:wxFont) !foreign method "SetNormalFont",
	SetSelectedFont  :: (self:wxAuiTabCtrl, selected_font:wxFont) !foreign method "SetSelectedFont",
	SetMeasuringFont :: (self:wxAuiTabCtrl, measuring_font:wxFont) !foreign method "SetMeasuringFont",
	DoShowHide       :: (self:wxAuiTabCtrl) !foreign method "DoShowHide",
	SetRect          :: (self:wxAuiTabCtrl, rect:wxRect) !foreign method "SetRect",
	RemoveButton     :: (self:wxAuiTabCtrl, id:int) !foreign method "RemoveButton",
	AddButton        :: (self:wxAuiTabCtrl, id:int, location:int, normal_bitmap:wxBitmap=wxNullBitmap, disabled_bitmap:wxBitmap=wxNullBitmap) !foreign method "AddButton",
	GetTabOffset     :: (self:wxAuiTabCtrl) -> int--[[size_t]] !foreign method "GetTabOffset",
	SetTabOffset     :: (self:wxAuiTabCtrl, offset:int--[[size_t]]) !foreign method "SetTabOffset",
	IsTabVisible     :: (self:wxAuiTabCtrl, tabPage:int, tabOffset:int, dc:wxDC, wnd:wxWindow) -> bool !foreign method "IsTabVisible",
	MakeTabVisible   :: (self:wxAuiTabCtrl, tabPage:int, win:wxWindow) !foreign method "MakeTabVisible",
	IsDragging       :: (self:wxAuiTabCtrl) -> bool !foreign method "IsDragging",
}

export wxAuiNotebook :: !foreign struct {
	using wxControl,

	!call :: () -> wxAuiNotebook !foreign lua "wxaui.wxAuiNotebook",
	!call :: (parent:wxWindow, id:wxWindowID=wxID_ANY, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxAUI_NB_DEFAULT_STYLE) -> wxAuiNotebook !foreign lua "wxaui.wxAuiNotebook",

	Create                 :: (self:wxAuiNotebook, parent:wxWindow, id:wxWindowID=wxID_ANY, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0) -> bool !foreign method "Create",
	SetWindowStyleFlag     :: (self:wxAuiNotebook, style:int--[[long]]) !foreign method "SetWindowStyleFlag",
	SetArtProvider         :: (self:wxAuiNotebook, art:wxAuiTabArt) !foreign method "SetArtProvider",
	GetArtProvider         :: (self:wxAuiNotebook) -> wxAuiTabArt !foreign method "GetArtProvider",
	SetUniformBitmapSize   :: (self:wxAuiNotebook, size:wxSize) !foreign method "SetUniformBitmapSize",
	SetTabCtrlHeight       :: (self:wxAuiNotebook, height:int) !foreign method "SetTabCtrlHeight",
	AddPage                :: (self:wxAuiNotebook, page:wxWindow, caption:wxString|string, select:bool=false, bitmap:wxBitmap=wxNullBitmap) -> bool !foreign method "AddPage",
	InsertPage             :: (self:wxAuiNotebook, page_idx:int--[[size_t]], page:wxWindow, caption:wxString|string, select:bool=false, bitmap:wxBitmap=wxNullBitmap) -> bool !foreign method "InsertPage",
	DeletePage             :: (self:wxAuiNotebook, page:int--[[size_t]]) -> bool !foreign method "DeletePage",
	RemovePage             :: (self:wxAuiNotebook, page:int--[[size_t]]) -> bool !foreign method "RemovePage",
	GetPageCount           :: (self:wxAuiNotebook) -> int--[[size_t]] !foreign method "GetPageCount",
	GetPage                :: (self:wxAuiNotebook, page_idx:int--[[size_t]]) -> wxWindow !foreign method "GetPage",
	GetPageIndex           :: (self:wxAuiNotebook, page_wnd:wxWindow) -> int !foreign method "GetPageIndex",
	SetPageText            :: (self:wxAuiNotebook, page:int--[[size_t]], text:wxString|string) -> bool !foreign method "SetPageText",
	GetPageText            :: (self:wxAuiNotebook, page_idx:int--[[size_t]]) -> string !foreign method "GetPageText",
	SetPageBitmap          :: (self:wxAuiNotebook, page:int--[[size_t]], bitmap:wxBitmap) -> bool !foreign method "SetPageBitmap",
	GetPageBitmap          :: (self:wxAuiNotebook, page_idx:int--[[size_t]]) -> wxBitmap !foreign method "GetPageBitmap",
	SetSelection           :: (self:wxAuiNotebook, new_page:int--[[size_t]]) -> int--[[size_t]] !foreign method "SetSelection",
	GetSelection           :: (self:wxAuiNotebook) -> int !foreign method "GetSelection",
	Split                  :: (self:wxAuiNotebook, page:int--[[size_t]], direction:int) !foreign method "Split",
	GetAuiManager          :: (self:wxAuiNotebook) -> wxAuiManager !foreign method "GetAuiManager",
	SetNormalFont          :: (self:wxAuiNotebook, font:wxFont) !foreign method "SetNormalFont",
	SetSelectedFont        :: (self:wxAuiNotebook, font:wxFont) !foreign method "SetSelectedFont",
	SetMeasuringFont       :: (self:wxAuiNotebook, font:wxFont) !foreign method "SetMeasuringFont",
	SetFont                :: (self:wxAuiNotebook, font:wxFont) -> bool !foreign method "SetFont",
	GetTabCtrlHeight       :: (self:wxAuiNotebook) -> int !foreign method "GetTabCtrlHeight",
	GetHeightForPageHeight :: (self:wxAuiNotebook, pageHeight:int) -> int !foreign method "GetHeightForPageHeight",
	AdvanceSelection       :: (self:wxAuiNotebook, forward:bool=true) !foreign method "AdvanceSelection",
	ShowWindowMenu         :: (self:wxAuiNotebook) -> bool !foreign method "ShowWindowMenu",
}

export wxAuiDockArt :: !foreign struct {
	using wxLuaUserdata,

	GetMetric      :: (self:wxAuiDockArt, id:int) -> int !foreign method "GetMetric",
	SetMetric      :: (self:wxAuiDockArt, id:int, new_val:int) !foreign method "SetMetric",
	SetFont        :: (self:wxAuiDockArt, id:int, font:wxFont) !foreign method "SetFont",
	GetFont        :: (self:wxAuiDockArt, id:int) -> wxFont !foreign method "GetFont",
	GetColour      :: (self:wxAuiDockArt, id:int) -> wxColour !foreign method "GetColour",
	SetColour      :: (self:wxAuiDockArt, id:int, colour:wxColour) !foreign method "SetColour",
	GetColor       :: (self:wxAuiDockArt, id:int) -> wxColour !foreign method "GetColor",
	SetColor       :: (self:wxAuiDockArt, id:int, color:wxColour) !foreign method "SetColor",
	DrawSash       :: (self:wxAuiDockArt, dc:wxDC, window:wxWindow, orientation:int, rect:wxRect) !foreign method "DrawSash",
	DrawBackground :: (self:wxAuiDockArt, dc:wxDC, window:wxWindow, orientation:int, rect:wxRect) !foreign method "DrawBackground",
	DrawCaption    :: (self:wxAuiDockArt, dc:wxDC, window:wxWindow, text:wxString|string, rect:wxRect, pane:wxAuiPaneInfo) !foreign method "DrawCaption",
	DrawGripper    :: (self:wxAuiDockArt, dc:wxDC, window:wxWindow, rect:wxRect, pane:wxAuiPaneInfo) !foreign method "DrawGripper",
	DrawBorder     :: (self:wxAuiDockArt, dc:wxDC, window:wxWindow, rect:wxRect, pane:wxAuiPaneInfo) !foreign method "DrawBorder",
	DrawPaneButton :: (self:wxAuiDockArt, dc:wxDC, window:wxWindow, button:int, button_state:int, rect:wxRect, pane:wxAuiPaneInfo) !foreign method "DrawPaneButton",
}

export wxAuiDefaultDockArt :: !foreign struct {
	using wxAuiDockArt,

	!call :: () -> wxAuiDefaultDockArt !foreign lua "wxaui.wxAuiDefaultDockArt",
}

export wxAuiFloatingFrame :: !foreign struct {
	using wxFrame,

	!call :: (parent:wxWindow, owner_mgr:wxAuiManager, pane:wxAuiPaneInfo, id:wxWindowID=wxID_ANY, style:int--[[long]]=0--[[bitwise(wxRESIZE_BORDER|wxSYSTEM_MENU|wxCAPTION|wxFRAME_NO_TASKBAR|wxFRAME_FLOAT_ON_PARENT|wxCLIP_CHILDREN)]]) -> wxAuiFloatingFrame !foreign lua "wxaui.wxAuiFloatingFrame",

	SetPaneWindow   :: (self:wxAuiFloatingFrame, pane:wxAuiPaneInfo) !foreign method "SetPaneWindow",
	GetOwnerManager :: (self:wxAuiFloatingFrame) -> wxAuiManager !foreign method "GetOwnerManager",
}

export wxAuiPaneInfo :: !foreign struct {
	using wxLuaUserdata,

	name:            string,
	caption:         string,
	window:          wxWindow,
	frame:           wxFrame,
	state:           int,
	dock_direction:  int,
	dock_layer:      int,
	dock_row:        int,
	dock_pos:        int,
	best_size:       wxSize,
	min_size:        wxSize,
	max_size:        wxSize,
	floating_pos:    wxPoint,
	floating_size:   wxSize,
	dock_proportion: int,
	rect:            wxRect,

	wxAuiPaneState :: wxEnum,
	optionFloating:       wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionFloating",
	optionHidden:         wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionHidden",
	optionLeftDockable:   wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionLeftDockable",
	optionRightDockable:  wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionRightDockable",
	optionTopDockable:    wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionTopDockable",
	optionBottomDockable: wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionBottomDockable",
	optionFloatable:      wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionFloatable",
	optionMovable:        wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionMovable",
	optionResizable:      wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionResizable",
	optionPaneBorder:     wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionPaneBorder",
	optionCaption:        wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionCaption",
	optionGripper:        wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionGripper",
	optionDestroyOnClose: wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionDestroyOnClose",
	optionToolbar:        wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionToolbar",
	optionActive:         wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionActive",
	optionGripperTop:     wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionGripperTop",
	optionMaximized:      wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.optionMaximized",
	buttonClose:          wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.buttonClose",
	buttonMaximize:       wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.buttonMaximize",
	buttonMinimize:       wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.buttonMinimize",
	buttonPin:            wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.buttonPin",
	buttonCustom1:        wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.buttonCustom1",
	buttonCustom2:        wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.buttonCustom2",
	buttonCustom3:        wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.buttonCustom3",
	savedHiddenState:     wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.savedHiddenState",
	actionPane:           wxAuiPaneState : !foreign lua "wxaui.wxAuiPaneInfo.actionPane",

	!call :: () -> wxAuiPaneInfo !foreign lua "wxaui.wxAuiPaneInfo",
	!call :: (c:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign lua "wxaui.wxAuiPaneInfo",

	SafeSet           :: (self:wxAuiPaneInfo, source:wxAuiPaneInfo) !foreign method "SafeSet",
	IsOk              :: (self:wxAuiPaneInfo) -> bool !foreign method "IsOk",
	IsFixed           :: (self:wxAuiPaneInfo) -> bool !foreign method "IsFixed",
	IsResizable       :: (self:wxAuiPaneInfo) -> bool !foreign method "IsResizable",
	IsShown           :: (self:wxAuiPaneInfo) -> bool !foreign method "IsShown",
	IsFloating        :: (self:wxAuiPaneInfo) -> bool !foreign method "IsFloating",
	IsDocked          :: (self:wxAuiPaneInfo) -> bool !foreign method "IsDocked",
	IsToolbar         :: (self:wxAuiPaneInfo) -> bool !foreign method "IsToolbar",
	IsTopDockable     :: (self:wxAuiPaneInfo) -> bool !foreign method "IsTopDockable",
	IsBottomDockable  :: (self:wxAuiPaneInfo) -> bool !foreign method "IsBottomDockable",
	IsLeftDockable    :: (self:wxAuiPaneInfo) -> bool !foreign method "IsLeftDockable",
	IsRightDockable   :: (self:wxAuiPaneInfo) -> bool !foreign method "IsRightDockable",
	IsFloatable       :: (self:wxAuiPaneInfo) -> bool !foreign method "IsFloatable",
	IsMovable         :: (self:wxAuiPaneInfo) -> bool !foreign method "IsMovable",
	IsDestroyOnClose  :: (self:wxAuiPaneInfo) -> bool !foreign method "IsDestroyOnClose",
	IsMaximized       :: (self:wxAuiPaneInfo) -> bool !foreign method "IsMaximized",
	HasCaption        :: (self:wxAuiPaneInfo) -> bool !foreign method "HasCaption",
	HasGripper        :: (self:wxAuiPaneInfo) -> bool !foreign method "HasGripper",
	HasBorder         :: (self:wxAuiPaneInfo) -> bool !foreign method "HasBorder",
	HasCloseButton    :: (self:wxAuiPaneInfo) -> bool !foreign method "HasCloseButton",
	HasMaximizeButton :: (self:wxAuiPaneInfo) -> bool !foreign method "HasMaximizeButton",
	HasMinimizeButton :: (self:wxAuiPaneInfo) -> bool !foreign method "HasMinimizeButton",
	HasPinButton      :: (self:wxAuiPaneInfo) -> bool !foreign method "HasPinButton",
	HasGripperTop     :: (self:wxAuiPaneInfo) -> bool !foreign method "HasGripperTop",
	Window            :: (self:wxAuiPaneInfo, w:wxWindow) -> wxAuiPaneInfo !foreign method "Window",
	Name              :: (self:wxAuiPaneInfo, n:wxString|string) -> wxAuiPaneInfo !foreign method "Name",
	Caption           :: (self:wxAuiPaneInfo, c:wxString|string) -> wxAuiPaneInfo !foreign method "Caption",
	Left              :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "Left",
	Right             :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "Right",
	Top               :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "Top",
	Bottom            :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "Bottom",
	Center            :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "Center",
	Centre            :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "Centre",
	Direction         :: (self:wxAuiPaneInfo, direction:int) -> wxAuiPaneInfo !foreign method "Direction",
	Layer             :: (self:wxAuiPaneInfo, layer:int) -> wxAuiPaneInfo !foreign method "Layer",
	Row               :: (self:wxAuiPaneInfo, row:int) -> wxAuiPaneInfo !foreign method "Row",
	Position          :: (self:wxAuiPaneInfo, pos:int) -> wxAuiPaneInfo !foreign method "Position",
	BestSize          :: (self:wxAuiPaneInfo, size:wxSize) -> wxAuiPaneInfo !foreign method "BestSize",
	MinSize           :: (self:wxAuiPaneInfo, size:wxSize) -> wxAuiPaneInfo !foreign method "MinSize",
	MaxSize           :: (self:wxAuiPaneInfo, size:wxSize) -> wxAuiPaneInfo !foreign method "MaxSize",
	BestSize          :: (self:wxAuiPaneInfo, x,y:int) -> wxAuiPaneInfo !foreign method "BestSize",
	MinSize           :: (self:wxAuiPaneInfo, x,y:int) -> wxAuiPaneInfo !foreign method "MinSize",
	MaxSize           :: (self:wxAuiPaneInfo, x,y:int) -> wxAuiPaneInfo !foreign method "MaxSize",
	FloatingPosition  :: (self:wxAuiPaneInfo, pos:wxPoint) -> wxAuiPaneInfo !foreign method "FloatingPosition",
	FloatingPosition  :: (self:wxAuiPaneInfo, x,y:int) -> wxAuiPaneInfo !foreign method "FloatingPosition",
	FloatingSize      :: (self:wxAuiPaneInfo, size:wxSize) -> wxAuiPaneInfo !foreign method "FloatingSize",
	FloatingSize      :: (self:wxAuiPaneInfo, x,y:int) -> wxAuiPaneInfo !foreign method "FloatingSize",
	Fixed             :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "Fixed",
	Resizable         :: (self:wxAuiPaneInfo, resizable:bool=true) -> wxAuiPaneInfo !foreign method "Resizable",
	Dock              :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "Dock",
	Float             :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "Float",
	Hide              :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "Hide",
	Show              :: (self:wxAuiPaneInfo, show:bool=true) -> wxAuiPaneInfo !foreign method "Show",
	CaptionVisible    :: (self:wxAuiPaneInfo, visible:bool=true) -> wxAuiPaneInfo !foreign method "CaptionVisible",
	Maximize          :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "Maximize",
	Restore           :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "Restore",
	PaneBorder        :: (self:wxAuiPaneInfo, visible:bool=true) -> wxAuiPaneInfo !foreign method "PaneBorder",
	Gripper           :: (self:wxAuiPaneInfo, visible:bool=true) -> wxAuiPaneInfo !foreign method "Gripper",
	GripperTop        :: (self:wxAuiPaneInfo, attop:bool=true) -> wxAuiPaneInfo !foreign method "GripperTop",
	CloseButton       :: (self:wxAuiPaneInfo, visible:bool=true) -> wxAuiPaneInfo !foreign method "CloseButton",
	MaximizeButton    :: (self:wxAuiPaneInfo, visible:bool=true) -> wxAuiPaneInfo !foreign method "MaximizeButton",
	MinimizeButton    :: (self:wxAuiPaneInfo, visible:bool=true) -> wxAuiPaneInfo !foreign method "MinimizeButton",
	PinButton         :: (self:wxAuiPaneInfo, visible:bool=true) -> wxAuiPaneInfo !foreign method "PinButton",
	DestroyOnClose    :: (self:wxAuiPaneInfo, b:bool=true) -> wxAuiPaneInfo !foreign method "DestroyOnClose",
	TopDockable       :: (self:wxAuiPaneInfo, b:bool=true) -> wxAuiPaneInfo !foreign method "TopDockable",
	BottomDockable    :: (self:wxAuiPaneInfo, b:bool=true) -> wxAuiPaneInfo !foreign method "BottomDockable",
	LeftDockable      :: (self:wxAuiPaneInfo, b:bool=true) -> wxAuiPaneInfo !foreign method "LeftDockable",
	RightDockable     :: (self:wxAuiPaneInfo, b:bool=true) -> wxAuiPaneInfo !foreign method "RightDockable",
	Floatable         :: (self:wxAuiPaneInfo, b:bool=true) -> wxAuiPaneInfo !foreign method "Floatable",
	Movable           :: (self:wxAuiPaneInfo, b:bool=true) -> wxAuiPaneInfo !foreign method "Movable",
	Dockable          :: (self:wxAuiPaneInfo, b:bool=true) -> wxAuiPaneInfo !foreign method "Dockable",
	DefaultPane       :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "DefaultPane",
	CentrePane        :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "CentrePane",
	CenterPane        :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "CenterPane",
	ToolbarPane       :: (self:wxAuiPaneInfo) -> wxAuiPaneInfo !foreign method "ToolbarPane",
	SetFlag           :: (self:wxAuiPaneInfo, flag:int, option_state:bool) -> wxAuiPaneInfo !foreign method "SetFlag",
	HasFlag           :: (self:wxAuiPaneInfo, flag:int) -> bool !foreign method "HasFlag",
}

export wxAuiPaneInfoArray :: !foreign struct {
	using wxLuaUserdata,

	!call :: () -> wxAuiPaneInfoArray !foreign lua "wxaui.wxAuiPaneInfoArray",
	!call :: (array:wxAuiPaneInfoArray) -> wxAuiPaneInfoArray !foreign lua "wxaui.wxAuiPaneInfoArray",

	Add      :: (self:wxAuiPaneInfoArray, pi:wxAuiPaneInfo) !foreign method "Add",
	Clear    :: (self:wxAuiPaneInfoArray) !foreign method "Clear",
	GetCount :: (self:wxAuiPaneInfoArray) -> int !foreign method "GetCount",
	Insert   :: (self:wxAuiPaneInfoArray, pi:wxAuiPaneInfo, nIndex:int) !foreign method "Insert",
	IsEmpty  :: (self:wxAuiPaneInfoArray) -> bool !foreign method "IsEmpty",
	Item     :: (self:wxAuiPaneInfoArray, nIndex:int--[[size_t]]) -> wxAuiPaneInfo !foreign method "Item",
	RemoveAt :: (self:wxAuiPaneInfoArray, nIndex:int--[[size_t]]) !foreign method "RemoveAt",
}

export wxAuiManager :: !foreign struct {
	using wxEvtHandler,

	!call      :: (managed_wnd:wxWindow=wxWindow.null, flags:int=wxAUI_MGR_DEFAULT) -> wxAuiManager !foreign lua "wxaui.wxAuiManager",
	GetManager :: (window:wxWindow) -> wxAuiManager !foreign lua "wxaui.wxAuiManager.GetManager",

	UnInit                :: (self:wxAuiManager) !foreign method "UnInit",
	SetFlags              :: (self:wxAuiManager, flags:int) !foreign method "SetFlags",
	GetFlags              :: (self:wxAuiManager) -> int !foreign method "GetFlags",
	SetManagedWindow      :: (self:wxAuiManager, managed_wnd:wxWindow) !foreign method "SetManagedWindow",
	GetManagedWindow      :: (self:wxAuiManager) -> wxWindow !foreign method "GetManagedWindow",
	SetArtProvider        :: (self:wxAuiManager, art_provider:wxAuiDockArt) !foreign method "SetArtProvider",
	GetArtProvider        :: (self:wxAuiManager) -> wxAuiDockArt !foreign method "GetArtProvider",
	GetPane               :: (self:wxAuiManager, window:wxWindow) -> wxAuiPaneInfo !foreign method "GetPane",
	GetPane               :: (self:wxAuiManager, name:wxString|string) -> wxAuiPaneInfo !foreign method "GetPane",
	GetAllPanes           :: (self:wxAuiManager) -> wxAuiPaneInfoArray !foreign method "GetAllPanes",
	AddPane               :: (self:wxAuiManager, window:wxWindow, pane_info:wxAuiPaneInfo) -> bool !foreign method "AddPane",
	AddPane               :: (self:wxAuiManager, window:wxWindow, pane_info:wxAuiPaneInfo, drop_pos:wxPoint) -> bool !foreign method "AddPane",
	AddPane               :: (self:wxAuiManager, window:wxWindow, direction:int=wxLEFT, caption:wxString|string=wxEmptyString) -> bool !foreign method "AddPane",
	InsertPane            :: (self:wxAuiManager, window:wxWindow, insert_location:wxAuiPaneInfo, insert_level:int=wxAUI_INSERT_PANE) -> bool !foreign method "InsertPane",
	DetachPane            :: (self:wxAuiManager, window:wxWindow) -> bool !foreign method "DetachPane",
	Update                :: (self:wxAuiManager) !foreign method "Update",
	SavePaneInfo          :: (self:wxAuiManager, pane:wxAuiPaneInfo) -> string !foreign method "SavePaneInfo",
	LoadPaneInfo          :: (self:wxAuiManager, pane_part:wxString|string, pane:wxAuiPaneInfo) !foreign method "LoadPaneInfo",
	SavePerspective       :: (self:wxAuiManager) -> string !foreign method "SavePerspective",
	LoadPerspective       :: (self:wxAuiManager, perspective:wxString|string, update:bool=true) -> bool !foreign method "LoadPerspective",
	SetDockSizeConstraint :: (self:wxAuiManager, width_pct:float--[[double]], height_pct:float--[[double]]) !foreign method "SetDockSizeConstraint",
	GetDockSizeConstraint :: (self:wxAuiManager, width_pct:float--[[double]], height_pct:float--[[double]]) !foreign method "GetDockSizeConstraint",
	ClosePane             :: (self:wxAuiManager, pane_info:wxAuiPaneInfo) !foreign method "ClosePane",
	MaximizePane          :: (self:wxAuiManager, pane_info:wxAuiPaneInfo) !foreign method "MaximizePane",
	RestorePane           :: (self:wxAuiManager, pane_info:wxAuiPaneInfo) !foreign method "RestorePane",
	RestoreMaximizedPane  :: (self:wxAuiManager) !foreign method "RestoreMaximizedPane",
	CreateFloatingFrame   :: (self:wxAuiManager, parent:wxWindow, p:wxAuiPaneInfo) -> wxAuiFloatingFrame !foreign method "CreateFloatingFrame",
	StartPaneDrag         :: (self:wxAuiManager, pane_window:wxWindow, offset:wxPoint) !foreign method "StartPaneDrag",
	CalculateHintRect     :: (self:wxAuiManager, pane_window:wxWindow, pt:wxPoint, offset:wxPoint) -> wxRect !foreign method "CalculateHintRect",
	DrawHintRect          :: (self:wxAuiManager, pane_window:wxWindow, pt:wxPoint, offset:wxPoint) !foreign method "DrawHintRect",
	ShowHint              :: (self:wxAuiManager, rect:wxRect) !foreign method "ShowHint",
	HideHint              :: (self:wxAuiManager) !foreign method "HideHint",
	OnRender              :: (self:wxAuiManager, evt:wxAuiManagerEvent) !foreign method "OnRender",
	OnPaneButton          :: (self:wxAuiManager, evt:wxAuiManagerEvent) !foreign method "OnPaneButton",
}

export wxAuiManagerEvent :: !foreign struct {
	using wxEvent,

	!call :: (type:wxEventType=wxEVT_NULL) -> wxAuiManagerEvent !foreign lua "wxaui.wxAuiManagerEvent",
	!call :: (c:wxAuiManagerEvent) -> wxAuiManagerEvent !foreign lua "wxaui.wxAuiManagerEvent",

	SetManager :: (self:wxAuiManagerEvent, mgr:wxAuiManager) !foreign method "SetManager",
	SetPane    :: (self:wxAuiManagerEvent, p:wxAuiPaneInfo) !foreign method "SetPane",
	SetButton  :: (self:wxAuiManagerEvent, b:int) !foreign method "SetButton",
	SetDC      :: (self:wxAuiManagerEvent, pdc:wxDC) !foreign method "SetDC",
	GetManager :: (self:wxAuiManagerEvent) -> wxAuiManager !foreign method "GetManager",
	GetPane    :: (self:wxAuiManagerEvent) -> wxAuiPaneInfo !foreign method "GetPane",
	GetButton  :: (self:wxAuiManagerEvent) -> int !foreign method "GetButton",
	GetDC      :: (self:wxAuiManagerEvent) -> wxDC !foreign method "GetDC",
	Veto       :: (self:wxAuiManagerEvent, veto:bool=true) !foreign method "Veto",
	GetVeto    :: (self:wxAuiManagerEvent) -> bool !foreign method "GetVeto",
	SetCanVeto :: (self:wxAuiManagerEvent, can_veto:bool) !foreign method "SetCanVeto",
	CanVeto    :: (self:wxAuiManagerEvent) -> bool !foreign method "CanVeto",
}

export wxAuiDockInfo :: !foreign struct {
	using wxLuaUserdata,

	rect:           wxRect,
	dock_direction: int,
	dock_layer:     int,
	dock_row:       int,
	size:           int,
	min_size:       int,
	resizable:      bool,
	toolbar:        bool,
	fixed:          bool,
	reserved1:      bool,

	!call :: () -> wxAuiDockInfo !foreign lua "wxaui.wxAuiDockInfo",
	!call :: (c:wxAuiDockInfo) -> wxAuiDockInfo !foreign lua "wxaui.wxAuiDockInfo",

	IsOk         :: (self:wxAuiDockInfo) -> bool !foreign method "IsOk",
	IsHorizontal :: (self:wxAuiDockInfo) -> bool !foreign method "IsHorizontal",
	IsVertical   :: (self:wxAuiDockInfo) -> bool !foreign method "IsVertical",
}

export wxAuiDockUIPart :: !foreign struct {
	using wxLuaUserdata,

	type:        int,
	orientation: int,
	dock:        wxAuiDockInfo,
	pane:        wxAuiPaneInfo,
	button:      wxAuiPaneButton,
	cont_sizer:  wxSizer,
	sizer_item:  wxSizerItem,
	rect:        wxRect,

	typeCaption:    wxEnum : !foreign lua "wxaui.wxAuiDockUIPart.typeCaption",
	typeGripper:    wxEnum : !foreign lua "wxaui.wxAuiDockUIPart.typeGripper",
	typeDock:       wxEnum : !foreign lua "wxaui.wxAuiDockUIPart.typeDock",
	typeDockSizer:  wxEnum : !foreign lua "wxaui.wxAuiDockUIPart.typeDockSizer",
	typePane:       wxEnum : !foreign lua "wxaui.wxAuiDockUIPart.typePane",
	typePaneSizer:  wxEnum : !foreign lua "wxaui.wxAuiDockUIPart.typePaneSizer",
	typeBackground: wxEnum : !foreign lua "wxaui.wxAuiDockUIPart.typeBackground",
	typePaneBorder: wxEnum : !foreign lua "wxaui.wxAuiDockUIPart.typePaneBorder",
	typePaneButton: wxEnum : !foreign lua "wxaui.wxAuiDockUIPart.typePaneButton",
}

export wxAuiPaneButton :: !foreign struct {
	using wxLuaUserdata,

	button_id: int,
}

export wxAuiMDIParentFrame :: !foreign struct {
	using wxFrame,

	!call :: () -> wxAuiMDIParentFrame !foreign lua "wxaui.wxAuiMDIParentFrame",
	!call :: (parent:wxWindow, winid:wxWindowID, title:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL)]], name:wxString|string="wxAuiMDIParentFrame") -> wxAuiMDIParentFrame !foreign lua "wxaui.wxAuiMDIParentFrame",

	Create           :: (self:wxAuiMDIParentFrame, parent:wxWindow, winid:wxWindowID, title:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=0--[[bitwise(wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL)]], name:wxString|string="wxAuiMDIParentFrame") -> bool !foreign method "Create",
	SetArtProvider   :: (self:wxAuiMDIParentFrame, provider:wxAuiTabArt) !foreign method "SetArtProvider",
	GetArtProvider   :: (self:wxAuiMDIParentFrame) -> wxAuiTabArt !foreign method "GetArtProvider",
	GetNotebook      :: (self:wxAuiMDIParentFrame) -> wxAuiNotebook !foreign method "GetNotebook",
	GetWindowMenu    :: (self:wxAuiMDIParentFrame) -> wxMenu !foreign method "GetWindowMenu",
	SetWindowMenu    :: (self:wxAuiMDIParentFrame, pMenu:wxMenu) !foreign method "SetWindowMenu",
	SetMenuBar       :: (self:wxAuiMDIParentFrame, pMenuBar:wxMenuBar) !foreign method "SetMenuBar",
	SetChildMenuBar  :: (self:wxAuiMDIParentFrame, pChild:wxAuiMDIChildFrame) !foreign method "SetChildMenuBar",
	ProcessEvent     :: (self:wxAuiMDIParentFrame, event:wxEvent) -> bool !foreign method "ProcessEvent",
	GetActiveChild   :: (self:wxAuiMDIParentFrame) -> wxAuiMDIChildFrame !foreign method "GetActiveChild",
	SetActiveChild   :: (self:wxAuiMDIParentFrame, pChildFrame:wxAuiMDIChildFrame) !foreign method "SetActiveChild",
	GetClientWindow  :: (self:wxAuiMDIParentFrame) -> wxAuiMDIClientWindow !foreign method "GetClientWindow",
	OnCreateClient   :: (self:wxAuiMDIParentFrame) -> wxAuiMDIClientWindow !foreign method "OnCreateClient",
	Cascade          :: (self:wxAuiMDIParentFrame) !foreign method "Cascade",
	Tile             :: (self:wxAuiMDIParentFrame, orient:wxOrientation=wxHORIZONTAL) !foreign method "Tile",
	ArrangeIcons     :: (self:wxAuiMDIParentFrame) !foreign method "ArrangeIcons",
	ActivateNext     :: (self:wxAuiMDIParentFrame) !foreign method "ActivateNext",
	ActivatePrevious :: (self:wxAuiMDIParentFrame) !foreign method "ActivatePrevious",
}

export wxAuiMDIChildFrame :: !foreign struct {
	using wxPanel,

	!call :: () -> wxAuiMDIChildFrame !foreign lua "wxaui.wxAuiMDIChildFrame",
	!call :: (parent:wxAuiMDIParentFrame, winid:wxWindowID, title:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxDEFAULT_FRAME_STYLE, name:wxString|string="wxAuiMDIChildFrame") -> wxAuiMDIChildFrame !foreign lua "wxaui.wxAuiMDIChildFrame",

	Create                 :: (self:wxAuiMDIChildFrame, parent:wxAuiMDIParentFrame, winid:wxWindowID, title:wxString|string, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxDEFAULT_FRAME_STYLE, name:wxString|string="wxAuiMDIChildFrame") -> bool !foreign method "Create",
	SetMenuBar             :: (self:wxAuiMDIChildFrame, menu_bar:wxMenuBar) !foreign method "SetMenuBar",
	GetMenuBar             :: (self:wxAuiMDIChildFrame) -> wxMenuBar !foreign method "GetMenuBar",
	SetTitle               :: (self:wxAuiMDIChildFrame, title:wxString|string) !foreign method "SetTitle",
	GetTitle               :: (self:wxAuiMDIChildFrame) -> string !foreign method "GetTitle",
	SetIcons               :: (self:wxAuiMDIChildFrame, icons:wxIconBundle) !foreign method "SetIcons",
	GetIcons               :: (self:wxAuiMDIChildFrame) -> wxIconBundle !foreign method "GetIcons",
	SetIcon                :: (self:wxAuiMDIChildFrame, icon:wxIcon) !foreign method "SetIcon",
	GetIcon                :: (self:wxAuiMDIChildFrame) -> wxIcon !foreign method "GetIcon",
	Activate               :: (self:wxAuiMDIChildFrame) !foreign method "Activate",
	Destroy                :: (self:wxAuiMDIChildFrame) -> bool !foreign method "Destroy",
	SetMDIParentFrame      :: (self:wxAuiMDIChildFrame, parent:wxAuiMDIParentFrame) !foreign method "SetMDIParentFrame",
	GetMDIParentFrame      :: (self:wxAuiMDIChildFrame) -> wxAuiMDIParentFrame !foreign method "GetMDIParentFrame",
	ApplyMDIChildFrameRect :: (self:wxAuiMDIChildFrame) !foreign method "ApplyMDIChildFrameRect",
	DoShow                 :: (self:wxAuiMDIChildFrame, show:bool) !foreign method "DoShow",
}

export wxAuiMDIClientWindow :: !foreign struct {
	using wxAuiNotebook,

	!call :: () -> wxAuiMDIClientWindow !foreign lua "wxaui.wxAuiMDIClientWindow",
	!call :: (parent:wxAuiMDIParentFrame, style:int--[[long]]=0) -> wxAuiMDIClientWindow !foreign lua "wxaui.wxAuiMDIClientWindow",

	CreateClient :: (self:wxAuiMDIClientWindow, parent:wxAuiMDIParentFrame, style:int--[[long]]=0--[[bitwise(wxVSCROLL|wxHSCROLL)]]) -> bool !foreign method "CreateClient",
	SetSelection :: (self:wxAuiMDIClientWindow, page:int--[[size_t]]) -> int !foreign method "SetSelection",
}
