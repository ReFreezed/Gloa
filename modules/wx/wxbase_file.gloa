--[[============================================================
--=
--=  wxLua/wxWidget bindings for GlÃ³a
--=  Interface source: wxbase_file.i
--=
--=  Tested with:
--=  - wxLua 2.8.7.0 / wxWidgets 2.8.8
--=
--=  Note: Most bindings have not been tested yet!
--=
--============================================================]]

!import "wx/common"
!import "wx/wxbase_datetime"
!import "wx/wxbase_data"

export wxMailcapStyle :: wxEnum
export wxMAILCAP_STANDARD: wxMailcapStyle : 1 -- Are these available in foreign wxLua?
export wxMAILCAP_NETSCAPE: wxMailcapStyle : 2
export wxMAILCAP_KDE:      wxMailcapStyle : 4
export wxMAILCAP_GNOME:    wxMailcapStyle : 8
export wxMAILCAP_ALL:      wxMailcapStyle : 15

export wxFILE_SEP_EXT       :: "."
export wxFILE_SEP_DSK       :: ":"
export wxFILE_SEP_PATH_DOS  :: "\\"
export wxFILE_SEP_PATH_UNIX :: "/"
export wxFILE_SEP_PATH_MAC  :: ":"
export wxFILE_SEP_PATH_VMS  :: "."
export wxARE_FILENAMES_CASE_SENSITIVE: int : !foreign lua "wx.wxARE_FILENAMES_CASE_SENSITIVE"
export wxPATH_GET_VOLUME:              int : !foreign lua "wx.wxPATH_GET_VOLUME"
export wxPATH_GET_SEPARATOR:           int : !foreign lua "wx.wxPATH_GET_SEPARATOR"
export wxPATH_MKDIR_FULL:              int : !foreign lua "wx.wxPATH_MKDIR_FULL"
export wxFILE:                         int : !foreign lua "wx.wxFILE"
export wxDIR:                          int : !foreign lua "wx.wxDIR"
export wxS_IRUSR:                      int : !foreign lua "wx.wxS_IRUSR"
export wxS_IWUSR:                      int : !foreign lua "wx.wxS_IWUSR"
export wxS_IXUSR:                      int : !foreign lua "wx.wxS_IXUSR"
export wxS_IRGRP:                      int : !foreign lua "wx.wxS_IRGRP"
export wxS_IWGRP:                      int : !foreign lua "wx.wxS_IWGRP"
export wxS_IXGRP:                      int : !foreign lua "wx.wxS_IXGRP"
export wxS_IROTH:                      int : !foreign lua "wx.wxS_IROTH"
export wxS_IWOTH:                      int : !foreign lua "wx.wxS_IWOTH"
export wxS_IXOTH:                      int : !foreign lua "wx.wxS_IXOTH"
export wxS_DEFAULT:                    int : !foreign lua "wx.wxS_DEFAULT"
export wxDIR_FILES:                    int : !foreign lua "wx.wxDIR_FILES"
export wxDIR_DIRS:                     int : !foreign lua "wx.wxDIR_DIRS"
export wxDIR_HIDDEN:                   int : !foreign lua "wx.wxDIR_HIDDEN"
export wxDIR_DOTDOT:                   int : !foreign lua "wx.wxDIR_DOTDOT"
export wxDIR_DEFAULT:                  int : !foreign lua "wx.wxDIR_DEFAULT"
export wxPATH_SEP_DOS:                 string : !foreign lua "wx.wxPATH_SEP_DOS"
export wxPATH_SEP_UNIX:                string : !foreign lua "wx.wxPATH_SEP_UNIX"
export wxPATH_SEP_MAC:                 string : !foreign lua "wx.wxPATH_SEP_MAC"
export wxPATH_SEP:                     string : !foreign lua "wx.wxPATH_SEP"
export wxTheMimeTypesManager:          wxMimeTypesManager : !foreign lua "wx.wxTheMimeTypesManager"

export wxPathFormat :: wxEnum
export wxPATH_NATIVE: wxPathFormat : !foreign lua "wx.wxPATH_NATIVE"
export wxPATH_UNIX:   wxPathFormat : !foreign lua "wx.wxPATH_UNIX"
export wxPATH_MAC:    wxPathFormat : !foreign lua "wx.wxPATH_MAC"
export wxPATH_DOS:    wxPathFormat : !foreign lua "wx.wxPATH_DOS"
export wxPATH_VMS:    wxPathFormat : !foreign lua "wx.wxPATH_VMS"
export wxPATH_BEOS:   wxPathFormat : !foreign lua "wx.wxPATH_BEOS"
export wxPATH_WIN:    wxPathFormat : !foreign lua "wx.wxPATH_WIN"
export wxPATH_OS2:    wxPathFormat : !foreign lua "wx.wxPATH_OS2"
export wxPATH_MAX:    wxPathFormat : !foreign lua "wx.wxPATH_MAX"

export wxPathNormalize :: wxEnum
export wxPATH_NORM_ENV_VARS: wxPathNormalize : !foreign lua "wx.wxPATH_NORM_ENV_VARS"
export wxPATH_NORM_DOTS:     wxPathNormalize : !foreign lua "wx.wxPATH_NORM_DOTS"
export wxPATH_NORM_TILDE:    wxPathNormalize : !foreign lua "wx.wxPATH_NORM_TILDE"
export wxPATH_NORM_CASE:     wxPathNormalize : !foreign lua "wx.wxPATH_NORM_CASE"
export wxPATH_NORM_ABSOLUTE: wxPathNormalize : !foreign lua "wx.wxPATH_NORM_ABSOLUTE"
export wxPATH_NORM_LONG:     wxPathNormalize : !foreign lua "wx.wxPATH_NORM_LONG"
export wxPATH_NORM_SHORTCUT: wxPathNormalize : !foreign lua "wx.wxPATH_NORM_SHORTCUT"
export wxPATH_NORM_ALL:      wxPathNormalize : !foreign lua "wx.wxPATH_NORM_ALL"

export wxSeekMode :: wxEnum
export wxFromStart:     wxSeekMode : !foreign lua "wx.wxFromStart"
export wxFromCurrent:   wxSeekMode : !foreign lua "wx.wxFromCurrent"
export wxFromEnd:       wxSeekMode : !foreign lua "wx.wxFromEnd"
export wxInvalidOffset: wxSeekMode : !foreign lua "wx.wxInvalidOffset"

export wxFileKind :: wxEnum
export wxFILE_KIND_UNKNOWN:  wxFileKind : !foreign lua "wx.wxFILE_KIND_UNKNOWN"
export wxFILE_KIND_DISK:     wxFileKind : !foreign lua "wx.wxFILE_KIND_DISK"
export wxFILE_KIND_TERMINAL: wxFileKind : !foreign lua "wx.wxFILE_KIND_TERMINAL"
export wxFILE_KIND_PIPE:     wxFileKind : !foreign lua "wx.wxFILE_KIND_PIPE"

export wxEOL :: wxEnum
export wxEOL_NATIVE: wxEOL : !foreign lua "wx.wxEOL_NATIVE"
export wxEOL_UNIX:   wxEOL : !foreign lua "wx.wxEOL_UNIX"
export wxEOL_MAC:    wxEOL : !foreign lua "wx.wxEOL_MAC"
export wxEOL_DOS:    wxEOL : !foreign lua "wx.wxEOL_DOS"

export wxStreamError :: wxEnum
export wxSTREAM_NO_ERROR:    wxStreamError : !foreign lua "wx.wxSTREAM_NO_ERROR"
export wxSTREAM_EOF:         wxStreamError : !foreign lua "wx.wxSTREAM_EOF"
export wxSTREAM_WRITE_ERROR: wxStreamError : !foreign lua "wx.wxSTREAM_WRITE_ERROR"
export wxSTREAM_READ_ERROR:  wxStreamError : !foreign lua "wx.wxSTREAM_READ_ERROR"

export wxFS_READ:     wxEnum : !foreign lua "wx.wxFS_READ"
export wxFS_SEEKABLE: wxEnum : !foreign lua "wx.wxFS_SEEKABLE"

export wxStandardPaths :: !foreign struct {
	using wxLuaUserdata,

	ResourceCat :: wxEnum,
	ResourceCat_None:     ResourceCat : !foreign lua "wx.wxStandardPaths.ResourceCat_None",
	ResourceCat_Messages: ResourceCat : !foreign lua "wx.wxStandardPaths.ResourceCat_Messages",
	ResourceCat_Max:      ResourceCat : !foreign lua "wx.wxStandardPaths.ResourceCat_Max",

	Get :: () -> wxStandardPaths !foreign lua "wx.wxStandardPaths.Get",

	GetExecutablePath        :: (self:wxStandardPaths) -> string !foreign method "GetExecutablePath",
	GetConfigDir             :: (self:wxStandardPaths) -> string !foreign method "GetConfigDir",
	GetUserConfigDir         :: (self:wxStandardPaths) -> string !foreign method "GetUserConfigDir",
	GetDataDir               :: (self:wxStandardPaths) -> string !foreign method "GetDataDir",
	GetLocalDataDir          :: (self:wxStandardPaths) -> string !foreign method "GetLocalDataDir",
	GetUserDataDir           :: (self:wxStandardPaths) -> string !foreign method "GetUserDataDir",
	GetUserLocalDataDir      :: (self:wxStandardPaths) -> string !foreign method "GetUserLocalDataDir",
	GetPluginsDir            :: (self:wxStandardPaths) -> string !foreign method "GetPluginsDir",
	GetResourcesDir          :: (self:wxStandardPaths) -> string !foreign method "GetResourcesDir",
	GetLocalizedResourcesDir :: (self:wxStandardPaths, lang:wxString|string, category:wxStandardPaths.ResourceCat=wxStandardPaths.ResourceCat_None) -> string !foreign method "GetLocalizedResourcesDir",
	GetDocumentsDir          :: (self:wxStandardPaths) -> string !foreign method "GetDocumentsDir",
	GetTempDir               :: (self:wxStandardPaths) -> string !foreign method "GetTempDir",
}

export wxPathList :: !foreign struct {
	using wxArrayString,

	new :: () -> wxPathList !foreign lua "wx.wxPathList",

	AddEnvList            :: (self:wxPathList, envVariable:wxString|string) !foreign method "AddEnvList",
	Add                   :: (self:wxPathList, path:wxString|string) -> bool !foreign method "Add",
	Add                   :: (self:wxPathList, paths:wxArrayString|[]string) !foreign method "Add",
	FindValidPath         :: (self:wxPathList, filename:wxString|string) -> string !foreign method "FindValidPath",
	FindAbsoluteValidPath :: (self:wxPathList, filename:wxString|string) -> string !foreign method "FindAbsoluteValidPath",
	EnsureFileAccessible  :: (self:wxPathList, path:wxString|string) -> bool !foreign method "EnsureFileAccessible",
}

export wxFileName :: !foreign struct {
	using wxLuaUserdata,

	new                :: () -> wxFileName !foreign lua "wx.wxFileName",
	new                :: (filename:wxFileName) -> wxFileName !foreign lua "wx.wxFileName",
	new                :: (fullpath:wxString|string, format:wxPathFormat=wxPATH_NATIVE) -> wxFileName !foreign lua "wx.wxFileName",
	new                :: (path:wxString|string, name:wxString|string, format:wxPathFormat=wxPATH_NATIVE) -> wxFileName !foreign lua "wx.wxFileName",
	new                :: (volume:wxString|string, path:wxString|string, name:wxString|string, ext:wxString|string, format:wxPathFormat=wxPATH_NATIVE) -> wxFileName !foreign lua "wx.wxFileName",
	DirExists          :: (dir:wxString|string) -> bool !foreign lua "wx.wxFileName.DirExists",
	DirName            :: (dir:wxString|string) -> wxFileName !foreign lua "wx.wxFileName.DirName",
	FileExists         :: (file:wxString|string) -> bool !foreign lua "wx.wxFileName.FileExists",
	FileName           :: (file:wxString|string) -> wxFileName !foreign lua "wx.wxFileName.FileName",
	GetCwd             :: (volume:wxString|string="") -> string !foreign lua "wx.wxFileName.GetCwd",
	GetForbiddenChars  :: (format:wxPathFormat=wxPATH_NATIVE) -> string !foreign lua "wx.wxFileName.GetForbiddenChars",
	GetFormat          :: (format:wxPathFormat=wxPATH_NATIVE) -> wxPathFormat !foreign lua "wx.wxFileName.GetFormat",
	GetHomeDir         :: () -> string !foreign lua "wx.wxFileName.GetHomeDir",
	GetPathSeparator   :: (format:wxPathFormat=wxPATH_NATIVE) -> int !foreign lua "wx.wxFileName.GetPathSeparator",
	GetPathSeparators  :: (format:wxPathFormat=wxPATH_NATIVE) -> string !foreign lua "wx.wxFileName.GetPathSeparators",
	GetPathTerminators :: (format:wxPathFormat=wxPATH_NATIVE) -> string !foreign lua "wx.wxFileName.GetPathTerminators",
	GetSize            :: (file:wxString|string) -> wxULongLong !foreign lua "wx.wxFileName.GetSize",
	GetVolumeSeparator :: (format:wxPathFormat=wxPATH_NATIVE) -> string !foreign lua "wx.wxFileName.GetVolumeSeparator",
	IsCaseSensitive    :: (format:wxPathFormat=wxPATH_NATIVE) -> bool !foreign lua "wx.wxFileName.IsCaseSensitive",
	IsPathSeparator    :: (ch:int, format:wxPathFormat=wxPATH_NATIVE) -> bool !foreign lua "wx.wxFileName.IsPathSeparator",
	IsDirWritable      :: (path:wxString|string) -> bool !foreign lua "wx.wxFileName.IsDirWritable",
	IsDirReadable      :: (path:wxString|string) -> bool !foreign lua "wx.wxFileName.IsDirReadable",
	IsFileWritable     :: (path:wxString|string) -> bool !foreign lua "wx.wxFileName.IsFileWritable",
	IsFileReadable     :: (path:wxString|string) -> bool !foreign lua "wx.wxFileName.IsFileReadable",
	IsFileExecutable   :: (path:wxString|string) -> bool !foreign lua "wx.wxFileName.IsFileExecutable",
	Mkdir              :: (dir:wxString|string, perm:int=4095, flags:int=0) -> bool !foreign lua "wx.wxFileName.Mkdir",
	Rmdir              :: (dir:wxString|string) -> bool !foreign lua "wx.wxFileName.Rmdir",
	SetCwd             :: (cwd:wxString|string) -> bool !foreign lua "wx.wxFileName.SetCwd",

	AppendDir            :: (self:wxFileName, dir:wxString|string) !foreign method "AppendDir",
	Assign               :: (self:wxFileName, filepath:wxFileName) !foreign method "Assign",
	Assign               :: (self:wxFileName, fullpath:wxString|string, format:wxPathFormat=wxPATH_NATIVE) !foreign method "Assign",
	Assign               :: (self:wxFileName, volume:wxString|string, path:wxString|string, name:wxString|string, ext:wxString|string, format:wxPathFormat=wxPATH_NATIVE) !foreign method "Assign",
	Assign               :: (self:wxFileName, path:wxString|string, name:wxString|string, format:wxPathFormat=wxPATH_NATIVE) !foreign method "Assign",
	Assign               :: (self:wxFileName, path:wxString|string, name:wxString|string, ext:wxString|string, format:wxPathFormat=wxPATH_NATIVE) !foreign method "Assign",
	AssignCwd            :: (self:wxFileName, volume:wxString|string="") !foreign method "AssignCwd",
	AssignDir            :: (self:wxFileName, dir:wxString|string, format:wxPathFormat=wxPATH_NATIVE) !foreign method "AssignDir",
	AssignHomeDir        :: (self:wxFileName) !foreign method "AssignHomeDir",
	AssignTempFileName   :: (self:wxFileName, prefix:wxString|string) !foreign method "AssignTempFileName",
	AssignTempFileName   :: (self:wxFileName, prefix:wxString|string, fileTemp:wxFile) !foreign method "AssignTempFileName",
	Clear                :: (self:wxFileName) !foreign method "Clear",
	ClearExt             :: (self:wxFileName) !foreign method "ClearExt",
	DirExists            :: (self:wxFileName) -> bool !foreign method "DirExists",
	FileExists           :: (self:wxFileName) -> bool !foreign method "FileExists",
	GetDirCount          :: (self:wxFileName) -> int !foreign method "GetDirCount",
	GetDirs              :: (self:wxFileName) -> []string !foreign method "GetDirs",
	GetExt               :: (self:wxFileName) -> string !foreign method "GetExt",
	GetFullName          :: (self:wxFileName) -> string !foreign method "GetFullName",
	GetFullPath          :: (self:wxFileName, format:wxPathFormat=wxPATH_NATIVE) -> string !foreign method "GetFullPath",
	GetHumanReadableSize :: (self:wxFileName, nullsize:wxString|string="Not available", precision:int=1) -> string !foreign method "GetHumanReadableSize",
	GetLongPath          :: (self:wxFileName) -> string !foreign method "GetLongPath",
	GetModificationTime  :: (self:wxFileName) -> wxDateTime !foreign method "GetModificationTime",
	GetName              :: (self:wxFileName) -> string !foreign method "GetName",
	GetPath              :: (self:wxFileName, flags:int=0, format:wxPathFormat=wxPATH_NATIVE) -> string !foreign method "GetPath",
	GetPathWithSep       :: (self:wxFileName, format:wxPathFormat=wxPATH_NATIVE) -> string !foreign method "GetPathWithSep",
	GetShortPath         :: (self:wxFileName) -> string !foreign method "GetShortPath",
	GetSize              :: (self:wxFileName) -> wxULongLong !foreign method "GetSize",
	GetTimes             :: (self:wxFileName) -> bool, wxDateTime, wxDateTime, wxDateTime !foreign method "GetTimes",
	GetVolume            :: (self:wxFileName) -> string !foreign method "GetVolume",
	HasExt               :: (self:wxFileName) -> bool !foreign method "HasExt",
	HasName              :: (self:wxFileName) -> bool !foreign method "HasName",
	HasVolume            :: (self:wxFileName) -> bool !foreign method "HasVolume",
	InsertDir            :: (self:wxFileName, before:int, dir:wxString|string) !foreign method "InsertDir",
	IsAbsolute           :: (self:wxFileName, format:wxPathFormat=wxPATH_NATIVE) -> bool !foreign method "IsAbsolute",
	IsOk                 :: (self:wxFileName) -> bool !foreign method "IsOk",
	IsRelative           :: (self:wxFileName, format:wxPathFormat=wxPATH_NATIVE) -> bool !foreign method "IsRelative",
	IsDir                :: (self:wxFileName) -> bool !foreign method "IsDir",
	IsDirWritable        :: (self:wxFileName) -> bool !foreign method "IsDirWritable",
	IsDirReadable        :: (self:wxFileName) -> bool !foreign method "IsDirReadable",
	IsFileWritable       :: (self:wxFileName) -> bool !foreign method "IsFileWritable",
	IsFileReadable       :: (self:wxFileName) -> bool !foreign method "IsFileReadable",
	IsFileExecutable     :: (self:wxFileName) -> bool !foreign method "IsFileExecutable",
	MakeAbsolute         :: (self:wxFileName, cwd:wxString|string="", format:wxPathFormat=wxPATH_NATIVE) -> bool !foreign method "MakeAbsolute",
	MakeRelativeTo       :: (self:wxFileName, pathBase:wxString|string="", format:wxPathFormat=wxPATH_NATIVE) -> bool !foreign method "MakeRelativeTo",
	Mkdir                :: (self:wxFileName, perm:int=4095, flags:int=0) -> bool !foreign method "Mkdir",
	Normalize            :: (self:wxFileName, flags:int=wxPATH_NORM_ALL, cwd:wxString|string=wxEmptyString, format:wxPathFormat=wxPATH_NATIVE) -> bool !foreign method "Normalize",
	PrependDir           :: (self:wxFileName, dir:wxString|string) !foreign method "PrependDir",
	RemoveDir            :: (self:wxFileName, pos:int) !foreign method "RemoveDir",
	RemoveLastDir        :: (self:wxFileName) !foreign method "RemoveLastDir",
	Rmdir                :: (self:wxFileName) -> bool !foreign method "Rmdir",
	SameAs               :: (self:wxFileName, filepath:wxFileName, format:wxPathFormat=wxPATH_NATIVE) -> bool !foreign method "SameAs",
	SetCwd               :: (self:wxFileName) -> bool !foreign method "SetCwd",
	SetExt               :: (self:wxFileName, ext:wxString|string) !foreign method "SetExt",
	SetEmptyExt          :: (self:wxFileName) !foreign method "SetEmptyExt",
	SetFullName          :: (self:wxFileName, fullname:wxString|string) !foreign method "SetFullName",
	SetName              :: (self:wxFileName, name:wxString|string) !foreign method "SetName",
	SetTimes             :: (self:wxFileName, dtAccess:wxDateTime, dtMod:wxDateTime, dtCreate:wxDateTime) -> bool !foreign method "SetTimes",
	SetVolume            :: (self:wxFileName, volume:wxString|string) !foreign method "SetVolume",
	SplitPath            :: (self:wxFileName, fullpath:wxString|string, format:wxPathFormat=wxPATH_NATIVE) -> (path:string, name:string, ext:string) !foreign method "SplitPath",
	SplitPathVolume      :: (self:wxFileName, fullpath:wxString|string, format:wxPathFormat=wxPATH_NATIVE) -> (volume:string, path:string, name:string, ext:string) !foreign method "SplitPathVolume",
	SplitVolume          :: (self:wxFileName, fullpath:wxString|string, format:wxPathFormat=wxPATH_NATIVE) -> (volume:string, path:string) !foreign method "SplitVolume",
	Touch                :: (self:wxFileName) -> bool !foreign method "Touch",
}

export wxFile :: !foreign struct {
	using wxLuaUserdata,

	OpenMode :: wxEnum,
	read:         OpenMode : !foreign lua "wx.wxFile.read",
	write:        OpenMode : !foreign lua "wx.wxFile.write",
	read_write:   OpenMode : !foreign lua "wx.wxFile.read_write",
	write_append: OpenMode : !foreign lua "wx.wxFile.write_append",
	write_excl:   OpenMode : !foreign lua "wx.wxFile.write_excl",

	fd_invalid: wxEnum : !foreign lua "wx.wxFile.fd_invalid",
	fd_stdin:   wxEnum : !foreign lua "wx.wxFile.fd_stdin",
	fd_stdout:  wxEnum : !foreign lua "wx.wxFile.fd_stdout",
	fd_stderr:  wxEnum : !foreign lua "wx.wxFile.fd_stderr",

	new    :: () -> wxFile !foreign lua "wx.wxFile",
	new    :: (filename:wxString|string, mode:wxFile.OpenMode=wxFile.read) -> wxFile !foreign lua "wx.wxFile",
	Access :: (name:wxString|string, mode:wxFile.OpenMode) -> bool !foreign lua "wx.wxFile.Access",
	Exists :: (name:wxString|string) -> bool !foreign lua "wx.wxFile.Exists",

	Attach   :: (self:wxFile, fd:int) !foreign method "Attach",
	Close    :: (self:wxFile) !foreign method "Close",
	Create   :: (self:wxFile, filename:wxString|string, overwrite:bool=false, access:int=wxS_DEFAULT) -> bool !foreign method "Create",
	Detach   :: (self:wxFile) !foreign method "Detach",
	fd       :: (self:wxFile) -> int !foreign method "fd",
	Eof      :: (self:wxFile) -> bool !foreign method "Eof",
	Flush    :: (self:wxFile) -> bool !foreign method "Flush",
	GetKind  :: (self:wxFile) -> wxFileKind !foreign method "GetKind",
	IsOpened :: (self:wxFile) -> bool !foreign method "IsOpened",
	Length   :: (self:wxFile) -> wxFileOffset !foreign method "Length",
	Open     :: (self:wxFile, filename:wxString|string, mode:wxFile.OpenMode=wxFile.read) -> bool !foreign method "Open",
	Read     :: (self:wxFile, count:int) -> (count:int--[[size_t]], _2:string) !foreign method "Read",
	Seek     :: (self:wxFile, offset:wxFileOffset, mode:wxSeekMode=wxFromStart) -> wxFileOffset !foreign method "Seek",
	SeekEnd  :: (self:wxFile, offset:wxFileOffset=0) -> wxFileOffset !foreign method "SeekEnd",
	Tell     :: (self:wxFile) -> wxFileOffset !foreign method "Tell",
	Write    :: (self:wxFile, arg1:string, count:int) -> int--[[size_t]] !foreign method "Write",
	Write    :: (self:wxFile, str:wxString|string) -> int--[[size_t]] !foreign method "Write",
}

export wxTempFile :: !foreign struct {
	using wxLuaUserdata,

	new :: () -> wxTempFile !foreign lua "wx.wxTempFile",
	new :: (strName:wxString|string) -> wxTempFile !foreign lua "wx.wxTempFile",

	Open     :: (self:wxTempFile, strName:wxString|string) -> bool !foreign method "Open",
	IsOpened :: (self:wxTempFile) -> bool !foreign method "IsOpened",
	Length   :: (self:wxTempFile) -> wxFileOffset !foreign method "Length",
	Seek     :: (self:wxTempFile, ofs:wxFileOffset, mode:wxSeekMode=wxFromStart) -> wxFileOffset !foreign method "Seek",
	Tell     :: (self:wxTempFile) -> wxFileOffset !foreign method "Tell",
	Write    :: (self:wxTempFile, str:wxString|string) -> bool !foreign method "Write",
	Commit   :: (self:wxTempFile) -> bool !foreign method "Commit",
	Discard  :: (self:wxTempFile) !foreign method "Discard",
}

export wxDir :: !foreign struct {
	using wxLuaUserdata,

	new          :: () -> wxDir !foreign lua "wx.wxDir",
	new          :: (dir:wxString|string) -> wxDir !foreign lua "wx.wxDir",
	Exists       :: (dir:wxString|string) -> bool !foreign lua "wx.wxDir.Exists",
	FindFirst    :: (dirname:wxString|string, filespec:wxString|string, flags:int=wxDIR_DEFAULT) -> string !foreign lua "wx.wxDir.FindFirst",
	GetTotalSize :: (dir:wxString|string) -> wxULongLong !foreign lua "wx.wxDir.GetTotalSize",

	GetAllFiles :: (self:wxDir, dirname:wxString|string, filespec:wxString|string="", flags:int=wxDIR_DEFAULT) -> int, []string !foreign method "GetAllFiles",
	GetFirst    :: (self:wxDir, filespec:wxString|string="", flags:int=wxDIR_DEFAULT) -> bool, string !foreign method "GetFirst",
	GetName     :: (self:wxDir) -> string !foreign method "GetName",
	GetNext     :: (self:wxDir) -> bool, string !foreign method "GetNext",
	HasFiles    :: (self:wxDir, filespec:wxString|string="") -> bool !foreign method "HasFiles",
	HasSubDirs  :: (self:wxDir, dirspec:wxString|string="") -> bool !foreign method "HasSubDirs",
	IsOpened    :: (self:wxDir) -> bool !foreign method "IsOpened",
	Open        :: (self:wxDir, dir:wxString|string) -> bool !foreign method "Open",
}

export wxFileTypeInfo :: !foreign struct {
	using wxLuaUserdata,

	new :: (sArray:wxArrayString|[]string) -> wxFileTypeInfo !foreign lua "wx.wxFileTypeInfo",
	new :: () -> wxFileTypeInfo !foreign lua "wx.wxFileTypeInfo",

	IsValid            :: (self:wxFileTypeInfo) -> bool !foreign method "IsValid",
	SetIcon            :: (self:wxFileTypeInfo, iconFile:wxString|string, iconIndex:int=0) !foreign method "SetIcon",
	SetShortDesc       :: (self:wxFileTypeInfo, shortDesc:wxString|string) !foreign method "SetShortDesc",
	GetMimeType        :: (self:wxFileTypeInfo) -> string !foreign method "GetMimeType",
	GetOpenCommand     :: (self:wxFileTypeInfo) -> string !foreign method "GetOpenCommand",
	GetPrintCommand    :: (self:wxFileTypeInfo) -> string !foreign method "GetPrintCommand",
	GetShortDesc       :: (self:wxFileTypeInfo) -> string !foreign method "GetShortDesc",
	GetDescription     :: (self:wxFileTypeInfo) -> string !foreign method "GetDescription",
	GetExtensions      :: (self:wxFileTypeInfo) -> wxArrayString !foreign method "GetExtensions",
	GetExtensionsCount :: (self:wxFileTypeInfo) -> int--[[size_t]] !foreign method "GetExtensionsCount",
	GetIconFile        :: (self:wxFileTypeInfo) -> string !foreign method "GetIconFile",
	GetIconIndex       :: (self:wxFileTypeInfo) -> int !foreign method "GetIconIndex",
}

export wxIconLocation :: !foreign struct {
	using wxLuaUserdata,

	new :: (file:wxString|string="", num:int=0) -> wxIconLocation !foreign lua "wx.wxIconLocation",

	IsOk        :: (self:wxIconLocation) -> bool !foreign method "IsOk",
	SetFileName :: (self:wxIconLocation, filename:wxString|string) !foreign method "SetFileName",
	GetFileName :: (self:wxIconLocation) -> string !foreign method "GetFileName",
	SetIndex    :: (self:wxIconLocation, num:int) !foreign method "SetIndex",
	GetIndex    :: (self:wxIconLocation) -> int !foreign method "GetIndex",
}

export wxFileType :: !foreign struct {
	using wxLuaUserdata,

	MessageParameters :: !foreign struct {
		using wxLuaUserdata,

		new_ :: (filename:wxString|string, mimetype:wxString|string="") -> MessageParameters !foreign lua "wx.MessageParameters",

		GetFileName   :: (self:MessageParameters) -> string !foreign method "GetFileName",
		GetMimeType   :: (self:MessageParameters) -> string !foreign method "GetMimeType",
		GetParamValue :: (self:MessageParameters, name:wxString|string) -> string !foreign method "GetParamValue",
	},

	new           :: (ftInfo:wxFileTypeInfo) -> wxFileType !foreign lua "wx.wxFileType",
	ExpandCommand :: (command:wxString|string, params:wxFileType.MessageParameters) -> string !foreign lua "wx.wxFileType.ExpandCommand",

	GetMimeTypes    :: (self:wxFileType, mimeTypes:wxArrayString|[]string) -> bool !foreign method "GetMimeTypes",
	GetExtensions   :: (self:wxFileType, extensions:wxArrayString|[]string) -> bool !foreign method "GetExtensions",
	GetIcon         :: (self:wxFileType, iconloc:wxIconLocation) -> bool !foreign method "GetIcon",
	GetDescription  :: (self:wxFileType) -> bool, string !foreign method "GetDescription",
	GetOpenCommand  :: (self:wxFileType, filename:wxString|string) -> string !foreign method "GetOpenCommand",
	GetPrintCommand :: (self:wxFileType, params:wxFileType.MessageParameters) -> bool, string !foreign method "GetPrintCommand",
	GetAllCommands  :: (self:wxFileType, verbs:wxArrayString|[]string, commands:wxArrayString|[]string, params:wxFileType.MessageParameters) -> int--[[size_t]] !foreign method "GetAllCommands",
	SetCommand      :: (self:wxFileType, cmd:wxString|string, verb:wxString|string, overwriteprompt:bool=true) -> bool !foreign method "SetCommand",
	SetDefaultIcon  :: (self:wxFileType, cmd:wxString|string="", index:int=0) -> bool !foreign method "SetDefaultIcon",
	Unassociate     :: (self:wxFileType) -> bool !foreign method "Unassociate",
}

export wxMimeTypesManager :: !foreign struct {
	using wxLuaUserdata,

	IsOfType :: (mimeType:wxString|string, wildcard:wxString|string) -> bool !foreign lua "wx.wxMimeTypesManager.IsOfType",

	Initialize               :: (self:wxMimeTypesManager, mailcapStyle:int=wxMAILCAP_ALL, extraDir:wxString|string="") !foreign method "Initialize",
	ClearData                :: (self:wxMimeTypesManager) !foreign method "ClearData",
	GetFileTypeFromExtension :: (self:wxMimeTypesManager, ext:wxString|string) -> wxFileType !foreign method "GetFileTypeFromExtension",
	GetFileTypeFromMimeType  :: (self:wxMimeTypesManager, mimeType:wxString|string) -> wxFileType !foreign method "GetFileTypeFromMimeType",
	ReadMailcap              :: (self:wxMimeTypesManager, filename:wxString|string, fallback:bool=false) -> bool !foreign method "ReadMailcap",
	ReadMimeTypes            :: (self:wxMimeTypesManager, filename:wxString|string) -> bool !foreign method "ReadMimeTypes",
	EnumAllFileTypes         :: (self:wxMimeTypesManager, mimetypes:wxArrayString|[]string) -> int--[[size_t]] !foreign method "EnumAllFileTypes",
	AddFallback              :: (self:wxMimeTypesManager, ft:wxFileTypeInfo) !foreign method "AddFallback",
	Associate                :: (self:wxMimeTypesManager, ftInfo:wxFileTypeInfo) -> wxFileType !foreign method "Associate",
	Unassociate              :: (self:wxMimeTypesManager, ft:wxFileType) -> bool !foreign method "Unassociate",
}

export wxStreamBase :: !foreign struct {
	using wxLuaUserdata,

	GetLength    :: (self:wxStreamBase) -> wxFileOffset !foreign method "GetLength",
	GetLastError :: (self:wxStreamBase) -> wxStreamError !foreign method "GetLastError",
	GetSize      :: (self:wxStreamBase) -> int--[[size_t]] !foreign method "GetSize",
	IsOk         :: (self:wxStreamBase) -> bool !foreign method "IsOk",
	IsSeekable   :: (self:wxStreamBase) -> bool !foreign method "IsSeekable",
	Reset        :: (self:wxStreamBase) !foreign method "Reset",
}

export wxInputStream :: !foreign struct {
	using wxStreamBase,

	CanRead  :: (self:wxInputStream) -> bool !foreign method "CanRead",
	GetC     :: (self:wxInputStream) -> int--[[char]] !foreign method "GetC",
	Eof      :: (self:wxInputStream) -> bool !foreign method "Eof",
	LastRead :: (self:wxInputStream) -> int--[[size_t]] !foreign method "LastRead",
	Peek     :: (self:wxInputStream) -> int--[[char]] !foreign method "Peek",
	Read     :: (self:wxInputStream, size:int--[[size_t]]) -> string !foreign method "Read",
	Read     :: (self:wxInputStream, stream_in:wxOutputStream) -> wxInputStream !foreign method "Read",
	SeekI    :: (self:wxInputStream, pos:wxFileOffset, mode:wxSeekMode=wxFromStart) -> wxFileOffset !foreign method "SeekI",
	TellI    :: (self:wxInputStream) -> wxFileOffset !foreign method "TellI",
	Ungetch  :: (self:wxInputStream, arg1:string, size:int--[[size_t]]) -> int--[[size_t]] !foreign method "Ungetch",
	Ungetch  :: (self:wxInputStream, c:int--[[char]]) -> bool !foreign method "Ungetch",
}

export wxOutputStream :: !foreign struct {
	using wxStreamBase,

	Close     :: (self:wxOutputStream) -> bool !foreign method "Close",
	LastWrite :: (self:wxOutputStream) -> int--[[size_t]] !foreign method "LastWrite",
	PutC      :: (self:wxOutputStream, c:int--[[char]]) !foreign method "PutC",
	SeekO     :: (self:wxOutputStream, pos:wxFileOffset, mode:wxSeekMode=wxFromStart) -> wxFileOffset !foreign method "SeekO",
	TellO     :: (self:wxOutputStream) -> wxFileOffset !foreign method "TellO",
	Write     :: (self:wxOutputStream, arg1:string, size:int--[[size_t]]) -> wxOutputStream !foreign method "Write",
	Write     :: (self:wxOutputStream, stream_in:wxInputStream) -> wxOutputStream !foreign method "Write",
}

export wxFileInputStream :: !foreign struct {
	using wxInputStream,

	new :: (fileName:wxString|string) -> wxFileInputStream !foreign lua "wx.wxFileInputStream",
	new :: (file:wxFile) -> wxFileInputStream !foreign lua "wx.wxFileInputStream",

	Ok :: (self:wxFileInputStream) -> bool !foreign method "Ok",
}

export wxFileOutputStream :: !foreign struct {
	using wxOutputStream,

	new :: (fileName:wxString|string) -> wxFileOutputStream !foreign lua "wx.wxFileOutputStream",
	new :: (file:wxFile) -> wxFileOutputStream !foreign lua "wx.wxFileOutputStream",

	Ok :: (self:wxFileOutputStream) -> bool !foreign method "Ok",
}

export wxMemoryInputStream :: !foreign struct {
	using wxInputStream,

	new :: (data:int--[[char]], length:int--[[size_t]]) -> wxMemoryInputStream !foreign lua "wx.wxMemoryInputStream",
}

export wxDataInputStream :: !foreign struct {
	using wxLuaUserdata,

	new :: (s:wxInputStream) -> wxDataInputStream !foreign lua "wx.wxDataInputStream",

	IsOk             :: (self:wxDataInputStream) -> bool !foreign method "IsOk",
	Read32           :: (self:wxDataInputStream) -> int--[[wxUint32]] !foreign method "Read32",
	Read16           :: (self:wxDataInputStream) -> int--[[wxUint16]] !foreign method "Read16",
	Read8            :: (self:wxDataInputStream) -> int--[[wxUint8]] !foreign method "Read8",
	ReadDouble       :: (self:wxDataInputStream) -> float--[[double]] !foreign method "ReadDouble",
	ReadString       :: (self:wxDataInputStream) -> string !foreign method "ReadString",
	BigEndianOrdered :: (self:wxDataInputStream, be_order:bool) !foreign method "BigEndianOrdered",
}

export wxDataOutputStream :: !foreign struct {
	using wxLuaUserdata,

	new :: (s:wxOutputStream) -> wxDataOutputStream !foreign lua "wx.wxDataOutputStream",

	IsOk             :: (self:wxDataOutputStream) -> bool !foreign method "IsOk",
	Write32          :: (self:wxDataOutputStream, i:int--[[wxUint32]]) !foreign method "Write32",
	Write16          :: (self:wxDataOutputStream, i:int--[[wxUint16]]) !foreign method "Write16",
	Write8           :: (self:wxDataOutputStream, i:int--[[wxUint8]]) !foreign method "Write8",
	WriteDouble      :: (self:wxDataOutputStream, d:float--[[double]]) !foreign method "WriteDouble",
	WriteString      :: (self:wxDataOutputStream, str:wxString|string) !foreign method "WriteString",
	BigEndianOrdered :: (self:wxDataOutputStream, be_order:bool) !foreign method "BigEndianOrdered",
}

export wxFSFile :: !foreign struct {
	using wxObject,

	new :: (stream:wxInputStream, loc:wxString|string, mimetype:wxString|string, anchor:wxString|string, modif:wxDateTime) -> wxFSFile !foreign lua "wx.wxFSFile",

	GetStream           :: (self:wxFSFile) -> wxInputStream !foreign method "GetStream",
	DetachStream        :: (self:wxFSFile) -> wxInputStream !foreign method "DetachStream",
	SetStream           :: (self:wxFSFile, stream:wxInputStream) !foreign method "SetStream",
	GetMimeType         :: (self:wxFSFile) -> string !foreign method "GetMimeType",
	GetLocation         :: (self:wxFSFile) -> string !foreign method "GetLocation",
	GetAnchor           :: (self:wxFSFile) -> string !foreign method "GetAnchor",
	GetModificationTime :: (self:wxFSFile) -> wxDateTime !foreign method "GetModificationTime",
}

export wxFileSystemHandler :: !foreign struct {
	using wxObject,

	CanOpen   :: (self:wxFileSystemHandler, location:wxString|string) -> bool !foreign method "CanOpen",
	OpenFile  :: (self:wxFileSystemHandler, fs:wxFileSystem, location:wxString|string) -> wxFSFile !foreign method "OpenFile",
	FindFirst :: (self:wxFileSystemHandler, spec:wxString|string, flags:int=0) -> string !foreign method "FindFirst",
	FindNext  :: (self:wxFileSystemHandler) -> string !foreign method "FindNext",
}

export wxLocalFSHandler :: !foreign struct {
	using wxFileSystemHandler,

	new    :: () -> wxLocalFSHandler !foreign lua "wx.wxLocalFSHandler",
	Chroot :: (root:wxString|string) !foreign lua "wx.wxLocalFSHandler.Chroot",
}

export wxFileSystem :: !foreign struct {
	using wxObject,

	new               :: () -> wxFileSystem !foreign lua "wx.wxFileSystem",
	AddHandler        :: (handler:wxFileSystemHandler) !foreign lua "wx.wxFileSystem.AddHandler",
	RemoveHandler     :: (handler:wxFileSystemHandler) -> wxFileSystemHandler !foreign lua "wx.wxFileSystem.RemoveHandler",
	HasHandlerForPath :: (location:wxString|string) -> bool !foreign lua "wx.wxFileSystem.HasHandlerForPath",
	CleanUpHandlers   :: () !foreign lua "wx.wxFileSystem.CleanUpHandlers",
	URLToFileName     :: (url:wxString|string) -> wxFileName !foreign lua "wx.wxFileSystem.URLToFileName",
	FileNameToURL     :: (filename:wxFileName) -> string !foreign lua "wx.wxFileSystem.FileNameToURL",

	ChangePathTo   :: (self:wxFileSystem, location:wxString|string, is_dir:bool=false) !foreign method "ChangePathTo",
	GetPath        :: (self:wxFileSystem) -> string !foreign method "GetPath",
	OpenFile       :: (self:wxFileSystem, location:wxString|string, flags:int=wxFS_READ) -> wxFSFile !foreign method "OpenFile",
	FindFirst      :: (self:wxFileSystem, spec:wxString|string, flags:int=0) -> string !foreign method "FindFirst",
	FindNext       :: (self:wxFileSystem) -> string !foreign method "FindNext",
	FindFileInPath :: (self:wxFileSystem, path:wxString|string, file:wxString|string) -> bool, string !foreign method "FindFileInPath",
}

export wxArchiveFSHandler :: !foreign struct {
	using wxFileSystemHandler,

	new :: () -> wxArchiveFSHandler !foreign lua "wx.wxArchiveFSHandler",
}

export wxFilterFSHandler :: !foreign struct {
	using wxFileSystemHandler,

	new :: () -> wxFilterFSHandler !foreign lua "wx.wxFilterFSHandler",
}

export wxInternetFSHandler :: !foreign struct {
	using wxFileSystemHandler,

	new :: () -> wxInternetFSHandler !foreign lua "wx.wxInternetFSHandler",
}

export wxDirExists             :: (dirname:wxString|string) -> bool !foreign lua "wx.wxDirExists"
export wxFileExists            :: (filename:wxString|string) -> bool !foreign lua "wx.wxFileExists"
export wxDos2UnixFilename      :: (str:string) -> string !foreign lua "wx.wxDos2UnixFilename"
export wxFileModificationTime  :: (filename:wxString|string) -> wxDateTime !foreign lua "wx.wxFileModificationTime"
export wxFindFirstFile         :: (spec:wxString|string, flags:int=0) -> string !foreign lua "wx.wxFindFirstFile"
export wxFindNextFile          :: () -> string !foreign lua "wx.wxFindNextFile"
export wxGetOSDirectory        :: () -> string !foreign lua "wx.wxGetOSDirectory"
export wxIsAbsolutePath        :: (filename:wxString|string) -> bool !foreign lua "wx.wxIsAbsolutePath"
export wxPathOnly              :: (path:wxString|string) -> string !foreign lua "wx.wxPathOnly"
export wxUnix2DosFilename      :: (str:string) -> string !foreign lua "wx.wxUnix2DosFilename"
export wxConcatFiles           :: (file1:wxString|string, file2:wxString|string, file3:wxString|string) -> bool !foreign lua "wx.wxConcatFiles"
export wxCopyFile              :: (file1:wxString|string, file2:wxString|string, overwrite:bool=true) -> bool !foreign lua "wx.wxCopyFile"
export wxGetCwd                :: () -> string !foreign lua "wx.wxGetCwd"
export wxIsWild                :: (pattern:wxString|string) -> bool !foreign lua "wx.wxIsWild"
export wxMatchWild             :: (pattern:wxString|string, text:wxString|string, dot_special:bool) -> bool !foreign lua "wx.wxMatchWild"
export wxMkdir                 :: (dir:wxString|string, perm:int=0777) -> bool !foreign lua "wx.wxMkdir"
export wxRealPath              :: (path:wxString|string) -> string !foreign lua "wx.wxRealPath"
export wxRemoveFile            :: (file:wxString|string) -> bool !foreign lua "wx.wxRemoveFile"
export wxRenameFile            :: (file1:wxString|string, file2:wxString|string, overwrite:bool=true) -> bool !foreign lua "wx.wxRenameFile"
export wxRmdir                 :: (dir:wxString|string, flags:int=0) -> bool !foreign lua "wx.wxRmdir"
export wxSetWorkingDirectory   :: (dir:wxString|string) -> bool !foreign lua "wx.wxSetWorkingDirectory"
export wxIsWritable            :: (path:wxString|string) -> bool !foreign lua "wx.wxIsWritable"
export wxIsReadable            :: (path:wxString|string) -> bool !foreign lua "wx.wxIsReadable"
export wxIsExecutable          :: (path:wxString|string) -> bool !foreign lua "wx.wxIsExecutable"
export wxFileSize              :: (fileName:wxString|string) -> int--[[long]] !foreign lua "wx.wxFileSize"
export wxEndsWithPathSeparator :: (pszFileName:wxString|string) -> bool !foreign lua "wx.wxEndsWithPathSeparator"
