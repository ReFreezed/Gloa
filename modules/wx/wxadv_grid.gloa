--[[============================================================
--=
--=  wxLua/wxWidget bindings for GlÃ³a
--=  Interface source: wxadv_grid.i
--=
--=  Tested with:
--=  - wxLua 2.8.7.0 / wxWidgets 2.8.8
--=
--=  Note: Most bindings have not been tested yet!
--=
--============================================================]]

!import "wx/wxbase_data"
!import "wx/common"
!import "wx/wxcore_gdi"
!import "wx/wxcore_windows"
!import "wx/wxcore_event"
!import "wx/wxcore_defsutils"

export wxDefaultDateTimeFormat :: "%c"

export WXGRID_DEFAULT_NUMBER_ROWS:      int : !foreign lua "wx.WXGRID_DEFAULT_NUMBER_ROWS"
export WXGRID_DEFAULT_NUMBER_COLS:      int : !foreign lua "wx.WXGRID_DEFAULT_NUMBER_COLS"
export WXGRID_DEFAULT_ROW_HEIGHT:       int : !foreign lua "wx.WXGRID_DEFAULT_ROW_HEIGHT"
export WXGRID_DEFAULT_COL_WIDTH:        int : !foreign lua "wx.WXGRID_DEFAULT_COL_WIDTH"
export WXGRID_DEFAULT_COL_LABEL_HEIGHT: int : !foreign lua "wx.WXGRID_DEFAULT_COL_LABEL_HEIGHT"
export WXGRID_DEFAULT_ROW_LABEL_WIDTH:  int : !foreign lua "wx.WXGRID_DEFAULT_ROW_LABEL_WIDTH"
export WXGRID_LABEL_EDGE_ZONE:          int : !foreign lua "wx.WXGRID_LABEL_EDGE_ZONE"
export WXGRID_MIN_ROW_HEIGHT:           int : !foreign lua "wx.WXGRID_MIN_ROW_HEIGHT"
export WXGRID_MIN_COL_WIDTH:            int : !foreign lua "wx.WXGRID_MIN_COL_WIDTH"
export WXGRID_DEFAULT_SCROLLBAR_WIDTH:  int : !foreign lua "wx.WXGRID_DEFAULT_SCROLLBAR_WIDTH"
export wxGRID_AUTOSIZE:                 int : !foreign lua "wx.wxGRID_AUTOSIZE"
export wxGRID_VALUE_STRING:             string : !foreign lua "wx.wxGRID_VALUE_STRING"
export wxGRID_VALUE_BOOL:               string : !foreign lua "wx.wxGRID_VALUE_BOOL"
export wxGRID_VALUE_NUMBER:             string : !foreign lua "wx.wxGRID_VALUE_NUMBER"
export wxGRID_VALUE_FLOAT:              string : !foreign lua "wx.wxGRID_VALUE_FLOAT"
export wxGRID_VALUE_CHOICE:             string : !foreign lua "wx.wxGRID_VALUE_CHOICE"
export wxGRID_VALUE_TEXT:               string : !foreign lua "wx.wxGRID_VALUE_TEXT"
export wxGRID_VALUE_LONG:               string : !foreign lua "wx.wxGRID_VALUE_LONG"
export wxGRID_VALUE_CHOICEINT:          string : !foreign lua "wx.wxGRID_VALUE_CHOICEINT"
export wxGRID_VALUE_DATETIME:           string : !foreign lua "wx.wxGRID_VALUE_DATETIME"
export wxEVT_GRID_CELL_LEFT_CLICK:      wxEventType : !foreign lua "wx.wxEVT_GRID_CELL_LEFT_CLICK" -- EVT_GRID_CELL_LEFT_CLICK(fn) // FIXME! wxEVT_CMD_GRID_XXX in > 2.6
export wxEVT_GRID_CELL_RIGHT_CLICK:     wxEventType : !foreign lua "wx.wxEVT_GRID_CELL_RIGHT_CLICK" -- EVT_GRID_CELL_RIGHT_CLICK(fn)
export wxEVT_GRID_CELL_LEFT_DCLICK:     wxEventType : !foreign lua "wx.wxEVT_GRID_CELL_LEFT_DCLICK" -- EVT_GRID_CELL_LEFT_DCLICK(fn)
export wxEVT_GRID_CELL_RIGHT_DCLICK:    wxEventType : !foreign lua "wx.wxEVT_GRID_CELL_RIGHT_DCLICK" -- EVT_GRID_CELL_RIGHT_DCLICK(fn)
export wxEVT_GRID_LABEL_LEFT_CLICK:     wxEventType : !foreign lua "wx.wxEVT_GRID_LABEL_LEFT_CLICK" -- EVT_GRID_LABEL_LEFT_CLICK(fn)
export wxEVT_GRID_LABEL_RIGHT_CLICK:    wxEventType : !foreign lua "wx.wxEVT_GRID_LABEL_RIGHT_CLICK" -- EVT_GRID_LABEL_RIGHT_CLICK(fn)
export wxEVT_GRID_LABEL_LEFT_DCLICK:    wxEventType : !foreign lua "wx.wxEVT_GRID_LABEL_LEFT_DCLICK" -- EVT_GRID_LABEL_LEFT_DCLICK(fn)
export wxEVT_GRID_LABEL_RIGHT_DCLICK:   wxEventType : !foreign lua "wx.wxEVT_GRID_LABEL_RIGHT_DCLICK" -- EVT_GRID_LABEL_RIGHT_DCLICK(fn)
export wxEVT_GRID_CELL_CHANGE:          wxEventType : !foreign lua "wx.wxEVT_GRID_CELL_CHANGE" -- EVT_GRID_CELL_CHANGE(fn)
export wxEVT_GRID_SELECT_CELL:          wxEventType : !foreign lua "wx.wxEVT_GRID_SELECT_CELL" -- EVT_GRID_SELECT_CELL(fn)
export wxEVT_GRID_EDITOR_SHOWN:         wxEventType : !foreign lua "wx.wxEVT_GRID_EDITOR_SHOWN" -- EVT_GRID_EDITOR_SHOWN(fn)
export wxEVT_GRID_EDITOR_HIDDEN:        wxEventType : !foreign lua "wx.wxEVT_GRID_EDITOR_HIDDEN" -- EVT_GRID_EDITOR_HIDDEN(fn)
export wxEVT_GRID_CELL_BEGIN_DRAG:      wxEventType : !foreign lua "wx.wxEVT_GRID_CELL_BEGIN_DRAG" -- EVT_GRID_CELL_BEGIN_DRAG(fn)
export wxEVT_GRID_ROW_SIZE:             wxEventType : !foreign lua "wx.wxEVT_GRID_ROW_SIZE" -- EVT_GRID_CMD_ROW_SIZE(id, fn)
export wxEVT_GRID_COL_SIZE:             wxEventType : !foreign lua "wx.wxEVT_GRID_COL_SIZE" -- EVT_GRID_CMD_COL_SIZE(id, fn)
export wxEVT_GRID_RANGE_SELECT:         wxEventType : !foreign lua "wx.wxEVT_GRID_RANGE_SELECT" -- EVT_GRID_CMD_RANGE_SELECT(id, fn)
export wxEVT_GRID_EDITOR_CREATED:       wxEventType : !foreign lua "wx.wxEVT_GRID_EDITOR_CREATED" -- EVT_GRID_EDITOR_CREATED(fn)
export wxGridNoCellCoords:              wxGridCellCoords : !foreign lua "wx.wxGridNoCellCoords"

export wxGridTableRequest :: wxEnum
export wxGRIDTABLE_REQUEST_VIEW_GET_VALUES:  wxGridTableRequest : !foreign lua "wx.wxGRIDTABLE_REQUEST_VIEW_GET_VALUES"
export wxGRIDTABLE_REQUEST_VIEW_SEND_VALUES: wxGridTableRequest : !foreign lua "wx.wxGRIDTABLE_REQUEST_VIEW_SEND_VALUES"
export wxGRIDTABLE_NOTIFY_ROWS_INSERTED:     wxGridTableRequest : !foreign lua "wx.wxGRIDTABLE_NOTIFY_ROWS_INSERTED"
export wxGRIDTABLE_NOTIFY_ROWS_APPENDED:     wxGridTableRequest : !foreign lua "wx.wxGRIDTABLE_NOTIFY_ROWS_APPENDED"
export wxGRIDTABLE_NOTIFY_ROWS_DELETED:      wxGridTableRequest : !foreign lua "wx.wxGRIDTABLE_NOTIFY_ROWS_DELETED"
export wxGRIDTABLE_NOTIFY_COLS_INSERTED:     wxGridTableRequest : !foreign lua "wx.wxGRIDTABLE_NOTIFY_COLS_INSERTED"
export wxGRIDTABLE_NOTIFY_COLS_APPENDED:     wxGridTableRequest : !foreign lua "wx.wxGRIDTABLE_NOTIFY_COLS_APPENDED"
export wxGRIDTABLE_NOTIFY_COLS_DELETED:      wxGridTableRequest : !foreign lua "wx.wxGRIDTABLE_NOTIFY_COLS_DELETED"

export wxGridCellWorker :: !foreign struct {
	using wxClientDataContainer,

	IncRef        :: (self:wxGridCellWorker) !foreign method "IncRef",
	DecRef        :: (self:wxGridCellWorker) !foreign method "DecRef",
	GetRef        :: (self:wxGridCellWorker) -> int !foreign method "GetRef",
	SetParameters :: (self:wxGridCellWorker, params:wxString|string) !foreign method "SetParameters",
}

export wxGridCellRenderer :: !foreign struct {
	using wxGridCellWorker,

	GetBestSize :: (self:wxGridCellRenderer, grid:wxGrid, attr:wxGridCellAttr, dc:wxDC, row:int, col:int) -> wxSize !foreign method "GetBestSize",
}

export wxGridCellStringRenderer :: !foreign struct {
	using wxGridCellRenderer,

	!call :: () -> wxGridCellStringRenderer !foreign lua "wx.wxGridCellStringRenderer",
}

export wxGridCellNumberRenderer :: !foreign struct {
	using wxGridCellStringRenderer,

	!call :: () -> wxGridCellNumberRenderer !foreign lua "wx.wxGridCellNumberRenderer",
}

export wxGridCellFloatRenderer :: !foreign struct {
	using wxGridCellStringRenderer,

	!call :: (width:int=-1, precision:int=-1) -> wxGridCellFloatRenderer !foreign lua "wx.wxGridCellFloatRenderer",

	GetWidth     :: (self:wxGridCellFloatRenderer) -> int !foreign method "GetWidth",
	SetWidth     :: (self:wxGridCellFloatRenderer, width:int) !foreign method "SetWidth",
	GetPrecision :: (self:wxGridCellFloatRenderer) -> int !foreign method "GetPrecision",
	SetPrecision :: (self:wxGridCellFloatRenderer, precision:int) !foreign method "SetPrecision",
}

export wxGridCellBoolRenderer :: !foreign struct {
	using wxGridCellRenderer,

	!call :: () -> wxGridCellBoolRenderer !foreign lua "wx.wxGridCellBoolRenderer",
}

export wxGridCellDateTimeRenderer :: !foreign struct {
	using wxGridCellStringRenderer,

	!call :: (outformat:wxString|string=wxDefaultDateTimeFormat, informat:wxString|string=wxDefaultDateTimeFormat) -> wxGridCellDateTimeRenderer !foreign lua "wx.wxGridCellDateTimeRenderer",
}

export wxGridCellEnumRenderer :: !foreign struct {
	using wxGridCellStringRenderer,

	!call :: (choices:wxString|string="") -> wxGridCellEnumRenderer !foreign lua "wx.wxGridCellEnumRenderer",
}

export wxGridCellAutoWrapStringRenderer :: !foreign struct {
	using wxGridCellStringRenderer,

	!call :: () -> wxGridCellAutoWrapStringRenderer !foreign lua "wx.wxGridCellAutoWrapStringRenderer",
}

export wxGridCellEditor :: !foreign struct {
	using wxGridCellWorker,

	IsCreated       :: (self:wxGridCellEditor) -> bool !foreign method "IsCreated",
	GetControl      :: (self:wxGridCellEditor) -> wxControl !foreign method "GetControl",
	SetControl      :: (self:wxGridCellEditor, control:wxControl) !foreign method "SetControl",
	GetCellAttr     :: (self:wxGridCellEditor) -> wxGridCellAttr !foreign method "GetCellAttr",
	SetCellAttr     :: (self:wxGridCellEditor, attr:wxGridCellAttr) !foreign method "SetCellAttr",
	BeginEdit       :: (self:wxGridCellEditor, row:int, col:int, grid:wxGrid) !foreign method "BeginEdit",
	EndEdit         :: (self:wxGridCellEditor, row:int, col:int, grid:wxGrid) -> bool !foreign method "EndEdit",
	Reset           :: (self:wxGridCellEditor) !foreign method "Reset",
	SetSize         :: (self:wxGridCellEditor, rect:wxRect) !foreign method "SetSize",
	Show            :: (self:wxGridCellEditor, show:bool, attr:wxGridCellAttr=wxGridCellAttr.null) !foreign method "Show",
	PaintBackground :: (self:wxGridCellEditor, rectCell:wxRect, attr:wxGridCellAttr) !foreign method "PaintBackground",
	IsAcceptedKey   :: (self:wxGridCellEditor, event:wxKeyEvent) -> bool !foreign method "IsAcceptedKey",
	StartingKey     :: (self:wxGridCellEditor, event:wxKeyEvent) !foreign method "StartingKey",
	StartingClick   :: (self:wxGridCellEditor) !foreign method "StartingClick",
	HandleReturn    :: (self:wxGridCellEditor, event:wxKeyEvent) !foreign method "HandleReturn",
	Destroy         :: (self:wxGridCellEditor) !foreign method "Destroy",
}

export wxGridCellTextEditor :: !foreign struct {
	using wxGridCellEditor,

	!call :: () -> wxGridCellTextEditor !foreign lua "wx.wxGridCellTextEditor",
}

export wxGridCellNumberEditor :: !foreign struct {
	using wxGridCellTextEditor,

	!call :: (min:int=-1, max:int=-1) -> wxGridCellNumberEditor !foreign lua "wx.wxGridCellNumberEditor",
}

export wxGridCellFloatEditor :: !foreign struct {
	using wxGridCellTextEditor,

	!call :: (width:int=-1, precision:int=-1) -> wxGridCellFloatEditor !foreign lua "wx.wxGridCellFloatEditor",
}

export wxGridCellBoolEditor :: !foreign struct {
	using wxGridCellEditor,

	!call :: () -> wxGridCellBoolEditor !foreign lua "wx.wxGridCellBoolEditor",
}

export wxGridCellChoiceEditor :: !foreign struct {
	using wxGridCellEditor,

	!call :: (choices:wxArrayString|[]string, allowOthers:bool=false) -> wxGridCellChoiceEditor !foreign lua "wx.wxGridCellChoiceEditor",
}

export wxGridCellEnumEditor :: !foreign struct {
	using wxGridCellChoiceEditor,

	!call :: (choices:wxString|string="") -> wxGridCellEnumEditor !foreign lua "wx.wxGridCellEnumEditor",
}

export wxGridCellAutoWrapStringEditor :: !foreign struct {
	using wxGridCellTextEditor,

	!call :: () -> wxGridCellAutoWrapStringEditor !foreign lua "wx.wxGridCellAutoWrapStringEditor",
}

export wxGridCellAttr :: !foreign struct {
	using wxClientDataContainer,

	null: wxGridCellAttr : !foreign lua "wx.NULL",

	wxAttrKind :: wxEnum,
	Any:     wxAttrKind : !foreign lua "wx.wxGridCellAttr.Any",
	Default: wxAttrKind : !foreign lua "wx.wxGridCellAttr.Default",
	Cell:    wxAttrKind : !foreign lua "wx.wxGridCellAttr.Cell",
	Row:     wxAttrKind : !foreign lua "wx.wxGridCellAttr.Row",
	Col:     wxAttrKind : !foreign lua "wx.wxGridCellAttr.Col",
	Merged:  wxAttrKind : !foreign lua "wx.wxGridCellAttr.Merged",

	!call :: () -> wxGridCellAttr !foreign lua "wx.wxGridCellAttr",
	!call :: (colText:wxColour, colBack:wxColour, font:wxFont, hAlign:int, vAlign:int) -> wxGridCellAttr !foreign lua "wx.wxGridCellAttr",

	MergeWith           :: (self:wxGridCellAttr, mergefrom:wxGridCellAttr) !foreign method "MergeWith",
	IncRef              :: (self:wxGridCellAttr) !foreign method "IncRef",
	DecRef              :: (self:wxGridCellAttr) !foreign method "DecRef",
	SetTextColour       :: (self:wxGridCellAttr, colText:wxColour) !foreign method "SetTextColour",
	SetBackgroundColour :: (self:wxGridCellAttr, colBack:wxColour) !foreign method "SetBackgroundColour",
	SetFont             :: (self:wxGridCellAttr, font:wxFont) !foreign method "SetFont",
	SetAlignment        :: (self:wxGridCellAttr, hAlign:int, vAlign:int) !foreign method "SetAlignment",
	SetSize             :: (self:wxGridCellAttr, num_rows:int, num_cols:int) !foreign method "SetSize",
	SetOverflow         :: (self:wxGridCellAttr, allow:bool=true) !foreign method "SetOverflow",
	SetReadOnly         :: (self:wxGridCellAttr, isReadOnly:bool=true) !foreign method "SetReadOnly",
	SetRenderer         :: (self:wxGridCellAttr, renderer:wxGridCellRenderer) !foreign method "SetRenderer",
	SetEditor           :: (self:wxGridCellAttr, editor:wxGridCellEditor) !foreign method "SetEditor",
	SetKind             :: (self:wxGridCellAttr, kind:wxGridCellAttr.wxAttrKind) !foreign method "SetKind",
	HasTextColour       :: (self:wxGridCellAttr) -> bool !foreign method "HasTextColour",
	HasBackgroundColour :: (self:wxGridCellAttr) -> bool !foreign method "HasBackgroundColour",
	HasFont             :: (self:wxGridCellAttr) -> bool !foreign method "HasFont",
	HasAlignment        :: (self:wxGridCellAttr) -> bool !foreign method "HasAlignment",
	HasRenderer         :: (self:wxGridCellAttr) -> bool !foreign method "HasRenderer",
	HasEditor           :: (self:wxGridCellAttr) -> bool !foreign method "HasEditor",
	HasReadWriteMode    :: (self:wxGridCellAttr) -> bool !foreign method "HasReadWriteMode",
	HasOverflowMode     :: (self:wxGridCellAttr) -> bool !foreign method "HasOverflowMode",
	HasSize             :: (self:wxGridCellAttr) -> bool !foreign method "HasSize",
	GetTextColour       :: (self:wxGridCellAttr) -> wxColour !foreign method "GetTextColour",
	GetBackgroundColour :: (self:wxGridCellAttr) -> wxColour !foreign method "GetBackgroundColour",
	GetFont             :: (self:wxGridCellAttr) -> wxFont !foreign method "GetFont",
	GetAlignment        :: (self:wxGridCellAttr) -> (horiz:int, vert:int) !foreign method "GetAlignment",
	GetSize             :: (self:wxGridCellAttr) -> (num_rows:int, num_cols:int) !foreign method "GetSize",
	GetOverflow         :: (self:wxGridCellAttr) -> bool !foreign method "GetOverflow",
	GetRenderer         :: (self:wxGridCellAttr, grid:wxGrid, row:int, col:int) -> wxGridCellRenderer !foreign method "GetRenderer",
	GetEditor           :: (self:wxGridCellAttr, grid:wxGrid, row:int, col:int) -> wxGridCellEditor !foreign method "GetEditor",
	IsReadOnly          :: (self:wxGridCellAttr) -> bool !foreign method "IsReadOnly",
	GetKind             :: (self:wxGridCellAttr) -> wxGridCellAttr.wxAttrKind !foreign method "GetKind",
	SetDefAttr          :: (self:wxGridCellAttr, defAttr:wxGridCellAttr) !foreign method "SetDefAttr",
}

export wxGridCellAttrProvider :: !foreign struct {
	using wxClientDataContainer,

	!call :: () -> wxGridCellAttrProvider !foreign lua "wx.wxGridCellAttrProvider",

	GetAttr        :: (self:wxGridCellAttrProvider, row:int, col:int, kind:wxGridCellAttr.wxAttrKind) -> wxGridCellAttr !foreign method "GetAttr",
	SetAttr        :: (self:wxGridCellAttrProvider, attr:wxGridCellAttr, row:int, col:int) !foreign method "SetAttr",
	SetRowAttr     :: (self:wxGridCellAttrProvider, attr:wxGridCellAttr, row:int) !foreign method "SetRowAttr",
	SetColAttr     :: (self:wxGridCellAttrProvider, attr:wxGridCellAttr, col:int) !foreign method "SetColAttr",
	UpdateAttrRows :: (self:wxGridCellAttrProvider, pos:int--[[size_t]], numRows:int) !foreign method "UpdateAttrRows",
	UpdateAttrCols :: (self:wxGridCellAttrProvider, pos:int--[[size_t]], numCols:int) !foreign method "UpdateAttrCols",
}

export wxGridTableBase :: !foreign struct {
	using wxObject,

	GetNumberRows     :: (self:wxGridTableBase) -> int !foreign method "GetNumberRows",
	GetNumberCols     :: (self:wxGridTableBase) -> int !foreign method "GetNumberCols",
	IsEmptyCell       :: (self:wxGridTableBase, row:int, col:int) -> bool !foreign method "IsEmptyCell",
	GetValue          :: (self:wxGridTableBase, row:int, col:int) -> string !foreign method "GetValue",
	SetValue          :: (self:wxGridTableBase, row:int, col:int, value:wxString|string) !foreign method "SetValue",
	GetTypeName       :: (self:wxGridTableBase, row:int, col:int) -> string !foreign method "GetTypeName",
	CanGetValueAs     :: (self:wxGridTableBase, row:int, col:int, typeName:wxString|string) -> bool !foreign method "CanGetValueAs",
	CanSetValueAs     :: (self:wxGridTableBase, row:int, col:int, typeName:wxString|string) -> bool !foreign method "CanSetValueAs",
	GetValueAsBool    :: (self:wxGridTableBase, row:int, col:int) -> bool !foreign method "GetValueAsBool",
	GetValueAsLong    :: (self:wxGridTableBase, row:int, col:int) -> int--[[long]] !foreign method "GetValueAsLong",
	GetValueAsDouble  :: (self:wxGridTableBase, row:int, col:int) -> float--[[double]] !foreign method "GetValueAsDouble",
	SetValueAsBool    :: (self:wxGridTableBase, row:int, col:int, value:bool) !foreign method "SetValueAsBool",
	SetValueAsLong    :: (self:wxGridTableBase, row:int, col:int, value:int--[[long]]) !foreign method "SetValueAsLong",
	SetValueAsDouble  :: (self:wxGridTableBase, row:int, col:int, value:float--[[double]]) !foreign method "SetValueAsDouble",
	SetView           :: (self:wxGridTableBase, grid:wxGrid) !foreign method "SetView",
	GetView           :: (self:wxGridTableBase) -> wxGrid !foreign method "GetView",
	Clear             :: (self:wxGridTableBase) !foreign method "Clear",
	InsertRows        :: (self:wxGridTableBase, pos:int--[[size_t]]=0, numRows:int--[[size_t]]=1) -> bool !foreign method "InsertRows",
	AppendRows        :: (self:wxGridTableBase, numRows:int--[[size_t]]=1) -> bool !foreign method "AppendRows",
	DeleteRows        :: (self:wxGridTableBase, pos:int--[[size_t]]=0, numRows:int--[[size_t]]=1) -> bool !foreign method "DeleteRows",
	InsertCols        :: (self:wxGridTableBase, pos:int--[[size_t]]=0, numCols:int--[[size_t]]=1) -> bool !foreign method "InsertCols",
	AppendCols        :: (self:wxGridTableBase, numCols:int--[[size_t]]=1) -> bool !foreign method "AppendCols",
	DeleteCols        :: (self:wxGridTableBase, pos:int--[[size_t]]=0, numCols:int--[[size_t]]=1) -> bool !foreign method "DeleteCols",
	GetRowLabelValue  :: (self:wxGridTableBase, row:int) -> string !foreign method "GetRowLabelValue",
	GetColLabelValue  :: (self:wxGridTableBase, col:int) -> string !foreign method "GetColLabelValue",
	SetRowLabelValue  :: (self:wxGridTableBase, row:int, value:wxString|string) !foreign method "SetRowLabelValue",
	SetColLabelValue  :: (self:wxGridTableBase, col:int, value:wxString|string) !foreign method "SetColLabelValue",
	SetAttrProvider   :: (self:wxGridTableBase, attrProvider:wxGridCellAttrProvider) !foreign method "SetAttrProvider",
	GetAttrProvider   :: (self:wxGridTableBase) -> wxGridCellAttrProvider !foreign method "GetAttrProvider",
	CanHaveAttributes :: (self:wxGridTableBase) -> bool !foreign method "CanHaveAttributes",
	GetAttr           :: (self:wxGridTableBase, row:int, col:int, kind:wxGridCellAttr.wxAttrKind) -> wxGridCellAttr !foreign method "GetAttr",
	SetAttr           :: (self:wxGridTableBase, attr:wxGridCellAttr, row:int, col:int) !foreign method "SetAttr",
	SetRowAttr        :: (self:wxGridTableBase, attr:wxGridCellAttr, row:int) !foreign method "SetRowAttr",
	SetColAttr        :: (self:wxGridTableBase, attr:wxGridCellAttr, col:int) !foreign method "SetColAttr",
}

export wxLuaGridTableBase :: !foreign struct {
	using wxGridTableBase,

	!call :: () -> wxLuaGridTableBase !foreign lua "wx.wxLuaGridTableBase",
}

export wxGridStringTable :: !foreign struct {
	using wxGridTableBase,

	!call :: (numRows:int=0, numCols:int=0) -> wxGridStringTable !foreign lua "wx.wxGridStringTable",
}

export wxGridTableMessage :: !foreign struct {
	using wxLuaUserdata,

	!call :: (\table:wxGridTableBase, id:int, comInt1:int=-1, comInt2:int=-1) -> wxGridTableMessage !foreign lua "wx.wxGridTableMessage",

	SetTableObject :: (self:wxGridTableMessage, \table:wxGridTableBase) !foreign method "SetTableObject",
	GetTableObject :: (self:wxGridTableMessage) -> wxGridTableBase !foreign method "GetTableObject",
	SetId          :: (self:wxGridTableMessage, id:int) !foreign method "SetId",
	GetId          :: (self:wxGridTableMessage) -> int !foreign method "GetId",
	SetCommandInt  :: (self:wxGridTableMessage, comInt1:int) !foreign method "SetCommandInt",
	GetCommandInt  :: (self:wxGridTableMessage) -> int !foreign method "GetCommandInt",
	SetCommandInt2 :: (self:wxGridTableMessage, comInt2:int) !foreign method "SetCommandInt2",
	GetCommandInt2 :: (self:wxGridTableMessage) -> int !foreign method "GetCommandInt2",
}

export wxGridCellCoords :: !foreign struct {
	using wxLuaUserdata,

	!call :: (r:int=-1, c:int=-1) -> wxGridCellCoords !foreign lua "wx.wxGridCellCoords",

	GetRow :: (self:wxGridCellCoords) -> int !foreign method "GetRow",
	SetRow :: (self:wxGridCellCoords, n:int) !foreign method "SetRow",
	GetCol :: (self:wxGridCellCoords) -> int !foreign method "GetCol",
	SetCol :: (self:wxGridCellCoords, n:int) !foreign method "SetCol",
	Set    :: (self:wxGridCellCoords, row:int, col:int) !foreign method "Set",
}

export wxGridCellCoordsArray :: !foreign struct {
	using wxLuaUserdata,

	!call :: () -> wxGridCellCoordsArray !foreign lua "wx.wxGridCellCoordsArray",
	!call :: (array:wxGridCellCoordsArray) -> wxGridCellCoordsArray !foreign lua "wx.wxGridCellCoordsArray",

	Add      :: (self:wxGridCellCoordsArray, c:wxGridCellCoords) !foreign method "Add",
	Alloc    :: (self:wxGridCellCoordsArray, count:int--[[size_t]]) !foreign method "Alloc",
	Clear    :: (self:wxGridCellCoordsArray) !foreign method "Clear",
	GetCount :: (self:wxGridCellCoordsArray) -> int !foreign method "GetCount",
	IsEmpty  :: (self:wxGridCellCoordsArray) -> bool !foreign method "IsEmpty",
	Insert   :: (self:wxGridCellCoordsArray, c:wxGridCellCoords, n:int, copies:int=1) !foreign method "Insert",
	Item     :: (self:wxGridCellCoordsArray, n:int) -> wxGridCellCoords !foreign method "Item",
	RemoveAt :: (self:wxGridCellCoordsArray, index:int--[[size_t]]) !foreign method "RemoveAt",
	Shrink   :: (self:wxGridCellCoordsArray) !foreign method "Shrink",
}

export wxGrid :: !foreign struct {
	using wxScrolledWindow,

	wxGridSelectionModes :: wxEnum,
	wxGridSelectCells:   wxGridSelectionModes : !foreign lua "wx.wxGrid.wxGridSelectCells",
	wxGridSelectRows:    wxGridSelectionModes : !foreign lua "wx.wxGrid.wxGridSelectRows",
	wxGridSelectColumns: wxGridSelectionModes : !foreign lua "wx.wxGrid.wxGridSelectColumns",

	!call :: (parent:wxWindow, id:wxWindowID, pos:wxPoint=wxDefaultPosition, size:wxSize=wxDefaultSize, style:int--[[long]]=wxWANTS_CHARS, name:wxString|string="wxGrid") -> wxGrid !foreign lua "wx.wxGrid",

	CreateGrid                     :: (self:wxGrid, numRows:int, numCols:int, selmode:wxGrid.wxGridSelectionModes=wxGrid.wxGridSelectCells) -> bool !foreign method "CreateGrid",
	SetSelectionMode               :: (self:wxGrid, selmode:wxGrid.wxGridSelectionModes) !foreign method "SetSelectionMode",
	GetSelectionMode               :: (self:wxGrid) -> wxGrid.wxGridSelectionModes !foreign method "GetSelectionMode",
	GetNumberRows                  :: (self:wxGrid) -> int !foreign method "GetNumberRows",
	GetNumberCols                  :: (self:wxGrid) -> int !foreign method "GetNumberCols",
	ProcessTableMessage            :: (self:wxGrid, msg:wxGridTableMessage) -> bool !foreign method "ProcessTableMessage",
	GetTable                       :: (self:wxGrid) -> wxGridTableBase !foreign method "GetTable",
	SetTable                       :: (self:wxGrid, \table:wxGridTableBase, takeOwnership:bool=false, selmode:wxGrid.wxGridSelectionModes=wxGrid.wxGridSelectCells) -> bool !foreign method "SetTable",
	ClearGrid                      :: (self:wxGrid) !foreign method "ClearGrid",
	InsertRows                     :: (self:wxGrid, pos:int=0, numRows:int=1, updateLabels:bool=true) -> bool !foreign method "InsertRows",
	AppendRows                     :: (self:wxGrid, numRows:int=1, updateLabels:bool=true) -> bool !foreign method "AppendRows",
	DeleteRows                     :: (self:wxGrid, pos:int=0, numRows:int=1, updateLabels:bool=true) -> bool !foreign method "DeleteRows",
	InsertCols                     :: (self:wxGrid, pos:int=0, numCols:int=1, updateLabels:bool=true) -> bool !foreign method "InsertCols",
	AppendCols                     :: (self:wxGrid, numCols:int=1, updateLabels:bool=true) -> bool !foreign method "AppendCols",
	DeleteCols                     :: (self:wxGrid, pos:int=0, numCols:int=1, updateLabels:bool=true) -> bool !foreign method "DeleteCols",
	DrawTextRectangle              :: (self:wxGrid, dc:wxDC, text:wxString|string, rect:wxRect, horizontalAlignment:int=wxALIGN_LEFT, verticalAlignment:int=wxALIGN_TOP, textOrientation:int=wxHORIZONTAL) !foreign method "DrawTextRectangle",
	StringToLines                  :: (self:wxGrid, value:wxString|string, lines:wxArrayString|[]string) !foreign method "StringToLines",
	GetTextBoxSize                 :: (self:wxGrid, dc:wxDC, lines:wxArrayString|[]string) -> (width:int--[[long]], height:int--[[long]]) !foreign method "GetTextBoxSize",
	BeginBatch                     :: (self:wxGrid) !foreign method "BeginBatch",
	EndBatch                       :: (self:wxGrid) !foreign method "EndBatch",
	GetBatchCount                  :: (self:wxGrid) -> int !foreign method "GetBatchCount",
	ForceRefresh                   :: (self:wxGrid) !foreign method "ForceRefresh",
	IsEditable                     :: (self:wxGrid) -> bool !foreign method "IsEditable",
	EnableEditing                  :: (self:wxGrid, edit:bool) !foreign method "EnableEditing",
	EnableCellEditControl          :: (self:wxGrid, enable:bool=true) !foreign method "EnableCellEditControl",
	DisableCellEditControl         :: (self:wxGrid) !foreign method "DisableCellEditControl",
	CanEnableCellControl           :: (self:wxGrid) -> bool !foreign method "CanEnableCellControl",
	IsCellEditControlEnabled       :: (self:wxGrid) -> bool !foreign method "IsCellEditControlEnabled",
	IsCellEditControlShown         :: (self:wxGrid) -> bool !foreign method "IsCellEditControlShown",
	IsCurrentCellReadOnly          :: (self:wxGrid) -> bool !foreign method "IsCurrentCellReadOnly",
	ShowCellEditControl            :: (self:wxGrid) !foreign method "ShowCellEditControl",
	HideCellEditControl            :: (self:wxGrid) !foreign method "HideCellEditControl",
	SaveEditControlValue           :: (self:wxGrid) !foreign method "SaveEditControlValue",
	XYToCell                       :: (self:wxGrid, x,y:int, coords:wxGridCellCoords) !foreign method "XYToCell",
	XToCol                         :: (self:wxGrid, x:int) -> int !foreign method "XToCol",
	YToRow                         :: (self:wxGrid, y:int) -> int !foreign method "YToRow",
	XToEdgeOfCol                   :: (self:wxGrid, x:int) -> int !foreign method "XToEdgeOfCol",
	YToEdgeOfRow                   :: (self:wxGrid, y:int) -> int !foreign method "YToEdgeOfRow",
	CellToRect                     :: (self:wxGrid, row:int, col:int) -> wxRect !foreign method "CellToRect",
	GetGridCursorRow               :: (self:wxGrid) -> int !foreign method "GetGridCursorRow",
	GetGridCursorCol               :: (self:wxGrid) -> int !foreign method "GetGridCursorCol",
	IsVisible                      :: (self:wxGrid, row:int, col:int, wholeCellVisible:bool=true) -> bool !foreign method "IsVisible",
	MakeCellVisible                :: (self:wxGrid, row:int, col:int) !foreign method "MakeCellVisible",
	SetGridCursor                  :: (self:wxGrid, row:int, col:int) !foreign method "SetGridCursor",
	MoveCursorUp                   :: (self:wxGrid, expandSelection:bool) -> bool !foreign method "MoveCursorUp",
	MoveCursorDown                 :: (self:wxGrid, expandSelection:bool) -> bool !foreign method "MoveCursorDown",
	MoveCursorLeft                 :: (self:wxGrid, expandSelection:bool) -> bool !foreign method "MoveCursorLeft",
	MoveCursorRight                :: (self:wxGrid, expandSelection:bool) -> bool !foreign method "MoveCursorRight",
	MovePageDown                   :: (self:wxGrid) -> bool !foreign method "MovePageDown",
	MovePageUp                     :: (self:wxGrid) -> bool !foreign method "MovePageUp",
	MoveCursorUpBlock              :: (self:wxGrid, expandSelection:bool) -> bool !foreign method "MoveCursorUpBlock",
	MoveCursorDownBlock            :: (self:wxGrid, expandSelection:bool) -> bool !foreign method "MoveCursorDownBlock",
	MoveCursorLeftBlock            :: (self:wxGrid, expandSelection:bool) -> bool !foreign method "MoveCursorLeftBlock",
	MoveCursorRightBlock           :: (self:wxGrid, expandSelection:bool) -> bool !foreign method "MoveCursorRightBlock",
	GetDefaultRowLabelSize         :: (self:wxGrid) -> int !foreign method "GetDefaultRowLabelSize",
	GetRowLabelSize                :: (self:wxGrid) -> int !foreign method "GetRowLabelSize",
	GetDefaultColLabelSize         :: (self:wxGrid) -> int !foreign method "GetDefaultColLabelSize",
	GetColLabelSize                :: (self:wxGrid) -> int !foreign method "GetColLabelSize",
	GetLabelBackgroundColour       :: (self:wxGrid) -> wxColour !foreign method "GetLabelBackgroundColour",
	GetLabelTextColour             :: (self:wxGrid) -> wxColour !foreign method "GetLabelTextColour",
	GetLabelFont                   :: (self:wxGrid) -> wxFont !foreign method "GetLabelFont",
	GetRowLabelAlignment           :: (self:wxGrid) -> (horiz:int, vert:int) !foreign method "GetRowLabelAlignment",
	GetColLabelAlignment           :: (self:wxGrid) -> (horiz:int, vert:int) !foreign method "GetColLabelAlignment",
	GetColLabelTextOrientation     :: (self:wxGrid) -> int !foreign method "GetColLabelTextOrientation",
	GetRowLabelValue               :: (self:wxGrid, row:int) -> string !foreign method "GetRowLabelValue",
	GetColLabelValue               :: (self:wxGrid, col:int) -> string !foreign method "GetColLabelValue",
	GetGridLineColour              :: (self:wxGrid) -> wxColour !foreign method "GetGridLineColour",
	GetCellHighlightColour         :: (self:wxGrid) -> wxColour !foreign method "GetCellHighlightColour",
	GetCellHighlightPenWidth       :: (self:wxGrid) -> int !foreign method "GetCellHighlightPenWidth",
	GetCellHighlightROPenWidth     :: (self:wxGrid) -> int !foreign method "GetCellHighlightROPenWidth",
	SetRowLabelSize                :: (self:wxGrid, width:int) !foreign method "SetRowLabelSize",
	SetColLabelSize                :: (self:wxGrid, height:int) !foreign method "SetColLabelSize",
	SetLabelBackgroundColour       :: (self:wxGrid, backColour:wxColour) !foreign method "SetLabelBackgroundColour",
	SetLabelTextColour             :: (self:wxGrid, textColour:wxColour) !foreign method "SetLabelTextColour",
	SetLabelFont                   :: (self:wxGrid, labelFont:wxFont) !foreign method "SetLabelFont",
	SetRowLabelAlignment           :: (self:wxGrid, horiz:int, vert:int) !foreign method "SetRowLabelAlignment",
	SetColLabelAlignment           :: (self:wxGrid, horiz:int, vert:int) !foreign method "SetColLabelAlignment",
	SetRowLabelValue               :: (self:wxGrid, row:int, value:wxString|string) !foreign method "SetRowLabelValue",
	SetColLabelValue               :: (self:wxGrid, col:int, value:wxString|string) !foreign method "SetColLabelValue",
	SetGridLineColour              :: (self:wxGrid, lineColour:wxColour) !foreign method "SetGridLineColour",
	SetCellHighlightColour         :: (self:wxGrid, highlightColour:wxColour) !foreign method "SetCellHighlightColour",
	SetCellHighlightPenWidth       :: (self:wxGrid, width:int) !foreign method "SetCellHighlightPenWidth",
	SetCellHighlightROPenWidth     :: (self:wxGrid, width:int) !foreign method "SetCellHighlightROPenWidth",
	EnableDragRowSize              :: (self:wxGrid, enable:bool=true) !foreign method "EnableDragRowSize",
	DisableDragRowSize             :: (self:wxGrid) !foreign method "DisableDragRowSize",
	CanDragRowSize                 :: (self:wxGrid) -> bool !foreign method "CanDragRowSize",
	EnableDragColSize              :: (self:wxGrid, enable:bool=true) !foreign method "EnableDragColSize",
	DisableDragColSize             :: (self:wxGrid) !foreign method "DisableDragColSize",
	CanDragColSize                 :: (self:wxGrid) -> bool !foreign method "CanDragColSize",
	EnableDragGridSize             :: (self:wxGrid, enable:bool=true) !foreign method "EnableDragGridSize",
	DisableDragGridSize            :: (self:wxGrid) !foreign method "DisableDragGridSize",
	CanDragGridSize                :: (self:wxGrid) -> bool !foreign method "CanDragGridSize",
	EnableDragCell                 :: (self:wxGrid, enable:bool=true) !foreign method "EnableDragCell",
	DisableDragCell                :: (self:wxGrid) !foreign method "DisableDragCell",
	CanDragCell                    :: (self:wxGrid) -> bool !foreign method "CanDragCell",
	SetAttr                        :: (self:wxGrid, row:int, col:int, attr:wxGridCellAttr) !foreign method "SetAttr",
	SetRowAttr                     :: (self:wxGrid, row:int, attr:wxGridCellAttr) !foreign method "SetRowAttr",
	SetColAttr                     :: (self:wxGrid, col:int, attr:wxGridCellAttr) !foreign method "SetColAttr",
	GetOrCreateCellAttr            :: (self:wxGrid, row:int, col:int) -> wxGridCellAttr !foreign method "GetOrCreateCellAttr",
	SetColFormatBool               :: (self:wxGrid, col:int) !foreign method "SetColFormatBool",
	SetColFormatNumber             :: (self:wxGrid, col:int) !foreign method "SetColFormatNumber",
	SetColFormatFloat              :: (self:wxGrid, col:int, width:int=-1, precision:int=-1) !foreign method "SetColFormatFloat",
	SetColFormatCustom             :: (self:wxGrid, col:int, typeName:wxString|string) !foreign method "SetColFormatCustom",
	EnableGridLines                :: (self:wxGrid, enable:bool=true) !foreign method "EnableGridLines",
	GridLinesEnabled               :: (self:wxGrid) -> bool !foreign method "GridLinesEnabled",
	GetDefaultRowSize              :: (self:wxGrid) -> int !foreign method "GetDefaultRowSize",
	GetRowSize                     :: (self:wxGrid, row:int) -> int !foreign method "GetRowSize",
	GetDefaultColSize              :: (self:wxGrid) -> int !foreign method "GetDefaultColSize",
	GetColSize                     :: (self:wxGrid, col:int) -> int !foreign method "GetColSize",
	GetDefaultCellBackgroundColour :: (self:wxGrid) -> wxColour !foreign method "GetDefaultCellBackgroundColour",
	GetCellBackgroundColour        :: (self:wxGrid, row:int, col:int) -> wxColour !foreign method "GetCellBackgroundColour",
	GetDefaultCellTextColour       :: (self:wxGrid) -> wxColour !foreign method "GetDefaultCellTextColour",
	GetCellTextColour              :: (self:wxGrid, row:int, col:int) -> wxColour !foreign method "GetCellTextColour",
	GetDefaultCellFont             :: (self:wxGrid) -> wxFont !foreign method "GetDefaultCellFont",
	GetCellFont                    :: (self:wxGrid, row:int, col:int) -> wxFont !foreign method "GetCellFont",
	GetDefaultCellAlignment        :: (self:wxGrid, horiz:int, vert:int) !foreign method "GetDefaultCellAlignment",
	GetCellAlignment               :: (self:wxGrid, row:int, col:int) -> (horiz:int, vert:int) !foreign method "GetCellAlignment",
	GetDefaultCellOverflow         :: (self:wxGrid) -> bool !foreign method "GetDefaultCellOverflow",
	GetCellOverflow                :: (self:wxGrid, row:int, col:int) -> bool !foreign method "GetCellOverflow",
	GetCellSize                    :: (self:wxGrid, row:int, col:int) -> (num_rows:int, num_cols:int) !foreign method "GetCellSize",
	SetDefaultRowSize              :: (self:wxGrid, height:int, resizeExistingRows:bool=false) !foreign method "SetDefaultRowSize",
	SetRowSize                     :: (self:wxGrid, row:int, height:int) !foreign method "SetRowSize",
	SetDefaultColSize              :: (self:wxGrid, width:int, resizeExistingCols:bool=false) !foreign method "SetDefaultColSize",
	SetColSize                     :: (self:wxGrid, col:int, width:int) !foreign method "SetColSize",
	AutoSize                       :: (self:wxGrid) !foreign method "AutoSize",
	AutoSizeRow                    :: (self:wxGrid, row:int, setAsMin:bool=true) !foreign method "AutoSizeRow",
	AutoSizeColumn                 :: (self:wxGrid, col:int, setAsMin:bool=true) !foreign method "AutoSizeColumn",
	AutoSizeRows                   :: (self:wxGrid, setAsMin:bool=true) !foreign method "AutoSizeRows",
	AutoSizeColumns                :: (self:wxGrid, setAsMin:bool=true) !foreign method "AutoSizeColumns",
	AutoSizeRowLabelSize           :: (self:wxGrid, row:int) !foreign method "AutoSizeRowLabelSize",
	AutoSizeColLabelSize           :: (self:wxGrid, col:int) !foreign method "AutoSizeColLabelSize",
	SetColMinimalWidth             :: (self:wxGrid, col:int, width:int) !foreign method "SetColMinimalWidth",
	SetRowMinimalHeight            :: (self:wxGrid, row:int, width:int) !foreign method "SetRowMinimalHeight",
	SetColMinimalAcceptableWidth   :: (self:wxGrid, width:int) !foreign method "SetColMinimalAcceptableWidth",
	SetRowMinimalAcceptableHeight  :: (self:wxGrid, width:int) !foreign method "SetRowMinimalAcceptableHeight",
	GetColMinimalAcceptableWidth   :: (self:wxGrid) -> int !foreign method "GetColMinimalAcceptableWidth",
	GetRowMinimalAcceptableHeight  :: (self:wxGrid) -> int !foreign method "GetRowMinimalAcceptableHeight",
	SetDefaultCellBackgroundColour :: (self:wxGrid, backColour:wxColour) !foreign method "SetDefaultCellBackgroundColour",
	SetCellBackgroundColour        :: (self:wxGrid, row:int, col:int, backColour:wxColour) !foreign method "SetCellBackgroundColour",
	SetDefaultCellTextColour       :: (self:wxGrid, textColour:wxColour) !foreign method "SetDefaultCellTextColour",
	SetCellTextColour              :: (self:wxGrid, row:int, col:int, textColour:wxColour) !foreign method "SetCellTextColour",
	SetDefaultCellFont             :: (self:wxGrid, cellFont:wxFont) !foreign method "SetDefaultCellFont",
	SetCellFont                    :: (self:wxGrid, row:int, col:int, cellFont:wxFont) !foreign method "SetCellFont",
	SetDefaultCellAlignment        :: (self:wxGrid, horiz:int, vert:int) !foreign method "SetDefaultCellAlignment",
	SetCellAlignment               :: (self:wxGrid, row:int, col:int, horiz:int, vert:int) !foreign method "SetCellAlignment",
	SetDefaultCellOverflow         :: (self:wxGrid, allow:bool) !foreign method "SetDefaultCellOverflow",
	SetCellOverflow                :: (self:wxGrid, row:int, col:int, allow:bool) !foreign method "SetCellOverflow",
	SetCellSize                    :: (self:wxGrid, row:int, col:int, num_rows:int, num_cols:int) !foreign method "SetCellSize",
	SetDefaultRenderer             :: (self:wxGrid, renderer:wxGridCellRenderer) !foreign method "SetDefaultRenderer",
	SetCellRenderer                :: (self:wxGrid, row:int, col:int, renderer:wxGridCellRenderer) !foreign method "SetCellRenderer",
	GetDefaultRenderer             :: (self:wxGrid) -> wxGridCellRenderer !foreign method "GetDefaultRenderer",
	GetCellRenderer                :: (self:wxGrid, row:int, col:int) -> wxGridCellRenderer !foreign method "GetCellRenderer",
	SetDefaultEditor               :: (self:wxGrid, editor:wxGridCellEditor) !foreign method "SetDefaultEditor",
	SetCellEditor                  :: (self:wxGrid, row:int, col:int, editor:wxGridCellEditor) !foreign method "SetCellEditor",
	GetDefaultEditor               :: (self:wxGrid) -> wxGridCellEditor !foreign method "GetDefaultEditor",
	GetCellEditor                  :: (self:wxGrid, row:int, col:int) -> wxGridCellEditor !foreign method "GetCellEditor",
	GetCellValue                   :: (self:wxGrid, row:int, col:int) -> string !foreign method "GetCellValue",
	SetCellValue                   :: (self:wxGrid, row:int, col:int, s:wxString|string) !foreign method "SetCellValue",
	IsReadOnly                     :: (self:wxGrid, row:int, col:int) -> bool !foreign method "IsReadOnly",
	SetReadOnly                    :: (self:wxGrid, row:int, col:int, isReadOnly:bool=true) !foreign method "SetReadOnly",
	SelectRow                      :: (self:wxGrid, row:int, addToSelected:bool=false) !foreign method "SelectRow",
	SelectCol                      :: (self:wxGrid, col:int, addToSelected:bool=false) !foreign method "SelectCol",
	SelectBlock                    :: (self:wxGrid, topRow:int, leftCol:int, bottomRow:int, rightCol:int, addToSelected:bool=false) !foreign method "SelectBlock",
	SelectAll                      :: (self:wxGrid) !foreign method "SelectAll",
	IsSelection                    :: (self:wxGrid) -> bool !foreign method "IsSelection",
	DeselectRow                    :: (self:wxGrid, row:int) !foreign method "DeselectRow",
	DeselectCol                    :: (self:wxGrid, col:int) !foreign method "DeselectCol",
	DeselectCell                   :: (self:wxGrid, row:int, col:int) !foreign method "DeselectCell",
	ClearSelection                 :: (self:wxGrid) !foreign method "ClearSelection",
	IsInSelection                  :: (self:wxGrid, row:int, col:int) -> bool !foreign method "IsInSelection",
	GetSelectedCells               :: (self:wxGrid) -> wxGridCellCoordsArray !foreign method "GetSelectedCells",
	GetSelectionBlockTopLeft       :: (self:wxGrid) -> wxGridCellCoordsArray !foreign method "GetSelectionBlockTopLeft",
	GetSelectionBlockBottomRight   :: (self:wxGrid) -> wxGridCellCoordsArray !foreign method "GetSelectionBlockBottomRight",
	GetSelectedRows                :: (self:wxGrid) -> wxArrayInt !foreign method "GetSelectedRows",
	GetSelectedCols                :: (self:wxGrid) -> wxArrayInt !foreign method "GetSelectedCols",
	BlockToDeviceRect              :: (self:wxGrid, topLeft:wxGridCellCoords, bottomRight:wxGridCellCoords) -> wxRect !foreign method "BlockToDeviceRect",
	GetSelectionBackground         :: (self:wxGrid) -> wxColour !foreign method "GetSelectionBackground",
	GetSelectionForeground         :: (self:wxGrid) -> wxColour !foreign method "GetSelectionForeground",
	SetSelectionBackground         :: (self:wxGrid, c:wxColour) !foreign method "SetSelectionBackground",
	SetSelectionForeground         :: (self:wxGrid, c:wxColour) !foreign method "SetSelectionForeground",
	RegisterDataType               :: (self:wxGrid, typeName:wxString|string, renderer:wxGridCellRenderer, editor:wxGridCellEditor) !foreign method "RegisterDataType",
	GetDefaultEditorForCell        :: (self:wxGrid, row:int, col:int) -> wxGridCellEditor !foreign method "GetDefaultEditorForCell",
	GetDefaultRendererForCell      :: (self:wxGrid, row:int, col:int) -> wxGridCellRenderer !foreign method "GetDefaultRendererForCell",
	GetDefaultEditorForType        :: (self:wxGrid, typeName:wxString|string) -> wxGridCellEditor !foreign method "GetDefaultEditorForType",
	GetDefaultRendererForType      :: (self:wxGrid, typeName:wxString|string) -> wxGridCellRenderer !foreign method "GetDefaultRendererForType",
	SetMargins                     :: (self:wxGrid, extraWidth:int, extraHeight:int) !foreign method "SetMargins",
	GetGridWindow                  :: (self:wxGrid) -> wxWindow !foreign method "GetGridWindow",
	GetGridRowLabelWindow          :: (self:wxGrid) -> wxWindow !foreign method "GetGridRowLabelWindow",
	GetGridColLabelWindow          :: (self:wxGrid) -> wxWindow !foreign method "GetGridColLabelWindow",
	GetGridCornerLabelWindow       :: (self:wxGrid) -> wxWindow !foreign method "GetGridCornerLabelWindow",
}

export wxGridEvent :: !foreign struct {
	using wxNotifyEvent,

	!call :: (id:int, \type:wxEventType, obj:wxObject, row:int=-1, col:int=-1, x,y:int=-1, sel:bool=true, control:bool=false, shift:bool=false, alt:bool=false, meta:bool=false) -> wxGridEvent !foreign lua "wx.wxGridEvent",

	GetRow      :: (self:wxGridEvent) -> int !foreign method "GetRow",
	GetCol      :: (self:wxGridEvent) -> int !foreign method "GetCol",
	GetPosition :: (self:wxGridEvent) -> wxPoint !foreign method "GetPosition",
	Selecting   :: (self:wxGridEvent) -> bool !foreign method "Selecting",
	ControlDown :: (self:wxGridEvent) -> bool !foreign method "ControlDown",
	MetaDown    :: (self:wxGridEvent) -> bool !foreign method "MetaDown",
	ShiftDown   :: (self:wxGridEvent) -> bool !foreign method "ShiftDown",
	AltDown     :: (self:wxGridEvent) -> bool !foreign method "AltDown",
}

export wxGridSizeEvent :: !foreign struct {
	using wxNotifyEvent,

	!call :: (id:int, \type:wxEventType, obj:wxObject, rowOrCol:int=-1, x,y:int=-1, control:bool=false, shift:bool=false, alt:bool=false, meta:bool=false) -> wxGridSizeEvent !foreign lua "wx.wxGridSizeEvent",

	GetRowOrCol :: (self:wxGridSizeEvent) -> int !foreign method "GetRowOrCol",
	GetPosition :: (self:wxGridSizeEvent) -> wxPoint !foreign method "GetPosition",
	ShiftDown   :: (self:wxGridSizeEvent) -> bool !foreign method "ShiftDown",
	ControlDown :: (self:wxGridSizeEvent) -> bool !foreign method "ControlDown",
	AltDown     :: (self:wxGridSizeEvent) -> bool !foreign method "AltDown",
	MetaDown    :: (self:wxGridSizeEvent) -> bool !foreign method "MetaDown",
}

export wxGridRangeSelectEvent :: !foreign struct {
	using wxNotifyEvent,

	!call :: (id:int, \type:wxEventType, obj:wxObject, topLeft:wxGridCellCoords, bottomRight:wxGridCellCoords, sel:bool=true, control:bool=false, shift:bool=false, alt:bool=false, meta:bool=false) -> wxGridRangeSelectEvent !foreign lua "wx.wxGridRangeSelectEvent",

	GetTopLeftCoords     :: (self:wxGridRangeSelectEvent) -> wxGridCellCoords !foreign method "GetTopLeftCoords",
	GetBottomRightCoords :: (self:wxGridRangeSelectEvent) -> wxGridCellCoords !foreign method "GetBottomRightCoords",
	GetTopRow            :: (self:wxGridRangeSelectEvent) -> int !foreign method "GetTopRow",
	GetBottomRow         :: (self:wxGridRangeSelectEvent) -> int !foreign method "GetBottomRow",
	GetLeftCol           :: (self:wxGridRangeSelectEvent) -> int !foreign method "GetLeftCol",
	GetRightCol          :: (self:wxGridRangeSelectEvent) -> int !foreign method "GetRightCol",
	Selecting            :: (self:wxGridRangeSelectEvent) -> bool !foreign method "Selecting",
	ControlDown          :: (self:wxGridRangeSelectEvent) -> bool !foreign method "ControlDown",
	ShiftDown            :: (self:wxGridRangeSelectEvent) -> bool !foreign method "ShiftDown",
	MetaDown             :: (self:wxGridRangeSelectEvent) -> bool !foreign method "MetaDown",
	AltDown              :: (self:wxGridRangeSelectEvent) -> bool !foreign method "AltDown",
}

export wxGridEditorCreatedEvent :: !foreign struct {
	using wxCommandEvent,

	!call :: (id:int, \type:wxEventType, obj:wxObject, row:int, col:int, ctrl:wxControl) -> wxGridEditorCreatedEvent !foreign lua "wx.wxGridEditorCreatedEvent",

	GetRow     :: (self:wxGridEditorCreatedEvent) -> int !foreign method "GetRow",
	GetCol     :: (self:wxGridEditorCreatedEvent) -> int !foreign method "GetCol",
	GetControl :: (self:wxGridEditorCreatedEvent) -> wxControl !foreign method "GetControl",
	SetRow     :: (self:wxGridEditorCreatedEvent, row:int) !foreign method "SetRow",
	SetCol     :: (self:wxGridEditorCreatedEvent, col:int) !foreign method "SetCol",
	SetControl :: (self:wxGridEditorCreatedEvent, ctrl:wxControl) !foreign method "SetControl",
}
