--[[============================================================
--=
--=  wxLua/wxWidget bindings for GlÃ³a
--=  Interface source: wxbase_data.i
--=
--=  Tested with:
--=  - wxLua 2.8.7.0 / wxWidgets 2.8.8
--=
--=  Note: Most bindings have not been tested yet!
--=
--============================================================]]

!import "wx/common"

export wxDEFAULT_DELIMITERS :: " \t\r\n" -- Is this available in foreign wxLua?


export wxStringTokenizerMode :: wxEnum
export wxTOKEN_INVALID:       wxStringTokenizerMode : !foreign lua "wx.wxTOKEN_INVALID"
export wxTOKEN_DEFAULT:       wxStringTokenizerMode : !foreign lua "wx.wxTOKEN_DEFAULT"
export wxTOKEN_RET_EMPTY:     wxStringTokenizerMode : !foreign lua "wx.wxTOKEN_RET_EMPTY"
export wxTOKEN_RET_EMPTY_ALL: wxStringTokenizerMode : !foreign lua "wx.wxTOKEN_RET_EMPTY_ALL"
export wxTOKEN_RET_DELIMS:    wxStringTokenizerMode : !foreign lua "wx.wxTOKEN_RET_DELIMS"
export wxTOKEN_STRTOK:        wxStringTokenizerMode : !foreign lua "wx.wxTOKEN_STRTOK"

export wxKeyType :: wxEnum
export wxKEY_NONE:    wxKeyType : !foreign lua "wx.wxKEY_NONE"
export wxKEY_INTEGER: wxKeyType : !foreign lua "wx.wxKEY_INTEGER"
export wxKEY_STRING:  wxKeyType : !foreign lua "wx.wxKEY_STRING"

export wxStringTokenizer :: !foreign struct {
	using wxObject,

	!call :: () -> wxStringTokenizer !foreign lua "wx.wxStringTokenizer",
	!call :: (str:wxString|string, delims:wxString|string=wxDEFAULT_DELIMITERS, mode:wxStringTokenizerMode=wxTOKEN_DEFAULT) -> wxStringTokenizer !foreign lua "wx.wxStringTokenizer",

	SetString     :: (self:wxStringTokenizer, str:wxString|string, delims:wxString|string=wxDEFAULT_DELIMITERS, mode:wxStringTokenizerMode=wxTOKEN_DEFAULT) !foreign method "SetString",
	Reinit        :: (self:wxStringTokenizer, str:wxString|string) !foreign method "Reinit",
	CountTokens   :: (self:wxStringTokenizer) -> int--[[size_t]] !foreign method "CountTokens",
	HasMoreTokens :: (self:wxStringTokenizer) -> bool !foreign method "HasMoreTokens",
	GetNextToken  :: (self:wxStringTokenizer) -> string !foreign method "GetNextToken",
	GetString     :: (self:wxStringTokenizer) -> string !foreign method "GetString",
	GetPosition   :: (self:wxStringTokenizer) -> int--[[size_t]] !foreign method "GetPosition",
	GetMode       :: (self:wxStringTokenizer) -> wxStringTokenizerMode !foreign method "GetMode",
	AllowEmpty    :: (self:wxStringTokenizer) -> bool !foreign method "AllowEmpty",
}

export wxClientData :: !foreign struct {
	using wxLuaUserdata,
}

export wxStringClientData :: !foreign struct {
	using wxClientData,

	!call :: (data:wxString|string="") -> wxStringClientData !foreign lua "wx.wxStringClientData",

	GetData :: (self:wxStringClientData) -> string !foreign method "GetData",
	SetData :: (self:wxStringClientData, data:wxString|string) !foreign method "SetData",
}

export wxClientDataContainer :: !foreign struct {
	using wxLuaUserdata,

	!call :: () -> wxClientDataContainer !foreign lua "wx.wxClientDataContainer",

	SetClientObject :: (self:wxClientDataContainer, data:wxClientData) !foreign method "SetClientObject",
	GetClientObject :: (self:wxClientDataContainer) -> wxClientData !foreign method "GetClientObject",
	SetClientData   :: (self:wxClientDataContainer, data:int--[[voidptr_long]]) !foreign method "SetClientData",
	GetClientData   :: (self:wxClientDataContainer) -> int--[[voidptr_long]] !foreign method "GetClientData",
}

export wxList :: !foreign struct {
	using wxObject,

	!call :: () -> wxList !foreign lua "wx.wxList",

	Append         :: (self:wxList, object:wxObject) -> wxNode !foreign method "Append",
	Append         :: (self:wxList, key:int--[[long]], object:wxObject) -> wxNode !foreign method "Append",
	Append         :: (self:wxList, key:wxString|string, object:wxObject) -> wxNode !foreign method "Append",
	Clear          :: (self:wxList) !foreign method "Clear",
	DeleteContents :: (self:wxList, destroy:bool) !foreign method "DeleteContents",
	DeleteNode     :: (self:wxList, pNode:wxNode) -> bool !foreign method "DeleteNode",
	DeleteObject   :: (self:wxList, pObject:wxObject) -> bool !foreign method "DeleteObject",
	Find           :: (self:wxList, pObject:wxObject) -> wxNode !foreign method "Find",
	Find           :: (self:wxList, key:int--[[long]]) -> wxNode !foreign method "Find",
	Find           :: (self:wxList, key:wxString|string) -> wxNode !foreign method "Find",
	GetCount       :: (self:wxList) -> int !foreign method "GetCount",
	GetFirst       :: (self:wxList) -> wxNode !foreign method "GetFirst",
	GetLast        :: (self:wxList) -> wxNode !foreign method "GetLast",
	IndexOf        :: (self:wxList, pObject:wxObject) -> int !foreign method "IndexOf",
	Insert         :: (self:wxList, pObject:wxObject) -> wxNode !foreign method "Insert",
	Insert         :: (self:wxList, position:int--[[size_t]], pObject:wxObject) -> wxNode !foreign method "Insert",
	Insert         :: (self:wxList, pNode:wxNode, pObject:wxObject) -> wxNode !foreign method "Insert",
	IsEmpty        :: (self:wxList) -> bool !foreign method "IsEmpty",
	Item           :: (self:wxList, iIndex:int) -> wxNode !foreign method "Item",
	Member         :: (self:wxList, pObject:wxObject) -> wxNode !foreign method "Member",
}

export wxNode :: !foreign struct {
	using wxLuaUserdata,

	GetData     :: (self:wxNode) -> wxObject !foreign method "GetData",
	GetNext     :: (self:wxNode) -> wxNode !foreign method "GetNext",
	GetPrevious :: (self:wxNode) -> wxNode !foreign method "GetPrevious",
	SetData     :: (self:wxNode, data:wxObject) !foreign method "SetData",
}

export wxArrayInt :: !foreign struct {
	using wxLuaUserdata,

	!call :: () -> wxArrayInt !foreign lua "wx.wxArrayInt",
	!call :: (array:wxArrayInt) -> wxArrayInt !foreign lua "wx.wxArrayInt",

	ToLuaTable :: (self:wxArrayInt) -> []int !foreign method "ToLuaTable",
	Add        :: (self:wxArrayInt, num:int) !foreign method "Add",
	Alloc      :: (self:wxArrayInt, count:int--[[size_t]]) !foreign method "Alloc",
	Clear      :: (self:wxArrayInt) !foreign method "Clear",
	Empty      :: (self:wxArrayInt) !foreign method "Empty",
	GetCount   :: (self:wxArrayInt) -> int !foreign method "GetCount",
	IsEmpty    :: (self:wxArrayInt) -> bool !foreign method "IsEmpty",
	Index      :: (self:wxArrayInt, n:int, searchFromEnd:bool=false) -> int !foreign method "Index",
	Insert     :: (self:wxArrayInt, num:int, n:int, copies:int=1) !foreign method "Insert",
	Item       :: (self:wxArrayInt, n:int) -> int !foreign method "Item",
	Remove     :: (self:wxArrayInt, n:int) !foreign method "Remove",
	RemoveAt   :: (self:wxArrayInt, index:int--[[size_t]]) !foreign method "RemoveAt",
	Shrink     :: (self:wxArrayInt) !foreign method "Shrink",
}

export wxArrayString :: !foreign struct {
	using wxLuaUserdata,

	null: wxArrayString : !foreign lua "wx.NULL",

	!call :: () -> wxArrayString !foreign lua "wx.wxArrayString",
	!call :: (array:wxArrayString|[]string) -> wxArrayString !foreign lua "wx.wxArrayString",

	ToLuaTable :: (self:wxArrayString) -> []string !foreign method "ToLuaTable",
	Add        :: (self:wxArrayString, str:wxString|string, copies:int--[[size_t]]=1) -> int--[[size_t]] !foreign method "Add",
	Alloc      :: (self:wxArrayString, nCount:int--[[size_t]]) !foreign method "Alloc",
	Clear      :: (self:wxArrayString) !foreign method "Clear",
	Empty      :: (self:wxArrayString) !foreign method "Empty",
	GetCount   :: (self:wxArrayString) -> int !foreign method "GetCount",
	Index      :: (self:wxArrayString, sz:wxString|string, bCase:bool=true, bFromEnd:bool=false) -> int !foreign method "Index",
	Insert     :: (self:wxArrayString, str:wxString|string, nIndex:int, copies:int--[[size_t]]=1) !foreign method "Insert",
	IsEmpty    :: (self:wxArrayString) -> bool !foreign method "IsEmpty",
	Item       :: (self:wxArrayString, nIndex:int--[[size_t]]) -> string !foreign method "Item",
	Last       :: (self:wxArrayString) -> string !foreign method "Last",
	Remove     :: (self:wxArrayString, sz:wxString|string) !foreign method "Remove",
	RemoveAt   :: (self:wxArrayString, nIndex:int--[[size_t]], count:int--[[size_t]]=1) !foreign method "RemoveAt",
	Shrink     :: (self:wxArrayString) !foreign method "Shrink",
	Sort       :: (self:wxArrayString, reverseOrder:bool=false) !foreign method "Sort",
}

export wxSortedArrayString :: !foreign struct {
	using wxArrayString,

	!call :: () -> wxSortedArrayString !foreign lua "wx.wxSortedArrayString",
	!call :: (src:wxArrayString|[]string) -> wxSortedArrayString !foreign lua "wx.wxSortedArrayString",
	!call :: (src:wxSortedArrayString) -> wxSortedArrayString !foreign lua "wx.wxSortedArrayString",
}

export wxLongLong :: !foreign struct {
	using wxLuaUserdata,

	!call :: (hi:int--[[long]]=0, lo:int--[[unsigned long]]=0) -> wxLongLong !foreign lua "wx.wxLongLong",

	Abs      :: (self:wxLongLong) -> wxLongLong !foreign method "Abs",
	Assign   :: (self:wxLongLong, d:float--[[double]]) -> wxLongLong !foreign method "Assign",
	GetHi    :: (self:wxLongLong) -> int--[[long]] !foreign method "GetHi",
	GetLo    :: (self:wxLongLong) -> int--[[unsigned long]] !foreign method "GetLo",
	ToDouble :: (self:wxLongLong) -> float--[[double]] !foreign method "ToDouble",
	ToLong   :: (self:wxLongLong) -> int--[[long]] !foreign method "ToLong",
	ToString :: (self:wxLongLong) -> string !foreign method "ToString",
}

export wxULongLong :: !foreign struct {
	using wxLuaUserdata,

	!call :: (hi:int--[[unsigned long]]=0, lo:int--[[unsigned long]]=0) -> wxULongLong !foreign lua "wx.wxULongLong",

	GetHi    :: (self:wxULongLong) -> int--[[unsigned long]] !foreign method "GetHi",
	GetLo    :: (self:wxULongLong) -> int--[[unsigned long]] !foreign method "GetLo",
	ToULong  :: (self:wxULongLong) -> int--[[long]] !foreign method "ToULong",
	ToString :: (self:wxULongLong) -> string !foreign method "ToString",
}
