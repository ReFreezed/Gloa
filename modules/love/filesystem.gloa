--[[============================================================
--=
--=  LÃ–VE bindings (love2d.org)
--=  love.filesystem
--=
--=  Supported versions: 11.3
--=
--==============================================================

	loveSetAppDataFolderName
	loveReadFile, loveWriteFile

	-- Structs:
	LoveFileData

--============================================================]]

!import "love/basic"

export loveSetAppDataFolderName :: (name:string) !foreign lua "love.filesystem.setIdentity"

export loveReadFile :: (path:string) -> (success:bool, data:string, error:string) {
	local helper :: (path:string) -> string|none, int|string !foreign lua "love.filesystem.read"

	local data, sizeOrErr = helper(path)
	if data == nil  return false, "", cast(string)sizeOrErr

	return true, cast(string)data, ""
}

export loveWriteFile :: (path:string, data:string) -> (success:bool, error:string) {
	local helper :: (path:string, data:string) -> bool, none|string !foreign lua "love.filesystem.write"

	local ok, err = helper(path, data)
	if not ok  return false, cast(string)err

	return true, ""
}

export loveNewFileData :: (contents:string, filename:string) -> LoveFileData!must !foreign lua "love.filesystem.newFileData"

export loveNewFileData :: (filename:string) -> (success:bool, fileData:LoveFileData!must, error:string) {
	local helper :: (filename:string) -> LoveFileData|none, none|string !foreign lua "love.filesystem.newFileData"

	local fileData, err = helper(filename)
	if fileData == nil  return false, NULL, cast(string)err

	return true, cast(LoveFileData)fileData , ""
}

-- FileData.
export LoveFileData :: struct { using LoveData }

export loveGetExtension :: (data:LoveFileData) -> string !foreign method "getExtension"
export loveGetFilename  :: (data:LoveFileData) -> string !foreign method "getFilename"
