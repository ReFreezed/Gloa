--[[============================================================
--=
--=  Artal bindings
--=  Load .psd (Photoshop) files in LÃ–VE.
--=  https://github.com/unXedDani/Artal
--=
--=  Requires artal.lua
--=
--==============================================================

	loadAll, loadInfo, loadLayer, loadComposed

	Types:
	Psd

	Enums:
	PsdBlendMode
	PsdLayerType

--============================================================]]

local LF :: !import "love/filesystem" -- FileData
local LG :: !import "love/graphics"   -- Image
local LI :: !import "love/image"      -- ImageData

export PsdLayerType :: enum {
	IMAGE :: "image", -- Image layer with ImageData.
	EMPTY :: "empty", -- Image layer without ImageData.
	OPEN  :: "open",  -- Beginning of group layer.
	CLOSE :: "close", -- End of group layer.
}

export PsdBlendMode :: enum {
	NORMAL        :: "norm",
	PASS_THROUGH  :: "pass",
	MULTIPLY      :: "mul",
	SCREEN        :: "scrn",
	OVERLAY       :: "over",
	DISSOLVE      :: "diss",
	DARKEN        :: "dark",
	COLOR_BURN    :: "idiv",
	LINEAR_BURN   :: "lbrn",
	DARKER_COLOR  :: "dkCl",
	LIGHTEN       :: "lite",
	COLOR_DODGE   :: "div",
	LINEAR_DODGE  :: "lddg",
	LIGHTER_COLOR :: "lgCl",
	SOFT_LIGHT    :: "sLit",
	HARD_LIGHT    :: "hLit",
	VIVID_LIGHT   :: "vLit",
	LINEAR_LIGHT  :: "lLit",
	PIN_LIGHT     :: "pLit",
	HARD_MIX      :: "hMix",
	DIFFERENCE    :: "diff",
	EXCLUSION     :: "smud",
	SUBTRACT      :: "fsub",
	DIVIDE        :: "fdiv",
	HUE           :: "hue",
	SATURATION    :: "sat",
	COLOR         :: "colr",
	LUMINOSITY    :: "lum",
}

export Psd :: !foreign struct {
	width:  int,
	height: int,

	-- Layers...
	!value: !foreign struct {
		name:  string,
		type:  PsdLayerType,
		blend: PsdBlendMode,
		clip:  bool,
		ox:    int,
		oy:    int,
		image: LG.Image|none, -- Only set by loadAll().
	},
}

local Filename   :: string
local loadHelper :: (file:Filename|LF.FileData, what:string|int|none=nil) -> Psd|LI.ImageData|none !foreign lua "require'artal'.newPSD"

export loadAll      :: (file:Filename|LF.FileData) -> Psd          { return cast(Psd)          loadHelper(file            ) }
export loadInfo     :: (file:Filename|LF.FileData) -> Psd          { return cast(Psd)          loadHelper(file, "info"    ) }
export loadComposed :: (file:Filename|LF.FileData) -> LI.ImageData { return cast(LI.ImageData) loadHelper(file, "composed") }

export loadLayer :: (file:Filename|LF.FileData, layerNumber:int) -> (ok:bool, imageData:LI.ImageData) {
	local imageData = loadHelper(file, layerNumber)
	if imageData == nil  return false, NULL

	return true, cast(LI.ImageData)imageData
}
