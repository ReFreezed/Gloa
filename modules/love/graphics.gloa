--[[============================================================
--=
--=  LÃ–VE bindings (love2d.org)
--=  love.graphics
--=
--=  Supported versions: 11.3
--=
--==============================================================

	loveClear
	loveCoordinateSystemRotate, loveCoordinateSystemScale, loveCoordinateSystemShear, loveCoordinateSystemTranslate, loveCoordinateSystemReset
	loveDraw, loveDrawAnchored
	loveDrawCircleFill, loveDrawCircleLine
	loveDrawEllipseFill, loveDrawEllipseLine
	loveDrawLine
	loveDrawRectangleFill, loveDrawRectangleLine
	loveDrawText
	loveGetBackgroundColor, loveSetBackgroundColor
	loveGetBaseline, loveGetAscent, loveGetDescent
	loveGetBlendMode, loveSetBlendMode, loveResetBlendMode
	loveGetCanvas, loveSetCanvas, loveSetNoCanvas
	loveGetColor, loveSetColor
	loveGetColorMask, loveSetColorMask, loveResetColorMask
	loveGetDefaultFilter, loveSetDefaultFilter
	loveGetDepth
	loveGetDepthSampleMode, loveSetDepthSampleMode, loveRemoveDepthSampleMode
	loveGetDimensions, loveGetWidth, loveGetHeight
	loveGetDpiScale
	loveGetFilter, loveSetFilter
	loveGetFlags
	loveGetFont, loveSetFont, loveSetNewFont
	loveGetFormat
	loveGetLayerCount
	loveGetLineHeight, loveSetLineHeight
	loveGetLineJoin, loveSetLineJoin
	loveGetLineStyle, loveSetLineStyle
	loveGetLineWidth, loveSetLineWidth
	loveGetMipmapCount, loveGetMipmapFilter, loveSetMipmapFilter, loveRemoveMipmapFilter
	loveGetPixelDimensions, loveGetPixelWidth, loveGetPixelHeight
	loveGetPointSize, loveSetPointSize
	loveGetScissor, loveSetScissor, loveIntersectScissor, loveResetScissor
	loveGetShader, loveSetShader
	loveGetTextureType
	loveGetWindowDimensions, loveGetWindowWidth, loveGetWindowHeight
	loveGetWrap, loveSetWrap
	loveGlobalToScreen, loveScreenToGlobal
	loveGraphicsPushAll, loveGraphicsPushTransform, loveGraphicsPop
	loveGraphicsReset
	loveHasGlyphs
	loveIsCompressed
	loveIsReadable
	loveIsWireframe, loveSetWireframe
	loveNewImage
	loveReplacePixels
	loveSetFallbacks

	-- Structs:
	LoveCanvasSetup
	LoveDrawable
	LoveFont
	LoveImage
	LoveImageFlags
	LoveImageFlags
	LoveTexture

--============================================================]]

!import "love/basic"



----------------------------------------------------------------
-- Structs.
----------------------------------------------------------------

-- Drawable.
export LoveDrawable :: struct { using LoveObject }

-- Texture.
export LoveTexture :: struct { using LoveDrawable }

export loveGetDepth :: (texture:LoveTexture) -> int {
	local M :: (texture:LoveTexture) -> int;
	return (cast(M)(cast(table)texture).getDepth) (texture)
}
export loveGetLayerCount :: (texture:LoveTexture) -> int {
	local M :: (texture:LoveTexture) -> int;
	return (cast(M)(cast(table)texture).getLayerCount) (texture)
}

export loveGetDepthSampleMode :: (texture:LoveTexture) -> (modeIsSet:bool, b:LoveCompareMode) {
	local M :: (texture:LoveTexture) -> LoveCompareMode|none;
	local mode = (cast(M)(cast(table)texture).getDepthSampleMode) (texture)

	if mode == nil  return false, !foreign lua "nil" -- @Hack

	return true, cast(LoveCompareMode)mode
}
export loveSetDepthSampleMode :: (texture:LoveTexture, mode:LoveCompareMode) {
	local M :: (texture:LoveTexture, mode:LoveCompareMode);
	(cast(M)(cast(table)texture).setDepthSampleMode) (texture, mode)
}
export loveRemoveDepthSampleMode :: (texture:LoveTexture) {
	local M :: (texture:LoveTexture);
	(cast(M)(cast(table)texture).setDepthSampleMode) (texture)
}

export loveGetDimensions :: (texture:LoveTexture) -> int, int {
	local M :: (texture:LoveTexture) -> int, int;
	return (cast(M)(cast(table)texture).getDimensions) (texture)
}
export loveGetWidth :: (texture:LoveTexture) -> int {
	local M :: (texture:LoveTexture) -> int;
	return (cast(M)(cast(table)texture).getWidth) (texture)
}
export loveGetHeight :: (texture:LoveTexture) -> int {
	local M :: (texture:LoveTexture) -> int;
	return (cast(M)(cast(table)texture).getHeight) (texture)
}

export loveGetPixelDimensions :: (texture:LoveTexture) -> int, int {
	local M :: (texture:LoveTexture) -> int, int;
	return (cast(M)(cast(table)texture).getPixelDimensions) (texture)
}
export loveGetPixelWidth :: (texture:LoveTexture) -> int {
	local M :: (texture:LoveTexture) -> int;
	return (cast(M)(cast(table)texture).getPixelWidth) (texture)
}
export loveGetPixelHeight :: (texture:LoveTexture) -> int {
	local M :: (texture:LoveTexture) -> int;
	return (cast(M)(cast(table)texture).getPixelHeight) (texture)
}

export loveGetFilter :: (texture:LoveTexture) -> (min,mag:LoveFilterMode, anisotropy:int) {
	local M :: (texture:LoveTexture) -> (min,mag:LoveFilterMode, anisotropy:int);
	return (cast(M)(cast(table)texture).getFilter) (texture)
}
export loveSetFilter :: (texture:LoveTexture, min,mag:LoveFilterMode, anisotropy=1) {
	local M :: (texture:LoveTexture, min,mag:LoveFilterMode, anisotropy=1);
	(cast(M)(cast(table)texture).setFilter) (texture, min, mag, anisotropy)
}

export loveGetMipmapCount :: (texture:LoveTexture) -> int {
	local M :: (texture:LoveTexture) -> int;
	return (cast(M)(cast(table)texture).getMipmapCount) (texture)
}

export loveGetMipmapFilter :: (texture:LoveTexture) -> (hasFilter:bool, mode:LoveFilterMode, sharpness:float) {
	local M :: (texture:LoveTexture) -> (mode:LoveFilterMode|none, sharpness:float);
	local mode, sharpness = (cast(M)(cast(table)texture).getMipmapFilter) (texture)

	if mode == nil  return false, !foreign lua "nil", 0 -- @Hack

	return true, cast(LoveFilterMode)mode, sharpness
}
export loveSetMipmapFilter :: (texture:LoveTexture, mode:LoveFilterMode, sharpness=0.0) {
	local M :: (texture:LoveTexture, mode:LoveFilterMode|none, sharpness:float);
	(cast(M)(cast(table)texture).setMipmapFilter) (texture, mode, sharpness)
}
export loveRemoveMipmapFilter :: (texture:LoveTexture) {
	local M :: (texture:LoveTexture);
	(cast(M)(cast(table)texture).setMipmapFilter) (texture)
}

export loveGetWrap :: (texture:LoveTexture) -> (horizontal,vertical,depth:LoveWrapMode) {
	local M :: (texture:LoveTexture) -> (horizontal,vertical,depth:LoveWrapMode);
	return (cast(M)(cast(table)texture).getWrap) (texture)
}
export loveSetWrap :: (texture:LoveTexture, horizontal,vertical,depth:LoveWrapMode) {
	local M :: (texture:LoveTexture, horizontal,vertical,depth:LoveWrapMode);
	(cast(M)(cast(table)texture).setWrap) (texture, horizontal, vertical, depth)
}

export loveGetDpiScale :: (texture:LoveTexture) -> float {
	local M :: (texture:LoveTexture) -> float;
	return (cast(M)(cast(table)texture).getDPIScale) (texture)
}
export loveGetFormat :: (texture:LoveTexture) -> LovePixelFormat {
	local M :: (texture:LoveTexture) -> LovePixelFormat;
	return (cast(M)(cast(table)texture).getFormat) (texture)
}
export loveGetTextureType :: (texture:LoveTexture) -> LoveTextureType {
	local M :: (texture:LoveTexture) -> LoveTextureType;
	return (cast(M)(cast(table)texture).getTextureType) (texture)
}
export loveIsReadable :: (texture:LoveTexture) -> bool {
	local M :: (texture:LoveTexture) -> bool;
	return (cast(M)(cast(table)texture).isReadable) (texture)
}

-- Image.
export LoveImage :: struct { using LoveTexture }

export loveGetFlags :: (image:LoveImage) -> LoveImageFlags {
	local M :: (image:LoveImage) -> LoveImageFlags;
	return (cast(M)(cast(table)image).getFlags) (image)
}

export loveIsCompressed :: (image:LoveImage) -> bool {
	local M :: (image:LoveImage) -> bool;
	return (cast(M)(cast(table)image).isCompressed) (image)
}

-- @Incomplete:
-- export loveReplacePixels :: (image:LoveImage, data:LoveImageData, slice:int, mipmap=1, x=0, y=0, reloadMipmaps=false) -> bool {
-- 	local M :: (image:LoveImage, data:LoveImageData, slice:int, mipmap:int, x:int, y:int, reloadMipmaps:bool);
-- 	(cast(M)(cast(table)image).replacePixels) (image, data, slice, mipmap, x, y, reloadMipmaps)
-- }

--
-- Other.
--

export LoveImageFlags :: struct {
	Filename :: string,

	linear  : bool            = false,
	mipmaps : bool|[]Filename = false,
}



----------------------------------------------------------------
-- Drawing.
----------------------------------------------------------------

export loveClear :: ()                   !foreign lua "love and love.graphics and love.graphics.clear" -- Same as loveClear(0,0,0,0)
export loveClear :: (r,g,b:float, a=1.0) !foreign lua "love and love.graphics and love.graphics.clear"

-- @Compiler @Incomplete: Make sy=sx work somehow and remove all extra overloads.
export loveDrawText :: (text:string, x,y=0.0,   r=0.0,   scale=1.0                        ) !foreign lua "love and love.graphics and love.graphics.print"
export loveDrawText :: (text:string, x,y:float, r:float, sx,sy:float, ox,oy=0.0, kx,ky=0.0) !foreign lua "love and love.graphics and love.graphics.print"
-- export loveDrawText :: (text:string, x,y=0.0, r=0.0, sx=1.0,sy=sx, ox,oy=0.0, kx,ky=0.0) !foreign lua "love and love.graphics and love.graphics.print"

local _loveDrawRectangle :: (mode:string, x,y:float, w,h:float)                                      !foreign lua "love and love.graphics and love.graphics.rectangle"
local _loveDrawRectangle :: (mode:string, x,y:float, w,h:float, radiusX,radiusY:float)               !foreign lua "love and love.graphics and love.graphics.rectangle"
local _loveDrawRectangle :: (mode:string, x,y:float, w,h:float, radiusX,radiusY:float, segments:int) !foreign lua "love and love.graphics and love.graphics.rectangle"
export loveDrawRectangleFill :: (x,y:float, w,h:float)                                      { _loveDrawRectangle("fill", x,y, w,h) }
export loveDrawRectangleLine :: (x,y:float, w,h:float)                                      { _loveDrawRectangle("line", x,y, w,h) }
export loveDrawRectangleFill :: (x,y:float, w,h:float, radiusX,radiusY:float)               { _loveDrawRectangle("fill", x,y, w,h, radiusX,radiusY) }
export loveDrawRectangleLine :: (x,y:float, w,h:float, radiusX,radiusY:float)               { _loveDrawRectangle("line", x,y, w,h, radiusX,radiusY) }
export loveDrawRectangleFill :: (x,y:float, w,h:float, radiusX,radiusY:float, segments:int) { _loveDrawRectangle("fill", x,y, w,h, radiusX,radiusY, segments) }
export loveDrawRectangleLine :: (x,y:float, w,h:float, radiusX,radiusY:float, segments:int) { _loveDrawRectangle("line", x,y, w,h, radiusX,radiusY, segments) }

local _loveDrawCircle :: (mode:string, x,y:float, radius:float)               !foreign lua "love and love.graphics and love.graphics.circle"
local _loveDrawCircle :: (mode:string, x,y:float, radius:float, segments:int) !foreign lua "love and love.graphics and love.graphics.circle"
export loveDrawCircleFill :: (x,y:float, radius:float)               { _loveDrawCircle("fill", x,y, radius) }
export loveDrawCircleLine :: (x,y:float, radius:float)               { _loveDrawCircle("line", x,y, radius) }
export loveDrawCircleFill :: (x,y:float, radius:float, segments:int) { _loveDrawCircle("fill", x,y, radius, segments) }
export loveDrawCircleLine :: (x,y:float, radius:float, segments:int) { _loveDrawCircle("line", x,y, radius, segments) }

local _loveDrawEllipse :: (mode:string, x,y:float, radiusX,radiusY:float)               !foreign lua "love and love.graphics and love.graphics.ellipse"
local _loveDrawEllipse :: (mode:string, x,y:float, radiusX,radiusY:float, segments:int) !foreign lua "love and love.graphics and love.graphics.ellipse"
export loveDrawEllipseFill :: (x,y:float, radiusX,radiusY:float)               { _loveDrawEllipse("fill", x,y, radiusX,radiusY) }
export loveDrawEllipseLine :: (x,y:float, radiusX,radiusY:float)               { _loveDrawEllipse("line", x,y, radiusX,radiusY) }
export loveDrawEllipseFill :: (x,y:float, radiusX,radiusY:float, segments:int) { _loveDrawEllipse("fill", x,y, radiusX,radiusY, segments) }
export loveDrawEllipseLine :: (x,y:float, radiusX,radiusY:float, segments:int) { _loveDrawEllipse("line", x,y, radiusX,radiusY, segments) }

-- @Compiler @Incomplete: Make sy=sx work somehow and remove all extra overloads.
export loveDraw :: (drawable:LoveDrawable,              x,y=0.0,   r=0.0,   scale=1.0)                         !foreign lua "love and love.graphics and love.graphics.draw"
export loveDraw :: (drawable:LoveDrawable,              x,y:float, r:float, sx,sy:float, ox,oy=0.0, kx,ky=0.0) !foreign lua "love and love.graphics and love.graphics.draw"
-- export loveDraw :: (texture:LoveTexture, quad:LoveQuad, x,y=0.0, r=0.0, sx=1.0)                                !foreign lua "love and love.graphics and love.graphics.draw"
-- export loveDraw :: (texture:LoveTexture, quad:LoveQuad, x,y:float, r:float, sx,sy:float, ox,oy=0.0, kx,ky=0.0) !foreign lua "love and love.graphics and love.graphics.draw"
-- export loveDraw :: (texture:LoveTexture,                transform:LoveTransform)                               !foreign lua "love and love.graphics and love.graphics.draw"
-- export loveDraw :: (texture:LoveTexture, quad:LoveQuad, transform:LoveTransform)                               !foreign lua "love and love.graphics and love.graphics.draw"

export loveDrawAnchored :: (texture:LoveTexture, x,y:float, ax,ay:float, rotation=0.0, scale=1.0) {
	loveDrawAnchored(texture, x,y, ax,ay, rotation, scale,scale)
}
export loveDrawAnchored :: (texture:LoveTexture, x,y:float, ax,ay:float, rotation:float, sx,sy:float, kx,ky=0.0) {
	local iw, ih = loveGetDimensions(texture)
	loveDraw(texture, x,y, rotation, sx,sy, ax*iw,ay*ih, kx,ky)
}

export loveDrawLine :: (x1,y1,x2,y2,...:float) !foreign lua "love and love.graphics and love.graphics.line"



----------------------------------------------------------------
-- Object creation.
----------------------------------------------------------------

export loveNewImage :: (filename:string)                             -> LoveImage !foreign lua "love and love.graphics and love.graphics.newImage"
export loveNewImage :: (filename:string, flags:LoveImageFlags)       -> LoveImage !foreign lua "love and love.graphics and love.graphics.newImage"
-- @Incomplete:
-- export loveNewImage :: (imageData:LoveImageData)                     -> LoveImage !foreign lua "love and love.graphics and love.graphics.newImage"
-- export loveNewImage :: (compressedImageData:LoveCompressedImageData) -> LoveImage !foreign lua "love and love.graphics and love.graphics.newImage"
-- export loveNewImage :: (filename:string, format:LoveTextureFormat)   -> LoveImage !foreign lua "love and love.graphics and love.graphics.newImage"

-- @Incomplete:
-- love.graphics.captureScreenshot
-- love.graphics.newArrayImage
-- love.graphics.newCanvas
-- love.graphics.newCubeImage
-- love.graphics.newFont
-- love.graphics.newImageFont
-- love.graphics.newMesh
-- love.graphics.newParticleSystem
-- love.graphics.newQuad
-- love.graphics.newShader
-- love.graphics.newSpriteBatch
-- love.graphics.newText
-- love.graphics.newVideo
-- love.graphics.newVolumeImage
-- love.graphics.setNewFont
-- love.graphics.validateShader



----------------------------------------------------------------
-- Graphics state.
----------------------------------------------------------------

-- Font
	export LoveFont :: struct { using LoveObject }

	export loveGetBaseline :: (font:LoveFont) -> int {
		local M :: (font:LoveFont) -> int;
		return (cast(M)(cast(table)font).getBaseline) (font)
	}
	export loveGetAscent :: (font:LoveFont) -> int {
		local M :: (font:LoveFont) -> int;
		return (cast(M)(cast(table)font).getAscent) (font)
	}
	export loveGetDescent :: (font:LoveFont) -> int {
		local M :: (font:LoveFont) -> int;
		return (cast(M)(cast(table)font).getDescent) (font)
	}

	export loveGetFilter :: (font:LoveFont) -> (min,mag:LoveFilterMode, anisotropy:int) {
		local M :: (font:LoveFont) -> (min,mag:LoveFilterMode, anisotropy:int);
		return (cast(M)(cast(table)font).getFilter) (font)
	}
	export loveSetFilter :: (font:LoveFont, min,mag:LoveFilterMode, anisotropy=1) {
		local M :: (font:LoveFont, min,mag:LoveFilterMode, anisotropy=1);
		(cast(M)(cast(table)font).setFilter) (font, min, mag, anisotropy)
	}

	export loveGetWidth :: (font:LoveFont, text:string) -> int {
		local M :: (font:LoveFont, text:string) -> int;
		return (cast(M)(cast(table)font).getWidth) (font, text)
	}
	export loveGetHeight :: (font:LoveFont) -> int {
		local M :: (font:LoveFont) -> int;
		return (cast(M)(cast(table)font).getHeight) (font)
	}
	export loveGetWrap :: (font:LoveFont, text:string, wrapLimit:int) -> (width:int, lines:[]string) {
		local M :: (font:LoveFont, text:string, wrapLimit:int) -> (width:int, lines:[]string);
		return (cast(M)(cast(table)font).getWrap) (font, text, wrapLimit)
	}

	export loveGetLineHeight :: (font:LoveFont) -> float {
		local M :: (font:LoveFont) -> float;
		return (cast(M)(cast(table)font).getLineHeight) (font)
	}
	export loveSetLineHeight :: (font:LoveFont, lineHeight:float) {
		local M :: (font:LoveFont, lineHeight:float);
		(cast(M)(cast(table)font).setLineHeight) (font, lineHeight)
	}

	export loveHasGlyphs :: (font:LoveFont, text:string) -> bool {
		local M :: (font:LoveFont, x,...:string|int) -> bool;
		return (cast(M)(cast(table)font).hasGlyphs) (font, text)
	}
	export loveHasGlyphs :: (font:LoveFont, char1,char2,...:string) -> bool {
		local M :: (font:LoveFont, x,...:string|int) -> bool;
		return (cast(M)(cast(table)font).hasGlyphs) (font, char1, char2, ...)
	}
	export loveHasGlyphs :: (font:LoveFont, codepoint,...:int) -> bool {
		local M :: (font:LoveFont, x,...:string|int) -> bool;
		return (cast(M)(cast(table)font).hasGlyphs) (font, codepoint, ...)
	}

	export loveGetDpiScale :: (font:LoveFont) -> float {
		local M :: (font:LoveFont) -> float;
		return (cast(M)(cast(table)font).getDPIScale) (font)
	}
	export loveSetFallbacks :: (font:LoveFont, ...:LoveFont) {
		local M :: (font:LoveFont, ...:LoveFont);
		(cast(M)(cast(table)font).setFallbacks) (font, ...)
	}
--

local DEFAULT_FONT_SIZE :: 12
export loveGetFont    :: () -> LoveFont  !foreign lua "love and love.graphics and love.graphics.getFont" -- @Check: Can this return nil?
export loveSetFont    :: (font:LoveFont) !foreign lua "love and love.graphics and love.graphics.setFont"
export loveSetNewFont :: (                 size=DEFAULT_FONT_SIZE) -> LoveFont !foreign lua "love and love.graphics and love.graphics.setNewFont"
export loveSetNewFont :: (filename:string, size=DEFAULT_FONT_SIZE) -> LoveFont !foreign lua "love and love.graphics and love.graphics.setNewFont"
 -- @Incomplete:
-- export loveSetNewFont :: (file:LoveFile,   size=DEFAULT_FONT_SIZE) -> LoveFont !foreign lua "love and love.graphics and love.graphics.setNewFont"
-- export loveSetNewFont :: (data:LoveData,   size=DEFAULT_FONT_SIZE) -> LoveFont !foreign lua "love and love.graphics and love.graphics.setNewFont"
-- export loveSetNewFont :: (rasterizer:LoveRasterizer)               -> LoveFont !foreign lua "love and love.graphics and love.graphics.setNewFont"

export loveGetBackgroundColor :: () -> (r,g,b,a:float) !foreign lua "love and love.graphics and love.graphics.getBackgroundColor"
export loveSetBackgroundColor :: (r,g,b:float, a=1.0)  !foreign lua "love and love.graphics and love.graphics.setBackgroundColor"

export loveGetBlendMode   :: () -> LoveBlendMode                                              !foreign lua "love and love.graphics and love.graphics.getBlendMode"
export loveSetBlendMode   :: (mode:LoveBlendMode, alphaMode=LoveBlendAlphaMode.ALPHAMULTIPLY) !foreign lua "love and love.graphics and love.graphics.setBlendMode"
export loveResetBlendMode :: () { loveSetBlendMode(LoveBlendMode.ALPHA) }

-- @Incomplete:
-- export LoveCanvasSetup :: struct {
-- 	!value:LoveCanvas,
-- 	stencil = false,
-- 	depth   = false,
-- 	depthstencil:LoveCanvas|none = nil,
-- }
-- export loveGetCanvas   :: () -> LoveCanvas|none                      !foreign lua "love and love.graphics and love.graphics.getCanvas"
-- export loveSetCanvas   :: (canvas:LoveCanvas, mipmap=1)              !foreign lua "love and love.graphics and love.graphics.setCanvas"
-- export loveSetCanvas   :: (canvas:LoveCanvas, slice:int, mipmap:int) !foreign lua "love and love.graphics and love.graphics.setCanvas"
-- export loveSetCanvas   :: (canvas1,canvas2,...:LoveCanvas)           !foreign lua "love and love.graphics and love.graphics.setCanvas"
-- export loveSetCanvas   :: (setup:LoveCanvasSetup)                    !foreign lua "love and love.graphics and love.graphics.setCanvas"
-- export loveSetNoCanvas :: ()                                         !foreign lua "love and love.graphics and love.graphics.setCanvas"

export loveGetColor :: () -> (r,g,b,a:float) !foreign lua "love and love.graphics and love.graphics.getColor"
export loveSetColor :: (r,g,b:float, a=1.0)  !foreign lua "love and love.graphics and love.graphics.setColor"

export loveGetColorMask   :: () -> (r,g,b,a:bool) !foreign lua "love and love.graphics and love.graphics.getColorMask"
export loveSetColorMask   :: (r,g,b,a:bool)       !foreign lua "love and love.graphics and love.graphics.setColorMask"
export loveResetColorMask :: ()                   !foreign lua "love and love.graphics and love.graphics.setColorMask"

export loveGetDefaultFilter :: () -> (min,mag:LoveFilterMode, anisotropy:int) !foreign lua "love and love.graphics and love.graphics.getDefaultFilter"
export loveSetDefaultFilter :: (min,mag:LoveFilterMode, anisotropy=1)         !foreign lua "love and love.graphics and love.graphics.setDefaultFilter"

export loveGetLineJoin :: () -> LoveLineJoin  !foreign lua "love and love.graphics and love.graphics.getLineJoin"
export loveSetLineJoin :: (join:LoveLineJoin) !foreign lua "love and love.graphics and love.graphics.setLineJoin"

export loveGetLineStyle :: () -> LoveLineStyle   !foreign lua "love and love.graphics and love.graphics.getLineStyle"
export loveSetLineStyle :: (style:LoveLineStyle) !foreign lua "love and love.graphics and love.graphics.setLineStyle"

export loveGetLineWidth :: () -> float !foreign lua "love and love.graphics and love.graphics.getLineWidth"
export loveSetLineWidth :: (w:float)   !foreign lua "love and love.graphics and love.graphics.setLineWidth"

-- @Incomplete:
-- export LoveShader :: { ??? }
-- export loveGetShader :: () -> LoveShader    !foreign lua "love and love.graphics and love.graphics.getShader"
-- export loveSetShader :: (shader:LoveShader) !foreign lua "love and love.graphics and love.graphics.setShader"

export loveGetPointSize :: () -> float  !foreign lua "love and love.graphics and love.graphics.getPointSize"
export loveSetPointSize :: (size:float) !foreign lua "love and love.graphics and love.graphics.setPointSize"

export loveGetScissor       :: () -> (x,y,w,h:float) !foreign lua "love and love.graphics and love.graphics.getScissor"
export loveSetScissor       :: (x,y,w,h:float)       !foreign lua "love and love.graphics and love.graphics.setScissor"
export loveIntersectScissor :: (x,y,w,h:float)       !foreign lua "love and love.graphics and love.graphics.intersectScissor"
export loveResetScissor     :: ()                    !foreign lua "love and love.graphics and love.graphics.setScissor"

export loveIsWireframe  :: () -> bool     !foreign lua "love and love.graphics and love.graphics.isWireframe"
export loveSetWireframe :: (enabled:bool) !foreign lua "love and love.graphics and love.graphics.setWireframe"



----------------------------------------------------------------
-- Coordinate system.
----------------------------------------------------------------

export loveCoordinateSystemRotate    :: (anlge:float) !foreign lua "love and love.graphics and love.graphics.rotate"
export loveCoordinateSystemScale     :: (sx,sy:float) !foreign lua "love and love.graphics and love.graphics.scale"
export loveCoordinateSystemScale     :: (scale:float) !foreign lua "love and love.graphics and love.graphics.scale"
export loveCoordinateSystemShear     :: (kx,ky:float) !foreign lua "love and love.graphics and love.graphics.shear"
export loveCoordinateSystemTranslate :: (dx,dy:float) !foreign lua "love and love.graphics and love.graphics.translate"

export loveCoordinateSystemReset :: () !foreign lua "love and love.graphics and love.graphics.origin"

local _loveGraphicsPush :: ()             !foreign lua "love and love.graphics and love.graphics.push"
local _loveGraphicsPush :: (stack:string) !foreign lua "love and love.graphics and love.graphics.push"
export loveGraphicsPushAll       :: () { _loveGraphicsPush("all") }
export loveGraphicsPushTransform :: () { _loveGraphicsPush()      }
export loveGraphicsPop           :: () !foreign lua "love and love.graphics and love.graphics.pop"
export loveGraphicsReset         :: () !foreign lua "love and love.graphics and love.graphics.reset"

export loveGlobalToScreen :: (globalX, globalY: float) -> (screenX, screenY: float) !foreign lua "love and love.graphics and love.graphics.transformPoint"
export loveScreenToGlobal :: (screenX, screenY: float) -> (globalX, globalY: float) !foreign lua "love and love.graphics and love.graphics.inverseTransformPoint"



----------------------------------------------------------------
-- Window.
----------------------------------------------------------------

export loveGetWindowDimensions :: () -> int, int !foreign lua "love and love.graphics and love.graphics.getDimensions"
export loveGetWindowWidth      :: () -> int      !foreign lua "love and love.graphics and love.graphics.getWidth"
export loveGetWindowHeight     :: () -> int      !foreign lua "love and love.graphics and love.graphics.getHeight"


