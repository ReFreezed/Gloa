--[[============================================================
--=
--=  LÖVE bindings (love2d.org)
--=  love.event
--=
--=  Supported versions: 11.3
--=
--==============================================================

	setEventHandler, setConfigHandler, removeEventHandler
	quit, restart

	Enums:
	Event

--============================================================]]

!import "love/basic"



export Event :: enum {
	-- General.
	DISPLAY_ROTATED   :: "displayrotated",
	DRAW              :: "draw",
	ERROR_HANDLER     :: "errorhandler",
	LOAD              :: "load",
	LOW_MEMORY        :: "lowmemory",
	QUIT              :: "quit",
	RUN               :: "run",
	THREAD_ERROR      :: "threaderror",
	UPDATE            :: "update",
	-- Window.
	DIRECTORY_DROPPED :: "directorydropped",
	FILE_DROPPED      :: "filedropped",
	FOCUS             :: "focus",
	MOUSE_FOCUS       :: "mousefocus",
	RESIZE            :: "resize",
	VISIBLE           :: "visible",
	-- Keyboard.
	KEY_PRESSED       :: "keypressed",
	KEY_RELEASED      :: "keyreleased",
	TEXT_EDITED       :: "textedited",
	TEXT_INPUT        :: "textinput",
	-- Mouse.
	MOUSE_MOVED       :: "mousemoved",
	MOUSE_PRESSED     :: "mousepressed",
	MOUSE_RELEASED    :: "mousereleased",
	WHEEL_MOVED       :: "wheelmoved",
	-- Joystick.
	GAMEPAD_AXIS      :: "gamepadaxis",
	GAMEPAD_PRESSED   :: "gamepadpressed",
	GAMEPAD_RELEASED  :: "gamepadreleased",
	JOYSTICK_ADDED    :: "joystickadded",
	JOYSTICK_AXIS     :: "joystickaxis",
	JOYSTICK_HAT      :: "joystickhat",
	JOYSTICK_PRESSED  :: "joystickpressed",
	JOYSTICK_RELEASED :: "joystickreleased",
	JOYSTICK_REMOVED  :: "joystickremoved",
	-- Touch.
	TOUCH_MOVED       :: "touchmoved",
	TOUCH_PRESSED     :: "touchpressed",
	TOUCH_RELEASED    :: "touchreleased",
	-- Other.
	CONFIG            :: "conf",
}



local loveTable: table : !foreign lua "love"

export setEventHandler :: (event:Event, handler:any, catchErrorsInGloa=true) { -- @Compiler @Cleanup :RestrictAnyToTypeTag
	!import "basic"

	assert(getLuaType(handler) == LuaType.FUNCTION, "Handler is not a function.") -- @Cleanup: Remove this when :RestrictAnyToTypeTag is solved.

	if catchErrorsInGloa {
		-- Because LÖVE has it's own error handling that the user may not want we have
		-- to do some trickery to catch errors in Glóa before LÖVE sees them.
		local wrap :: (func:any) -> any !foreign compiler "wrapFunctionInGloaErrorHandler"
		handler = wrap(handler)
	}

	loveTable[event] = handler
	if event == Event.ERROR_HANDLER  loveTable.errhand = handler
}

export setConfigHandler :: (handler:(conf:Config)) {
	setEventHandler(Event.CONFIG, handler, false)
}

export removeEventHandler :: (event:Event) {
	loveTable[event] = nil
	if event == Event.ERROR_HANDLER  loveTable.errhand = nil
}

export quit :: (exitStatus=0) !foreign lua "love.event.quit"

export restart :: () {
	local helper :: (restart:string) !foreign lua "love.event.quit"
	helper("restart")
}


