--[[============================================================
--=
--=  LÃ–VE bindings (love2d.org)
--=  love.audio
--=
--=  Supported versions: 11.3
--=
--==============================================================

	...

	-- Types:
	EffectSettings
	Source

	-- Enums:
	DistanceModel
	EffectType
	EffectWaveform
	SourceType

--============================================================]]

!import "love/basic"



----------------------------------------------------------------
-- Enums.
----------------------------------------------------------------

export SourceType :: enum {
	STATIC :: "static",
	STREAM :: "stream",
	QUEUE  :: "queue",
}

export DistanceModel :: enum {
	NONE             :: "none",
	INVERSE          :: "inverse",
	INVERSE_CLAMPED  :: "inverseclamped",
	LINEAR           :: "linear",
	LINEAR_CLAMPED   :: "linearclamped",
	EXPONENT         :: "exponent",
	EXPONENT_CLAMPED :: "exponentclamped",
}

export EffectType :: enum {
	CHORUS        :: "chorus",
	COMPRESSOR    :: "compressor",
	DISTORTION    :: "distortion",
	ECHO          :: "echo",
	EQUALIZER     :: "equalizer",
	FLANGER       :: "flanger",
	REVERB        :: "reverb",
	RINGMODULATOR :: "ringmodulator",
}

export EffectWaveform ::enum {
	SAWTOOTH :: "sawtooth",
	SINE     :: "sine",
	SQUARE   :: "square",
	TRIANGLE :: "triangle",
}



----------------------------------------------------------------
-- Types.
----------------------------------------------------------------

export EffectSettings :: struct {
	\type  = EffectType.REVERB,
	volume = 1.0,

	-- Chorus...
	waveform:EffectWaveform|none = nil,
	phase:            float|none = nil,
	rate:             float|none = nil,
	depth:            float|none = nil,
	feedback:         float|none = nil,
	delay:            float|none = nil,

	-- Compressor...
	enable:            bool|none = nil,

	-- Distortion...
	gain:             float|none = nil,
	edge:             float|none = nil,
	lowcut:           float|none = nil,
	center:           float|none = nil,
	bandwidth:        float|none = nil,

	-- Echo...
	--delay
	tapdelay:         float|none = nil,
	damping:          float|none = nil,
	--feedback
	spread:           float|none = nil,

	-- Equalizer...
	lowgain:          float|none = nil,
	--lowcut
	lowmidgain:       float|none = nil,
	lowmidfrequency:  float|none = nil,
	lowmidbandwidth:  float|none = nil,
	highmidgain:      float|none = nil,
	highmidfrequency: float|none = nil,
	highmidbandwidth: float|none = nil,
	highgain:         float|none = nil,
	highcut:          float|none = nil,

	-- Flanger...
	--waveform
	--phase
	--rate
	--depth
	--feedback
	--delay

	-- Reverb...
	--gain
	--highgain
	density:          float|none = nil,
	diffusion:        float|none = nil,
	decaytime:        float|none = nil,
	decayhighratio:   float|none = nil,
	earlygain:        float|none = nil,
	earlydelay:       float|none = nil,
	lategain:         float|none = nil,
	latedelay:        float|none = nil,
	roomrolloff:      float|none = nil,
	airabsorption:    float|none = nil,
	highlimit:         bool|none = nil,

	-- Ringmodulator...
	--waveform
	frequency:        float|none = nil,
	--highcut
}

export Source :: !foreign struct {
	using Object,

	-- play  :: (source:Source) !foreign method "play", -- @Compiler: Overload scope issues...
	-- pause :: (source:Source) !foreign method "pause",
	-- stop  :: (source:Source) !foreign method "stop",

	clone :: (source:Source) -> Source !foreign method "clone",

	getVolume :: (source:Source) -> float      !foreign method "getVolume",
	setVolume :: (source:Source, volume:float) !foreign method "setVolume", -- volume = 0..1
	-- @Incomplete:
	-- Source:getVolumeLimits
	-- Source:setVolumeLimits

	getPitch :: (source:Source) -> float     !foreign method "getPitch",
	setPitch :: (source:Source, pitch:float) !foreign method "setPitch", -- pitch > 0

	isLooping  :: (source:Source) -> bool    !foreign method "isLooping",
	setLooping :: (source:Source, loop:bool) !foreign method "setLooping",

	-- @Incomplete:
	-- Source:getActiveEffects
	-- Source:getChannelCount
	-- Source:getDuration
	-- Source:getFreeBufferCount
	-- Source:getType
	-- Source:isPlaying
	-- Source:queue
	-- Source:tell
	-- Source:seek
	-- Source:isRelative
	-- Source:setRelative
	-- Source:getAirAbsorption
	-- Source:setAirAbsorption
	-- Source:getAttenuationDistances
	-- Source:setAttenuationDistances
	-- Source:getCone
	-- Source:setCone
	-- Source:getDirection
	-- Source:setDirection
	-- Source:getEffect
	-- Source:setEffect
	-- Source:getFilter
	-- Source:setFilter
	-- Source:getPosition
	-- Source:setPosition
	-- Source:getRolloff
	-- Source:setRolloff
	-- Source:getVelocity
	-- Source:setVelocity
}



----------------------------------------------------------------
-- Functions.
----------------------------------------------------------------

-- Note: sourceType must be STATIC or STREAM for these.
export newSource :: (filename:string, sourceType:SourceType) -> Source !foreign lua "love.audio.newSource"
-- export newSource :: (file:File,       sourceType:SourceType) -> Source !foreign lua "love.audio.newSource"
-- export newSource :: (decoder:Decoder, sourceType:SourceType) -> Source !foreign lua "love.audio.newSource"
-- export newSource :: (data:FileData,   sourceType:SourceType) -> Source !foreign lua "love.audio.newSource"
-- export newSource :: (data:SoundData,  sourceType:SourceType) -> Source !foreign lua "love.audio.newSource"

export newQueueableSource :: (sampleRate:int, bitdepth:int, channels:int, bufferCount=0) -> Source !foreign lua "love.audio.newQueueableSource"

export play  :: (source,...:Source) !foreign lua "love.audio.play"
export play  :: (sources:[]Source)  !foreign lua "love.audio.play"
export pause :: (source,...:Source) !foreign lua "love.audio.pause"
export pause :: (sources:[]Source)  !foreign lua "love.audio.pause"
export stop  :: (source,...:Source) !foreign lua "love.audio.stop"
export stop  :: (sources:[]Source)  !foreign lua "love.audio.stop"

export pauseAllSources :: () -> (pausedSources:[]Source) !foreign lua "love.audio.pause"
export stopAllSources  :: ()                                 !foreign lua "love.audio.stop"

export getMasterVolume :: () -> float    !foreign lua "love.audio.getVolume"
export setMasterVolume :: (volume:float) !foreign lua "love.audio.setVolume" -- volume = 0..1

export getActiveSourceCount :: () -> int !foreign lua "love.audio.getActiveSourceCount"

export setMixWithSystem :: (mix:bool) -> (success:bool) !foreign lua "love.audio.setMixWithSystem"

export getDistanceModel :: () -> DistanceModel   !foreign lua "love.audio.getDistanceModel"
export setDistanceModel :: (model:DistanceModel) !foreign lua "love.audio.setDistanceModel"

export getDopplerScale :: () -> float   !foreign lua "love.audio.getDopplerScale"
export setDopplerScale :: (scale:float) !foreign lua "love.audio.setDopplerScale" -- scale > 0

export areSoundEffectsSupported :: () -> bool !foreign lua "love.audio.isEffectsSupported"
export getMaxEffectsPerScene    :: () -> int  !foreign lua "love.audio.getMaxSceneEffects"
export getMaxEffectsPerSource   :: () -> int  !foreign lua "love.audio.getMaxSourceEffects"

export getListenerOrientation :: () -> (forwardX,forwardY,forwardZ:float, upX,upY,upZ:float) !foreign lua "love.audio.getOrientation"
export setListenerOrientation :: (forwardX,forwardY,forwardZ:float, upX,upY,upZ:float)       !foreign lua "love.audio.setOrientation"
export getListenerPosition    :: () -> (x,y,z:float) !foreign lua "love.audio.getPosition"
export setListenerPosition    :: (x,y,z:float)       !foreign lua "love.audio.setPosition"
export getListenerVelocity    :: () -> (x,y,z:float) !foreign lua "love.audio.getVelocity"
export setListenerVelocity    :: (x,y,z:float)       !foreign lua "love.audio.setVelocity"

export getEffectDefinition :: (name:string)                          -> EffectSettings !foreign lua "love.audio.getEffect"
export defineEffect        :: (name:string, settings:EffectSettings) -> (success:bool) !foreign lua "love.audio.setEffect"
export enableEffect        :: (name:string, enable=true)             -> (success:bool) !foreign lua "love.audio.setEffect"

export getActiveEffects :: () -> (names:[]string) !foreign lua "love.audio.getActiveEffects"

-- export getRecordingDevices :: () -> []RecordingDevice !foreign lua "love.audio.getRecordingDevices" -- @Incomplete


