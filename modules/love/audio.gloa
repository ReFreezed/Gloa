--[[============================================================
--=
--=  LÃ–VE bindings (love2d.org)
--=  love.audio
--=
--=  Supported versions: 11.3
--=
--==============================================================

	...

	-- Structs:
	LoveEffectSettings
	LoveSource

	-- Enums:
	LoveDistanceModel
	LoveEffectType
	LoveSourceType

--============================================================]]

!import "love/basic"



----------------------------------------------------------------
-- Structs and enums.
----------------------------------------------------------------

export LoveSourceType :: enum {
	STATIC :: "static",
	STREAM :: "stream",
	QUEUE  :: "queue",
}

export LoveDistanceModel :: enum {
	NONE             :: "none",
	INVERSE          :: "inverse",
	INVERSE_CLAMPED  :: "inverseclamped",
	LINEAR           :: "linear",
	LINEAR_CLAMPED   :: "linearclamped",
	EXPONENT         :: "exponent",
	EXPONENT_CLAMPED :: "exponentclamped",
}

export LoveEffectType :: enum {
	CHORUS        :: "chorus",
	COMPRESSOR    :: "compressor",
	DISTORTION    :: "distortion",
	ECHO          :: "echo",
	EQUALIZER     :: "equalizer",
	FLANGER       :: "flanger",
	REVERB        :: "reverb",
	RINGMODULATOR :: "ringmodulator",
}

export LoveEffectWaveform ::enum {
	SAWTOOTH :: "sawtooth",
	SINE     :: "sine",
	SQUARE   :: "square",
	TRIANGLE :: "triangle",
}

export LoveEffectSettings :: struct {
	\type  = LoveEffectType.REVERB,
	volume = 1.0,

	-- Chorus...
	waveform: LoveEffectWaveform|none = nil,
	phase:            float|none = nil,
	rate:             float|none = nil,
	depth:            float|none = nil,
	feedback:         float|none = nil,
	delay:            float|none = nil,

	-- Compressor...
	enable:            bool|none = nil,

	-- Distortion...
	gain:             float|none = nil,
	edge:             float|none = nil,
	lowcut:           float|none = nil,
	center:           float|none = nil,
	bandwidth:        float|none = nil,

	-- Echo...
	--delay
	tapdelay:         float|none = nil,
	damping:          float|none = nil,
	--feedback
	spread:           float|none = nil,

	-- Equalizer...
	lowgain:          float|none = nil,
	--lowcut
	lowmidgain:       float|none = nil,
	lowmidfrequency:  float|none = nil,
	lowmidbandwidth:  float|none = nil,
	highmidgain:      float|none = nil,
	highmidfrequency: float|none = nil,
	highmidbandwidth: float|none = nil,
	highgain:         float|none = nil,
	highcut:          float|none = nil,

	-- Flanger...
	--waveform
	--phase
	--rate
	--depth
	--feedback
	--delay

	-- Reverb...
	--gain
	--highgain
	density:          float|none = nil,
	diffusion:        float|none = nil,
	decaytime:        float|none = nil,
	decayhighratio:   float|none = nil,
	earlygain:        float|none = nil,
	earlydelay:       float|none = nil,
	lategain:         float|none = nil,
	latedelay:        float|none = nil,
	roomrolloff:      float|none = nil,
	airabsorption:    float|none = nil,
	highlimit:         bool|none = nil,

	-- Ringmodulator...
	--waveform
	frequency:        float|none = nil,
	--highcut
}

-- Source.
export LoveSource :: struct { using LoveObject }

export loveCloneSource :: (source:LoveSource) -> LoveSource !foreign method "clone"

export loveGetVolume :: (source:LoveSource) -> float      !foreign method "getVolume"
export loveSetVolume :: (source:LoveSource, volume:float) !foreign method "setVolume" -- volume = 0..1
-- @Incomplete:
-- Source:getVolumeLimits
-- Source:setVolumeLimits

export loveGetPitch :: (source:LoveSource) -> float     !foreign method "getPitch"
export loveSetPitch :: (source:LoveSource, pitch:float) !foreign method "setPitch" -- pitch > 0

export loveIsLooping  :: (source:LoveSource) -> bool    !foreign method "isLooping"
export loveSetLooping :: (source:LoveSource, loop:bool) !foreign method "setLooping"

-- @Incomplete:
-- Source:getActiveEffects
-- Source:getChannelCount
-- Source:getDuration
-- Source:getFreeBufferCount
-- Source:getType
-- Source:isPlaying
-- Source:queue
-- Source:tell
-- Source:seek
-- Source:isRelative
-- Source:setRelative
-- Source:getAirAbsorption
-- Source:setAirAbsorption
-- Source:getAttenuationDistances
-- Source:setAttenuationDistances
-- Source:getCone
-- Source:setCone
-- Source:getDirection
-- Source:setDirection
-- Source:getEffect
-- Source:setEffect
-- Source:getFilter
-- Source:setFilter
-- Source:getPosition
-- Source:setPosition
-- Source:getRolloff
-- Source:setRolloff
-- Source:getVelocity
-- Source:setVelocity



----------------------------------------------------------------
-- Functions.
----------------------------------------------------------------

-- Note: sourceType must be STATIC or STREAM for these.
export loveNewSource :: (filename:string,     sourceType:LoveSourceType) -> LoveSource !foreign lua "love and love.audio and love.audio.newSource"
-- export loveNewSource :: (file:LoveFile,       sourceType:LoveSourceType) -> LoveSource !foreign lua "love and love.audio and love.audio.newSource"
-- export loveNewSource :: (decoder:LoveDecoder, sourceType:LoveSourceType) -> LoveSource !foreign lua "love and love.audio and love.audio.newSource"
-- export loveNewSource :: (data:LoveFileData,   sourceType:LoveSourceType) -> LoveSource !foreign lua "love and love.audio and love.audio.newSource"
-- export loveNewSource :: (data:LoveSoundData,  sourceType:LoveSourceType) -> LoveSource !foreign lua "love and love.audio and love.audio.newSource"

export loveNewQueueableSource :: (sampleRate:int, bitdepth:int, channels:int, bufferCount=0) -> LoveSource !foreign lua "love and love.audio and love.audio.newQueueableSource"

export lovePlay  :: (source,...:LoveSource) !foreign lua "love and love.audio and love.audio.play"
export lovePlay  :: (sources:[]LoveSource)  !foreign lua "love and love.audio and love.audio.play"
export lovePause :: (source,...:LoveSource) !foreign lua "love and love.audio and love.audio.pause"
export lovePause :: (sources:[]LoveSource)  !foreign lua "love and love.audio and love.audio.pause"
export loveStop  :: (source,...:LoveSource) !foreign lua "love and love.audio and love.audio.stop"
export loveStop  :: (sources:[]LoveSource)  !foreign lua "love and love.audio and love.audio.stop"

export lovePauseAllSources :: () -> (pausedSources:[]LoveSource) !foreign lua "love and love.audio and love.audio.pause"
export loveStopAllSources  :: ()                                 !foreign lua "love and love.audio and love.audio.stop"

export loveGetMasterVolume :: () -> float    !foreign lua "love and love.audio and love.audio.getVolume"
export loveSetMasterVolume :: (volume:float) !foreign lua "love and love.audio and love.audio.setVolume" -- volume = 0..1

export loveGetActiveSourceCount :: () -> int !foreign lua "love and love.audio and love.audio.getActiveSourceCount"

export loveSetMixWithSystem :: (mix:bool) -> (success:bool) !foreign lua "love and love.audio and love.audio.setMixWithSystem"

export loveGetDistanceModel :: () -> LoveDistanceModel   !foreign lua "love and love.audio and love.audio.getDistanceModel"
export loveSetDistanceModel :: (model:LoveDistanceModel) !foreign lua "love and love.audio and love.audio.setDistanceModel"

export loveGetDopplerScale :: () -> float   !foreign lua "love and love.audio and love.audio.getDopplerScale"
export loveSetDopplerScale :: (scale:float) !foreign lua "love and love.audio and love.audio.setDopplerScale" -- scale > 0

export loveAreSoundEffectsSupported :: () -> bool !foreign lua "love and love.audio and love.audio.isEffectsSupported"
export loveGetMaxEffectsPerScene    :: () -> int  !foreign lua "love and love.audio and love.audio.getMaxSceneEffects"
export loveGetMaxEffectsPerSource   :: () -> int  !foreign lua "love and love.audio and love.audio.getMaxSourceEffects"

export loveGetListenerOrientation :: () -> (forwardX,forwardY,forwardZ:float, upX,upY,upZ:float) !foreign lua "love and love.audio and love.audio.getOrientation"
export loveSetListenerOrientation :: (forwardX,forwardY,forwardZ:float, upX,upY,upZ:float)       !foreign lua "love and love.audio and love.audio.setOrientation"
export loveGetListenerPosition    :: () -> (x,y,z:float) !foreign lua "love and love.audio and love.audio.getPosition"
export loveSetListenerPosition    :: (x,y,z:float)       !foreign lua "love and love.audio and love.audio.setPosition"
export loveGetListenerVelocity    :: () -> (x,y,z:float) !foreign lua "love and love.audio and love.audio.getVelocity"
export loveSetListenerVelocity    :: (x,y,z:float)       !foreign lua "love and love.audio and love.audio.setVelocity"

export loveGetEffectDefinition :: (name:string)                              -> LoveEffectSettings !foreign lua "love and love.audio and love.audio.getEffect"
export loveDefineEffect        :: (name:string, settings:LoveEffectSettings) -> (success:bool)     !foreign lua "love and love.audio and love.audio.setEffect"
export loveEnableEffect        :: (name:string, enable=true)                 -> (success:bool)     !foreign lua "love and love.audio and love.audio.setEffect"

export loveGetActiveEffects :: () -> (names:[]string) !foreign lua "love and love.audio and love.audio.getActiveEffects"

-- export loveGetRecordingDevices :: () -> []RecordingDevice !foreign lua "love and love.audio and love.audio.getRecordingDevices" -- @Incomplete


