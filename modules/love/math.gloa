--[[============================================================
--=
--=  LÃ–VE bindings (love2d.org)
--=  love.math
--=
--=  Supported versions: 11.3
--=
--==============================================================

	bytesToColor, colorToBytes
	gammaToLinear, linearToGamma
	getRandomSeed, setRandomSeed
	getRandomState, setRandomState
	isConvex
	newBezierCurve
	newRandomGenerator
	newTransform
	noise
	random, randomNormal
	triangulate

	-- Types:
	BezierCurve
	CompressedData
	RandomGenerator
	Transform

--============================================================]]

!import "love/basic"



----------------------------------------------------------------
-- Types and enums.
----------------------------------------------------------------

export BezierCurve :: !foreign struct {
	using Object,

	getControlPoint    :: (curve:BezierCurve, index:int) -> (x,y:float) !foreign method "getControlPoint",
	setControlPoint    :: (curve:BezierCurve, index:int, x,y:float)     !foreign method "setControlPoint",
	insertControlPoint :: (curve:BezierCurve, x,y:float, i=-1)          !foreign method "insertControlPoint",
	removeControlPoint :: (curve:BezierCurve, index:int)                !foreign method "removeControlPoint",

	evaluate :: (curve:BezierCurve, v:float) -> (x,y:float) !foreign method "evaluate",

	getControlPointCount :: (curve:BezierCurve) -> int !foreign method "getControlPointCount",
	getDegree            :: (curve:BezierCurve) -> int !foreign method "getDegree",

	getDerivative :: (curve:BezierCurve)                  -> BezierCurve !foreign method "getDerivative",
	getSegment    :: (curve:BezierCurve, start,end:float) -> BezierCurve !foreign method "getSegment",

	-- points = {x1,y1, x2,y2, ...}
	render :: (curve:BezierCurve,                  depth=5) -> (points:[]float) !foreign method "render",
	render :: (curve:BezierCurve, start,end:float, depth=5) -> (points:[]float) !foreign method "renderSegment",

	curveRotate    :: (curve:BezierCurve, angle:float, ox,oy=0.0) !foreign method "rotate",
	curveScale     :: (curve:BezierCurve, scale:float, ox,oy=0.0) !foreign method "scale",
	curveTranslate :: (curve:BezierCurve, dx,dy:float)            !foreign method "translate",
}

-- @Incomplete:
export CompressedData  :: !foreign struct { using Object }
export RandomGenerator :: !foreign struct { using Object }
export Transform       :: !foreign struct { using Object }



----------------------------------------------------------------
-- Functions.
----------------------------------------------------------------

export bytesToColor :: (br,bg,bb:int)    -> (r,g,b:float)     !foreign lua "love.math.colorFromBytes"
export bytesToColor :: (br,bg,bb,ba:int) -> (r,g,b,a:float)   !foreign lua "love.math.colorFromBytes"
export colorToBytes :: (r,g,b:float)     -> (br,bg,bb:int)    !foreign lua "love.math.colorToBytes"
export colorToBytes :: (r,g,b,a:float)   -> (br,bg,bb,ba:int) !foreign lua "love.math.colorToBytes"

export gammaToLinear :: (gammaR,gammaG,gammaB:float) -> (linearR,linearG,linearB:float) !foreign lua "love.math.gammaToLinear"
export gammaToLinear :: (gammaRgb:[]float)           -> (linearR,linearG,linearB:float) !foreign lua "love.math.gammaToLinear"
export gammaToLinear :: (gammaComponent:float)       -> (linearComponent:float)         !foreign lua "love.math.gammaToLinear"
export linearToGamma :: (linearR,linearG,linearB:float) -> (gammaR,gammaG,gammaB:float) !foreign lua "love.math.linearToGamma"
export linearToGamma :: (linearRgb:[]float)             -> (gammaR,gammaG,gammaB:float) !foreign lua "love.math.linearToGamma"
export linearToGamma :: (linearComponent:float)         -> (gammaComponent:float)       !foreign lua "love.math.linearToGamma"

-- polygonVertices = {x1,y1, x2,y2, x3,y3, ...}
export isConvex :: (polygonVertices:[]float)     -> bool !foreign lua "love.math.isConvex"
export isConvex :: (x1,y1,x2,y2,x3,y3,...:float) -> bool !foreign lua "love.math.isConvex"

-- polygonVertices = {x1,y1, x2,y2, x3,y3, ...}
-- triangles       = {{x1,y1, x2,y2, x3,y3}, {x1,y1, x2,y2, x3,y3}, ...}
export triangulate :: (polygonVertices:[]float)     -> (triangles:[][]float) !foreign lua "love.math.triangulate"
export triangulate :: (x1,y1,x2,y2,x3,y3,...:float) -> (triangles:[][]float) !foreign lua "love.math.triangulate"

-- vertices = {x1,y1, x2,y2, x3,y3, ...}
export newBezierCurve :: (vertices:[]float)            -> BezierCurve !foreign lua "love.math.newBezierCurve"
export newBezierCurve :: (x1,y1,x2,y2,x3,y3,...:float) -> BezierCurve !foreign lua "love.math.newBezierCurve"

export newTransform :: ()                                                     -> Transform !foreign lua "love.math.newTransform"
export newTransform :: (x,y:float, r=0.0, sx=1.0,sy=sx, ox,oy=0.0, kx,ky=0.0) -> Transform !foreign lua "love.math.newTransform"

export noise :: (x:float)       -> (value:float) !foreign lua "love.math.noise" -- Simplex noise.
export noise :: (x,y:float)     -> (value:float) !foreign lua "love.math.noise" -- Simplex noise.
export noise :: (x,y,z:float)   -> (value:float) !foreign lua "love.math.noise" -- Perlin noise.
export noise :: (x,y,z,w:float) -> (value:float) !foreign lua "love.math.noise" -- Perlin noise.

export random :: (    high:int) -> int !foreign lua "love.math.random" -- Same as random(1, high)
export random :: (low,high:int) -> int !foreign lua "love.math.random"

export random :: (              ) -> float !foreign lua "love.math.random"
export random :: (    high:float) -> float { return high * random() } -- Same as random(0.0, high)
export random :: (low,high:float) -> float { return low + (high-low) * random() }

export randomNormal :: (standardDeviation=1.0, mean=0.0) -> float !foreign lua "love.math.randomNormal"

export getRandomSeed :: () -> (seedLow32Bits,seedHigh32Bits:int) !foreign lua "love.math.getRandomSeed"
export setRandomSeed :: (seed:int)                               !foreign lua "love.math.setRandomSeed" -- The number must be in range 0..(2^53-1)
export setRandomSeed :: (seedLow32Bits,seedHigh32Bits:int)       !foreign lua "love.math.setRandomSeed" -- The numbers must be in range 0..(2^32-1)

export getRandomState :: () -> string   !foreign lua "love.math.getRandomState"
export setRandomState :: (state:string) !foreign lua "love.math.setRandomState"

export newRandomGenerator :: ()                                 -> RandomGenerator !foreign lua "love.math.newRandomGenerator"
export newRandomGenerator :: (seed:int)                         -> RandomGenerator !foreign lua "love.math.newRandomGenerator"
export newRandomGenerator :: (seedLow32Bits,seedHigh32Bits:int) -> RandomGenerator !foreign lua "love.math.newRandomGenerator"
