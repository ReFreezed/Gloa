--
-- Binding generation edits for LÃ–VE 11.3
--



-- Moves
----------------------------------------------------------------

move Drawable graphics
move ByteData data



-- Enums
----------------------------------------------------------------

rename audio.DistanceModel.EXPONENTCLAMPED EXPONENT_CLAMPED
rename audio.DistanceModel.INVERSECLAMPED  INVERSE_CLAMPED
rename audio.DistanceModel.LINEARCLAMPED   LINEAR_CLAMPED

rename audio.EffectType.RINGMODULATOR RING_MODULATOR

rename event.Event.DIRECTORYDROPPED DIRECTORY_DROPPED
rename event.Event.FILEDROPPED      FILE_DROPPED
rename event.Event.GAMEPADAXIS      GAMEPAD_AXIS
rename event.Event.GAMEPADPRESSED   GAMEPAD_PRESSED
rename event.Event.GAMEPADRELEASED  GAMEPAD_RELEASED
rename event.Event.JOYSTICKADDED    JOYSTICK_ADDED
rename event.Event.JOYSTICKAXIS     JOYSTICK_AXIS
rename event.Event.JOYSTICKHAT      JOYSTICK_HAT
rename event.Event.JOYSTICKPRESSED  JOYSTICK_PRESSED
rename event.Event.JOYSTICKRELEASED JOYSTICK_RELEASED
rename event.Event.JOYSTICKREMOVED  JOYSTICK_REMOVED
rename event.Event.KEYPRESSED       KEY_PRESSED
rename event.Event.KEYRELEASED      KEY_RELEASED
rename event.Event.LOWMEMORY        LOW_MEMORY
rename event.Event.MOUSEFOCUS       MOUSE_FOCUS
rename event.Event.MOUSEMOVED       MOUSE_MOVED
rename event.Event.MOUSEPRESSED     MOUSE_PRESSED
rename event.Event.MOUSERELEASED    MOUSE_RELEASED
rename event.Event.TEXTEDITED       TEXT_EDITED
rename event.Event.TEXTINPUT        TEXT_INPUT
rename event.Event.THREADERROR      THREAD_ERROR
rename event.Event.TOUCHMOVED       TOUCH_MOVED
rename event.Event.TOUCHPRESSED     TOUCH_PRESSED
rename event.Event.TOUCHRELEASED    TOUCH_RELEASED
rename event.Event.WHEELMOVED       WHEEL_MOVED
-- These have been replaced with non-abbreviated names.
delete event.Event.F
delete event.Event.JP
delete event.Event.JR
delete event.Event.KP
delete event.Event.KR
delete event.Event.MP
delete event.Event.MR
delete event.Event.Q

rename filesystem.FileMode.A APPEND
rename filesystem.FileMode.C CLOSED
rename filesystem.FileMode.R READ
rename filesystem.FileMode.W WRITE

rename graphics.AreaSpreadDistribution.BORDERELLIPSE   BORDER_ELLIPSE
rename graphics.AreaSpreadDistribution.BORDERRECTANGLE BORDER_RECTANGLE

-- These just look weird no matter what! :S
-- rename graphics.BlendAlphaMode.ALPHA_MULTIPLY ALPHAMULTIPLY
-- rename graphics.BlendAlphaMode.PRE_MULTIPLIED PREMULTIPLIED

-- These have been replaced with shorter names.
delete graphics.BlendMode.ADDITIVE
delete graphics.BlendMode.MULTIPLICATIVE
delete graphics.BlendMode.PREMULTIPLIED
delete graphics.BlendMode.SUBTRACTIVE

rename graphics.GraphicsFeature.CLAMPZERO          CLAMP_ZERO
rename graphics.GraphicsFeature.FULLNPOT           FULL_NPOT
rename graphics.GraphicsFeature.HDRCANVAS          HDR_CANVAS
rename graphics.GraphicsFeature.MULTICANVAS        MULTI_CANVAS
rename graphics.GraphicsFeature.MULTICANVASFORMATS MULTI_CANVAS_FORMATS
rename graphics.GraphicsFeature.PIXELEFFECT        PIXEL_EFFECT
rename graphics.GraphicsFeature.PIXELSHADERHIGHP   PIXEL_SHADER_HIGH_P
rename graphics.GraphicsFeature.SHADERDERIVATIVES  SHADER_DERIVATIVES

rename graphics.GraphicsLimit.CANVASFSAA        CANVAS_FSAA
rename graphics.GraphicsLimit.CANVASMSAA        CANVAS_MSAA
rename graphics.GraphicsLimit.CUBETEXTURESIZE   CUBE_TEXTURE_SIZE
rename graphics.GraphicsLimit.MULTICANVAS       MULTI_CANVAS
rename graphics.GraphicsLimit.POINTSIZE         POINT_SIZE
rename graphics.GraphicsLimit.TEXTURELAYERS     TEXTURE_LAYERS
rename graphics.GraphicsLimit.TEXTURESIZE       TEXTURE_SIZE
rename graphics.GraphicsLimit.VOLUMETEXTURESIZE VOLUME_TEXTURE_SIZE

-- Avoid parsing error!
rename graphics.TextureType.2D TWOD

rename graphics.WrapMode.CLAMPZERO      CLAMP_ZERO
rename graphics.WrapMode.MIRROREDREPEAT MIRRORED_REPEAT

rename joystick.GamepadAxis.LEFTX        LEFT_X
rename joystick.GamepadAxis.LEFTY        LEFT_Y
rename joystick.GamepadAxis.RIGHTX       RIGHT_X
rename joystick.GamepadAxis.RIGHTY       RIGHT_Y
rename joystick.GamepadAxis.TRIGGERLEFT  TRIGGER_LEFT
rename joystick.GamepadAxis.TRIGGERRIGHT TRIGGER_RIGHT
rename joystick.GamepadButton.DPDOWN        DPAD_DOWN
rename joystick.GamepadButton.DPLEFT        DPAD_LEFT
rename joystick.GamepadButton.DPRIGHT       DPAD_RIGHT
rename joystick.GamepadButton.DPUP          DPAD_UP
rename joystick.GamepadButton.LEFTSHOULDER  LEFT_SHOULDER
rename joystick.GamepadButton.LEFTSTICK     LEFT_STICK
rename joystick.GamepadButton.RIGHTSHOULDER RIGHT_SHOULDER
rename joystick.GamepadButton.RIGHTSTICK    RIGHT_STICK

rename joystick.JoystickHat.C  CENTER
rename joystick.JoystickHat.D  DOWN
rename joystick.JoystickHat.L  LEFT
rename joystick.JoystickHat.LD LEFT_DOWN
rename joystick.JoystickHat.LU LEFT_UP
rename joystick.JoystickHat.R  RIGHT
rename joystick.JoystickHat.RD RIGHT_DOWN
rename joystick.JoystickHat.RU RIGHT_UP
rename joystick.JoystickHat.U  UP

rename mouse.CursorType.IBEAM     I_BEAM
rename mouse.CursorType.SIZEALL   SIZE_ALL
rename mouse.CursorType.SIZENESW  SIZE_NE_SW
rename mouse.CursorType.SIZENS    SIZE_VERTICAL
rename mouse.CursorType.SIZENWSE  SIZE_NW_SE
rename mouse.CursorType.SIZEWE    SIZE_HORIZONTAL
rename mouse.CursorType.WAITARROW WAIT_ARROW

rename system.PowerState.NOBATTERY NO_BATTERY



-- Edits/additions
----------------------------------------------------------------

-- Missing from love_api:
add Object  release :: (self:Object) -> (success:bool)                 !foreign method "release"
add Object  type    :: (self:Object) -> (name:ObjectName)              !foreign method "type"
add Object  typeOf  :: (self:Object, name:ObjectName) -> (isType:bool) !foreign method "typeOf"

-- Missing from love_api:
add Data  clone         :: (self:Data) -> Data               !foreign method "clone"
add Data  getFFIPointer :: (self:Data) -> !import"ffi".Cdata !foreign method "getFFIPointer"
add Data  getPointer    :: (self:Data) -> Pointer            !foreign method "getPointer"
add Data  getSize       :: (self:Data) -> int                !foreign method "getSize"
add Data  getString     :: (self:Data) -> string             !foreign method "getString"

-- audio

delete audio.pause
add audio  export pause :: () -> (sources:[]Source)    !foreign lua "love.audio.pause"
add audio  export pause :: (source:Source, ...:Source) !foreign lua "love.audio.pause"
add audio  export pause :: (sources:[]Source)          !foreign lua "love.audio.pause"
delete audio.play
add audio  export play :: (source,...:Source) !foreign lua "love.audio.play"
add audio  export play :: (sources:[]Source)  !foreign lua "love.audio.play"
delete audio.stop
add audio  export stop :: (...:Source)       !foreign lua "love.audio.stop"
add audio  export stop :: (sources:[]Source) !foreign lua "love.audio.stop"

delete audio.RecordingDevice.getBitDepth
add audio.RecordingDevice  getBitDepth :: (self:RecordingDevice) -> (bits:int) !foreign method "getBitDepth"

settype audio.Source.getActiveEffects.effects []string

add audio  export FilterSettings :: struct {
	type = FilterType.LOWPASS,
	volume:   float,
	highgain: float,
	lowgain:  float,
}
add audio  export EffectSettings :: struct {
	type   = EffectType.REVERB,
	volume = 1.0,

	-- Chorus...
	waveform:EffectWaveform|none = nil,
	phase:            float|none = nil,
	rate:             float|none = nil,
	depth:            float|none = nil,
	feedback:         float|none = nil,
	delay:            float|none = nil,

	-- Compressor...
	enable:            bool|none = nil,

	-- Distortion...
	gain:             float|none = nil,
	edge:             float|none = nil,
	lowcut:           float|none = nil,
	center:           float|none = nil,
	bandwidth:        float|none = nil,

	-- Echo...
	--delay
	tapdelay:         float|none = nil,
	damping:          float|none = nil,
	--feedback
	spread:           float|none = nil,

	-- Equalizer...
	lowgain:          float|none = nil,
	--lowcut
	lowmidgain:       float|none = nil,
	lowmidfrequency:  float|none = nil,
	lowmidbandwidth:  float|none = nil,
	highmidgain:      float|none = nil,
	highmidfrequency: float|none = nil,
	highmidbandwidth: float|none = nil,
	highgain:         float|none = nil,
	highcut:          float|none = nil,

	-- Flanger...
	--waveform
	--phase
	--rate
	--depth
	--feedback
	--delay

	-- Reverb...
	--gain
	--highgain
	density:          float|none = nil,
	diffusion:        float|none = nil,
	decaytime:        float|none = nil,
	decayhighratio:   float|none = nil,
	earlygain:        float|none = nil,
	earlydelay:       float|none = nil,
	lategain:         float|none = nil,
	latedelay:        float|none = nil,
	roomrolloff:      float|none = nil,
	airabsorption:    float|none = nil,
	highlimit:         bool|none = nil,

	-- Ringmodulator...
	--waveform
	frequency:        float|none = nil,
	--highcut
}

settype audio.Source.getFilter.settings FilterSettings|none
settype audio.Source.setFilter.settings FilterSettings

delete audio.Source.getEffect
add audio.Source  getEffect :: (self:Source, name:string)                                -> (filtersettings:FilterSettings|none) !foreign method "getEffect"
add audio.Source  getEffect :: (self:Source, name:string, filtersettings:FilterSettings) -> (filtersettings:FilterSettings|none) !foreign method "getEffect"
settype audio.Source.setEffect.filtersettings FilterSettings

settype audio.getActiveEffects.effects []string

settype audio.getEffect.settings EffectSettings
settype audio.setEffect.settings EffectSettings

settype audio.getRecordingDevices.devices []RecordingDevice

-- data

delete data.compress
delete data.decompress
add data  export compress   :: (container:ContainerType, format:math.CompressedDataFormat, data:string|Data, level:int=-1) -> (compressedData:string|math.CompressedData) !foreign lua "love.data.compress"
add data  export decompress :: (container:ContainerType, compressedData:math.CompressedData)                 -> (decompressedData:string|Data) !foreign lua "love.data.decompress"
add data  export decompress :: (container:ContainerType, format:math.CompressedDataFormat, data:string|Data) -> (decompressedData:string|Data) !foreign lua "love.data.decompress"
delete data.encode
delete data.decode
add data  export encode :: (container:ContainerType, format:EncodeFormat, data:string|Data, linelength:int=0) -> (encoded:string|ByteData) !foreign lua "love.data.encode"
add data  export decode :: (container:ContainerType, format:EncodeFormat, data:string|Data) -> (decoded:string|ByteData) !foreign lua "love.data.decode"
delete data.pack
delete data.unpack
add data  export pack   :: (container:ContainerType, format:string, v1,...:int|float|bool|string) -> (data:string|Data) !foreign lua "love.data.pack"
add data  export unpack :: (format:string, data:string|Data, pos:int=1) -> (v1,...:int|float|bool|string--[[last value is index:int]]) !foreign lua "love.data.unpack"

delete data.newByteData
add data  export newByteData :: (dataString:string)                                -> (byteData:ByteData) !foreign lua "love.data.newByteData"
add data  export newByteData :: (data:Data, offset=0, size=0--[[data.getSize!()]]) -> (byteData:ByteData) !foreign lua "love.data.newByteData"
add data  export newByteData :: (size:int)                                         -> (byteData:ByteData) !foreign lua "love.data.newByteData"

-- event

delete event.poll
add event  export poll :: () -> (iter:(_1,_2:none)->(n:event.Event, a,b,c,d,e,f:Variant)) !foreign lua "love.event.poll"

delete event.push
add event  export push :: (n:Event, ...:Variant) !foreign lua "love.event.push"

delete event.quit
add event  export quit :: (exitstatus:int=0) !foreign lua "love.event.quit"
add event  export restart :: () !foreign lua "function() love.event.quit'restart' end"

-- filesystem

add filesystem  export DroppedFile :: !foreign struct { using File }

delete filesystem.append
add filesystem  export append :: (name:Filename, data:string|Data)           -> (success:bool, errormsg:string) !foreign lua "love.filesystem.append"
add filesystem  export append :: (name:Filename, data:string|Data, size:int) -> (success:bool, errormsg:string) !foreign lua "love.filesystem.append"

delete filesystem.getDirectoryItems
add filesystem  export getDirectoryItems :: (dir:Filename)                               -> (files:[]Filename) !foreign lua "love.filesystem.getDirectoryItems"
add filesystem  export getDirectoryItems :: (dir:Filename, callback:(filename:Filename)) -> (files:[]Filename) !foreign lua "love.filesystem.getDirectoryItems"

delete filesystem.getInfo
add filesystem  export FileInfo :: struct { type=FileType.FILE, size:int|none=nil, modtime:int|none=nil }
add filesystem  export getInfo :: (path:Filename)                                   -> (info:FileInfo|none) !foreign lua "love.filesystem.getInfo"
add filesystem  export getInfo :: (path:Filename, fileType:FileType)                -> (info:FileInfo|none) !foreign lua "love.filesystem.getInfo"
add filesystem  export getInfo :: (path:Filename, info:FileInfo)                    -> (info:FileInfo|none) !foreign lua "love.filesystem.getInfo"
add filesystem  export getInfo :: (path:Filename, fileType:FileType, info:FileInfo) -> (info:FileInfo|none) !foreign lua "love.filesystem.getInfo"

delete filesystem.lines
add filesystem  export lines :: (name:Filename) -> (iterator:(_1,_2:none)->(line:string|none), _1,_2:none) !foreign lua "love.filesystem.lines"

delete filesystem.load
add filesystem  export load :: (name:Filename, $FunctionSignature:Type) -> (chunk:FunctionSignature, errormsg:string) !foreign lua "love.filesystem.load"

delete filesystem.read
add filesystem  export read :: (name:Filename)           -> (contents:string|none, sizeOrError:int|string) !foreign lua "love.filesystem.read"
add filesystem  export read :: (name:Filename, size:int) -> (contents:string|none, sizeOrError:int|string) !foreign lua "love.filesystem.read"
add filesystem  export read :: (container:data.ContainerType, name:Filename)           -> (contents:string|FileData|none, sizeOrError:int|string) !foreign lua "love.filesystem.read"
add filesystem  export read :: (container:data.ContainerType, name:Filename, size:int) -> (contents:string|FileData|none, sizeOrError:int|string) !foreign lua "love.filesystem.read"

delete filesystem.write
add filesystem  export write :: (name:Filename, data:string|Data)           -> (success:bool, message:string) !foreign lua "love.filesystem.write"
add filesystem  export write :: (name:Filename, data:string|Data, size:int) -> (success:bool, message:string) !foreign lua "love.filesystem.write"

delete filesystem.File.lines
add filesystem.File  lines :: (self:File) -> (iterator:(_1,_2:none)->(line:string|none), _1,_2:none) !foreign method "lines"

delete filesystem.File.read
add filesystem.File  read :: (self:File)            -> (contents:string, size:int) !foreign method "read"
add filesystem.File  read :: (self:File, bytes:int) -> (contents:string, size:int) !foreign method "read"
add filesystem.File  read :: (self:File, container:data.ContainerType)            -> (contents:string|FileData, size:int) !foreign method "read"
add filesystem.File  read :: (self:File, container:data.ContainerType, bytes:int) -> (contents:string|FileData, size:int) !foreign method "read"

delete filesystem.File.write
add filesystem.File  write :: (self:File, data:string|Data)           -> (success:bool, err:string) !foreign method "write"
add filesystem.File  write :: (self:File, data:string|Data, size:int) -> (success:bool, err:string) !foreign method "write"

delete filesystem.setIdentity
add filesystem  export setIdentity :: (name:Filename, appendToPath=false) !foreign lua "love.filesystem.setIdentity"

-- font

-- (See the generator script. All font stuff is missing from love_api for whatever reason.)

-- graphics

-- Missing from love_api:
add graphics  export IndexDataType :: enum {
	UINT16 :: "uint16",
	UINT32 :: "uint32",
}
add graphics  export MipmapMode :: enum {
	NONE   :: "none",
	MANUAL :: "manual",
	AUTO   :: "auto",
}
add graphics  export PixelFormat :: enum {
	-- Normal color formats.
	NORMAL           :: "normal",
	R8               :: "r8",
	RG8              :: "rg8",
	RGBA8            :: "rgba8",
	SRGBA8           :: "srgba8",
	RGBA16           :: "rgba16",
	R16F             :: "r16f",
	RG16F            :: "rg16f",
	RGBA16F          :: "rgba16f",
	R32F             :: "r32f",
	RG32F            :: "rg32f",
	RGBA32F          :: "rgba32f",
	RGBA4            :: "rgba4",
	RGB5A1           :: "rgb5a1",
	RGB565           :: "rgb565",
	RGB10A2          :: "rgb10a2",
	RG11B10F         :: "rg11b10f",
	-- Depth/stencil formats.
	STENCIL8         :: "stencil8",
	DEPTH16          :: "depth16",
	DEPTH24          :: "depth24",
	DEPTH32F         :: "depth32f",
	DEPTH24STENCIL8  :: "depth24stencil8",
	DEPTH32FSTENCIL8 :: "depth32fstencil8",
	-- Compressed formats, desktop GPUs.
	DXT1             :: "DXT1",
	DXT3             :: "DXT3",
	DXT5             :: "DXT5",
	BC4              :: "BC4",
	BC4S             :: "BC4s",
	BC5              :: "BC5",
	BC5S             :: "BC5s",
	BC6H             :: "BC6h",
	BC6HS            :: "BC6hs",
	BC7              :: "BC7",
	-- Compressed formats, mobile GPUs.
	ETC1             :: "ETC1",
	ETC2RGB          :: "ETC2rgb",
	ETC2RGBA         :: "ETC2rgba",
	ETC2RGBA1        :: "ETC2rgba1",
	EACR             :: "EACr",
	EACRS            :: "EACrs",
	EACRG            :: "EACrg",
	EACRGS           :: "EACrgs",
	PVR1RGB2         :: "PVR1rgb2",
	PVR1RGB4         :: "PVR1rgb4",
	PVR1RGBA2        :: "PVR1rgba2",
	PVR1RGBA4        :: "PVR1rgba4",
	ASTC4X4          :: "ASTC4x4",
	ASTC5X4          :: "ASTC5x4",
	ASTC5X5          :: "ASTC5x5",
	ASTC6X5          :: "ASTC6x5",
	ASTC6X6          :: "ASTC6x6",
	ASTC8X5          :: "ASTC8x5",
	ASTC8X6          :: "ASTC8x6",
	ASTC8X8          :: "ASTC8x8",
	ASTC10X5         :: "ASTC10x5",
	ASTC10X6         :: "ASTC10x6",
	ASTC10X8         :: "ASTC10x8",
	ASTC10X10        :: "ASTC10x10",
	ASTC12X10        :: "ASTC12x10",
	ASTC12X12        :: "ASTC12x12",
}
add graphics  export CanvasFormat  :: PixelFormat
add graphics  export TextureFormat :: CanvasFormat -- Is this correct? The wiki may be messed up.
add graphics  export VertexAttributeStep :: enum {
	PER_VERTEX   :: "pervertex",
	PER_INSTANCE :: "perinstance",
}
add graphics  export VertexWinding :: enum {
	CLOCKWISE         :: "cw",
	COUNTER_CLOCKWISE :: "ccw",
}

delete graphics.Canvas.newImageData
add graphics.Canvas  newImageData :: (self:Canvas)                                                   -> (data:image.ImageData) !foreign method "newImageData"
add graphics.Canvas  newImageData :: (self:Canvas, slice:int, mipmap:int, x,y:int, width,height:int) -> (data:image.ImageData) !foreign method "newImageData"

delete graphics.Canvas.renderTo
add graphics.Canvas  renderTo :: (self:Canvas, func:()) !foreign method "renderTo"

delete graphics.Canvas.getFilter
delete graphics.Canvas.setFilter
add graphics.Canvas  getFilter :: (self:Canvas) -> (min,mag:FilterMode, anisotropy:int) !foreign method "getFilter"
add graphics.Canvas  setFilter :: (self:Canvas, min,mag:FilterMode, anisotropy:int=1)   !foreign method "setFilter"

delete graphics.Image.getFilter
delete graphics.Image.setFilter
add graphics.Image  getFilter :: (self:Image) -> (min,mag:FilterMode, anisotropy:int) !foreign method "getFilter"
add graphics.Image  setFilter :: (self:Image, min,mag:FilterMode, anisotropy:int=1)   !foreign method "setFilter"

delete graphics.Image.replacePixels
add graphics.Image  replacePixels :: (self:Image, data:image.ImageData, slice:int, mipmap:int=1, x:int=0, y:int=0, reloadMipmaps:bool=false--[[true if image was created with mipmaps]]) !foreign method "replacePixels"

delete graphics.Mesh.getVertex
delete graphics.Mesh.setVertex
add graphics.Mesh  getCustomVertex   :: (self:Mesh, index:int) -> (attributeComponent,...:float) !foreign method "getVertex"
add graphics.Mesh  getStandardVertex :: (self:Mesh, index:int) -> (x,y,u,v:float, r,g,b,a:float) !foreign method "getVertex"

delete graphics.Mesh.setVertices
add graphics.Mesh  setVertices :: (self:Mesh, vertices:[]Vertex, startVertex=1) !foreign method "setVertices"
add graphics.Mesh  setVertices :: (self:Mesh, data:Data,         startvertex=1) !foreign method "setVertices"

delete graphics.Mesh.getVertexAttribute
delete graphics.Mesh.setVertexAttribute
add graphics.Mesh  getVertexAttribute :: (self:Mesh, vertexIndex:int, attributeIndex:int) -> (value1,...:float) !foreign method "getVertexAttribute"
add graphics.Mesh  setVertexAttribute :: (self:Mesh, vertexIndex:int, attributeIndex:int, value1,...:float)     !foreign method "setVertexAttribute"

delete graphics.Mesh.attachAttribute
add graphics.Mesh  attachAttribute :: (self:Mesh, name:string, mesh:Mesh, step=VertexAttributeStep.PER_VERTEX, attachName:string=name) !foreign method "attachAttribute"

settype graphics.Mesh.getVertexFormat.format []VertexAttribute

delete graphics.Mesh.setVertexMap
add delete graphics.Mesh  setVertexMap :: (self:Mesh, map:[]int) !foreign method "setVertexMap"
add delete graphics.Mesh  setVertexMap :: (self:Mesh, vi1,vi2,vi3,...:int) !foreign method "setVertexMap"
add delete graphics.Mesh  setVertexMap :: (self:Mesh, data:Data, dataType:IndexDataType) !foreign method "setVertexMap"
settype graphics.Mesh.getVertexMap.map ([]int)|none

settype graphics.ParticleSystem.getQuads.quads []Quad
settype graphics.ParticleSystem.setQuads.quads []Quad

settype graphics.Text.add.coloredtext  [](string|Color)
settype graphics.Text.addf.coloredtext [](string|Color)
settype graphics.Text.set.coloredtext  [](string|Color)
settype graphics.Text.setf.coloredtext [](string|Color)
settype graphics.print.coloredtext     [](string|Color)
settype graphics.printf.coloredtext    [](string|Color)

delete graphics.Shader.sendColor
delete graphics.Shader.send
add graphics.Shader  sendColor :: (self:Shader, name:string, color,...:[]float) !foreign method "sendColor"
add graphics.Shader  send :: (self:Shader, name:string, number,...:int)             !foreign method "send"
add graphics.Shader  send :: (self:Shader, name:string, number,...:float)           !foreign method "send"
add graphics.Shader  send :: (self:Shader, name:string, vectorOrMatrix,...:[]float) !foreign method "send"
add graphics.Shader  send :: (self:Shader, name:string, matrix,...:[][]float)       !foreign method "send"
add graphics.Shader  send :: (self:Shader, name:string, texture:Texture)            !foreign method "send"
add graphics.Shader  send :: (self:Shader, name:string, boolean,...:bool)           !foreign method "send"
add graphics.Shader  send :: (self:Shader, name:string, layout:math.MatrixLayout, matrix,...:[][]float) !foreign method "send"
add graphics.Shader  send :: (self:Shader, name:string, layout:math.MatrixLayout, matrix,...:[]float)   !foreign method "send"
add graphics.Shader  send :: (self:Shader, name:string, data:Data, offset:int=0)         !foreign method "send"
add graphics.Shader  send :: (self:Shader, name:string, data:Data, offset:int, size:int) !foreign method "send"
add graphics.Shader  send :: (self:Shader, name:string, data:Data, layout:math.MatrixLayout, offset:int=0)         !foreign method "send"
add graphics.Shader  send :: (self:Shader, name:string, data:Data, layout:math.MatrixLayout, offset:int, size:int) !foreign method "send"

delete graphics.captureScreenshot
add graphics  export captureScreenshot :: (filename:Filename)               !foreign lua "love.graphics.captureScreenshot"
add graphics  export captureScreenshot :: (callback:(data:image.ImageData)) !foreign lua "love.graphics.captureScreenshot"
add graphics  export captureScreenshot :: (channel:thread.Channel)          !foreign lua "love.graphics.captureScreenshot"

delete graphics.clear
add graphics  export clear :: ()                                                                               !foreign lua "love.graphics.clear"
add graphics  export clear :: (r,g,b:float, a:float=1, clearStencil:bool|int=true, clearDepth:bool|float=true) !foreign lua "love.graphics.clear"
add graphics  export clear :: (clearColor:bool,        clearStencil:bool|int,      clearDepth:bool|float     ) !foreign lua "love.graphics.clear"
-- @Compiler @Incomplete: Arguments after vararg?
-- add graphics  export clear :: (color,...:[]float,      clearStencil:bool|int=true, clearDepth:bool|float=true) !foreign lua "love.graphics.clear"

delete graphics.newCanvas
add graphics  export CanvasSettings :: struct { type=TextureType.TWOD, format=PixelFormat.NORMAL, readable:bool|none=nil, msaa=0, dpiscale:int--[[Correct?]]|none=nil, mipmaps=CanvasMipmapMode.NONE }
add graphics  export newCanvas :: ()                                                           -> (canvas:Canvas) !foreign lua "love.graphics.newCanvas"
add graphics  export newCanvas :: (width:int, height:int)                                      -> (canvas:Canvas) !foreign lua "love.graphics.newCanvas"
add graphics  export newCanvas :: (width:int, height:int, settings:CanvasSettings)             -> (canvas:Canvas) !foreign lua "love.graphics.newCanvas"
add graphics  export newCanvas :: (width:int, height:int, layers:int, settings:CanvasSettings) -> (canvas:Canvas) !foreign lua "love.graphics.newCanvas"
add graphics  export newCanvas :: (width:int, height:int, format:CanvasFormat, msaa:int=0)     -> (canvas:Canvas) !foreign lua "love.graphics.newCanvas"

delete graphics.newShader
add graphics  export newShader :: (codeOrFilename:string)               -> (shader:Shader) !foreign lua "love.graphics.newShader"
add graphics  export newShader :: (pixelCode:string, vertexCode:string) -> (shader:Shader) !foreign lua "love.graphics.newShader"

delete graphics.stencil
add graphics  export stencil :: (stencilfunction:(), action:StencilAction=cast(StencilAction)"replace", value:int=1, keepvalues:bool=false) !foreign lua "love.graphics.stencil"

delete graphics.Video.setSource
add graphics.Video  setSource :: (self:Video)                      !foreign method "setSource"
add graphics.Video  setSource :: (self:Video, source:audio.Source) !foreign method "setSource"

add graphics  local ImageFile           :: Filename|filesystem.FileData|image.ImageData|image.CompressedImageData
add graphics  local ImageFileOrByteData :: Filename|filesystem.FileData|image.ImageData|image.CompressedImageData|data.ByteData
add graphics  local ImageFileOrFile     :: Filename|filesystem.FileData|image.ImageData|image.CompressedImageData|filesystem.File
delete graphics.newImage
add graphics  export ImageFlags :: struct { linear=false, mipmaps:bool|[]ImageFileOrByteData=false }
add graphics  export newImage :: (filename:Filename)                              -> (image:Image) !foreign lua "love.graphics.newImage"
add graphics  export newImage :: (imageData:image.ImageData)                      -> (image:Image) !foreign lua "love.graphics.newImage"
add graphics  export newImage :: (compressedImageData:image.CompressedImageData)  -> (image:Image) !foreign lua "love.graphics.newImage"
add graphics  export newImage :: (filename:ImageFileOrByteData, flags:ImageFlags) -> (image:Image) !foreign lua "love.graphics.newImage"
add graphics  export newImage :: (filename:ImageFile, format:TextureFormat)       -> (image:Image) !foreign lua "love.graphics.newImage"
delete graphics.newArrayImage
add graphics  export ArrayImageSettings :: struct { mipmaps=false, linear=false, dpiscale:int--[[Correct?]]=1 }
add graphics  export ArrayImageSlices   :: ([]ImageFileOrFile) | ([][]ImageFileOrFile)
add graphics  export newArrayImage :: (slices:ArrayImageSlices)                              -> (image:Image) !foreign lua "love.graphics.newArrayImage"
add graphics  export newArrayImage :: (slices:ArrayImageSlices, settings:ArrayImageSettings) -> (image:Image) !foreign lua "love.graphics.newArrayImage"
delete graphics.newCubeImage
add graphics  export CubeImageSettings :: struct { mipmaps=false, linear=false }
add graphics  export newCubeImage :: (file:ImageFileOrFile)                                -> (image:Image) !foreign lua "love.graphics.newCubeImage"
add graphics  export newCubeImage :: (file:ImageFileOrFile, settings:CubeImageSettings)    -> (image:Image) !foreign lua "love.graphics.newCubeImage"
add graphics  export newCubeImage :: (faces:[]ImageFileOrFile)                             -> (image:Image) !foreign lua "love.graphics.newCubeImage"
add graphics  export newCubeImage :: (faces:[]ImageFileOrFile, settings:CubeImageSettings) -> (image:Image) !foreign lua "love.graphics.newCubeImage"
delete graphics.newVolumeImage
add graphics  export VolumeImageSettings :: struct { mipmaps=false, linear=false }
add graphics  export VolumeImageLayers   :: ([]ImageFileOrFile) | ([][]ImageFileOrFile)
add graphics  export newVolumeImage :: (layers:VolumeImageLayers)                               -> (image:Image) !foreign lua "love.graphics.newVolumeImage"
add graphics  export newVolumeImage :: (layers:VolumeImageLayers, settings:VolumeImageSettings) -> (image:Image) !foreign lua "love.graphics.newVolumeImage"

delete graphics.newMesh
add graphics  export VertexAttribute :: [](string|int) -- Expected format: {name:string, dataType:string, components:int}
add graphics  export Vertex          :: []float
add graphics  export StandardVertex  :: Vertex -- Expected format: {x,y[,u=0,v=0,r=1,g=1,b=1,a=1]}
add graphics  export CustomVertex    :: Vertex -- Expected format: {attributeComponent1, ...}
add graphics  export newMesh :: (vertices:[]StandardVertex,                               mode=MeshDrawMode.FAN, usage=SpriteBatchUsage.DYNAMIC) -> (mesh:Mesh) !foreign lua "love.graphics.newMesh"
add graphics  export newMesh :: (vertexCount:int,                                         mode=MeshDrawMode.FAN, usage=SpriteBatchUsage.DYNAMIC) -> (mesh:Mesh) !foreign lua "love.graphics.newMesh"
add graphics  export newMesh :: (vertexFormat:[]VertexAttribute, vertices:[]CustomVertex, mode=MeshDrawMode.FAN, usage=SpriteBatchUsage.DYNAMIC) -> (mesh:Mesh) !foreign lua "love.graphics.newMesh"
add graphics  export newMesh :: (vertexFormat:[]VertexAttribute, vertexCount:int,         mode=MeshDrawMode.FAN, usage=SpriteBatchUsage.DYNAMIC) -> (mesh:Mesh) !foreign lua "love.graphics.newMesh"
add graphics  export newMesh :: (vertexCount:int, texture:Texture|none,                   mode=MeshDrawMode.FAN)                                 -> (mesh:Mesh) !foreign lua "love.graphics.newMesh"

delete graphics.newText
add graphics  export newText :: (font:Font)              -> (text:Text) !foreign lua "love.graphics.newText"
add graphics  export newText :: (font:Font, text:string) -> (text:Text) !foreign lua "love.graphics.newText"

delete graphics.newVideo
add graphics  export VideoSettings :: struct { audio:bool|none=nil, dpiscale:int--[[Correct?]]|none=nil--[[love.graphics.getDPIScale()]] }
add graphics  export newVideo :: (filename:Filename)                               -> (video:Video) !foreign lua "love.graphics.newVideo"
add graphics  export newVideo :: (filename:Filename, settings:VideoSettings)       -> (video:Video) !foreign lua "love.graphics.newVideo"
add graphics  export newVideo :: (filename:Filename, loadAudio:bool)               -> (video:Video) !foreign lua "love.graphics.newVideo"
add graphics  export newVideo :: (videoStream:video.VideoStream)                   -> (video:Video) !foreign lua "love.graphics.newVideo"
add graphics  export newVideo :: (videoStream:video.VideoStream, loadAudio:bool)   -> (video:Video) !foreign lua "love.graphics.newVideo"

delete graphics.rectangle
add graphics  export rectangle :: (mode:DrawMode, x,y:float, width,height:float)                                  !foreign lua "love.graphics.rectangle"
add graphics  export rectangle :: (mode:DrawMode, x,y:float, width,height:float, rx:float,ry:float=rx)            !foreign lua "love.graphics.rectangle"
add graphics  export rectangle :: (mode:DrawMode, x,y:float, width,height:float, rx:float,ry:float, segments:int) !foreign lua "love.graphics.rectangle"

delete graphics.newSpriteBatch
add graphics  export newSpriteBatch :: (texture:Texture, maxsprites=1000, usage=SpriteBatchUsage.DYNAMIC) -> (spriteBatch:SpriteBatch) !foreign lua "love.graphics.newSpriteBatch"

delete graphics.points
add graphics  export Point :: []float -- Expected format: {x,y[,r,g,b,a]}
add graphics  export points :: (x,y:float, ...:float) !foreign lua "love.graphics.points"
add graphics  export points :: (points:[]float) !foreign lua "love.graphics.points"
add graphics  export points :: (points:[]Point) !foreign lua "love.graphics.points"

delete graphics.setColor
delete graphics.setBackgroundColor
add graphics  export setColor           :: (red,green,blue:float, alpha=1.0) !foreign lua "love.graphics.setColor"
add graphics  export setColor           :: (color:Color)                     !foreign lua "love.graphics.setColor"
add graphics  export setBackgroundColor :: (red,green,blue:float, alpha=1.0) !foreign lua "love.graphics.setBackgroundColor"
add graphics  export setBackgroundColor :: (color:Color)                     !foreign lua "love.graphics.setBackgroundColor"

delete graphics.setBlendMode
add graphics  export setBlendMode :: (mode:BlendMode, alphaMode=BlendAlphaMode.ALPHAMULTIPLY) !foreign lua "love.graphics.setBlendMode"

delete graphics.setCanvas
add graphics  export CanvasSetup :: struct { stencil=false, depth=false, depthstencil:Canvas|none=nil, !value:Canvas }
add graphics  export setCanvas :: ()                                     !foreign lua "love.graphics.setCanvas"
add graphics  export setCanvas :: (canvas:Canvas, mipmap=1)              !foreign lua "love.graphics.setCanvas"
add graphics  export setCanvas :: (canvas:Canvas, slice:int, mipmap:int) !foreign lua "love.graphics.setCanvas"
add graphics  export setCanvas :: (canvas1,canvas2,...:Canvas)           !foreign lua "love.graphics.setCanvas"
add graphics  export setCanvas :: (setup:CanvasSetup)                    !foreign lua "love.graphics.setCanvas"

settype graphics.Font.getWrap.wrappedtext []string
settype graphics.Image.getFlags.flags ImageFlags
settype graphics.discard.discardcolors []bool

add graphics  export SupportedCanvasFormats    :: !foreign struct { !key: CanvasFormat,    !value: bool }
add graphics  export SupportedPixelFormats     :: !foreign struct { !key: PixelFormat,     !value: bool }
add graphics  export SupportedGraphicsFeatures :: !foreign struct { !key: GraphicsFeature, !value: bool }
add graphics  export SupportedTextureTypes     :: !foreign struct { !key: TextureType,     !value: bool }
add graphics  export SystemLimits              :: !foreign struct { !key: GraphicsLimit,   !value: int  }
settype graphics.getCanvasFormats.formats     SupportedCanvasFormats
settype graphics.getImageFormats.formats      SupportedPixelFormats
settype graphics.getSupported.features        SupportedGraphicsFeatures
settype graphics.getTextureTypes.texturetypes SupportedTextureTypes
settype graphics.getSystemLimits.limits       SystemLimits

add graphics  export Stats :: struct { drawcalls:int, canvasswitches:int, texturememory:int, images:int, canvases:int, fonts:int, shaderswitches:int, drawcallsbatched:int }
settype graphics.getStats.stats Stats

settype graphics.line.points      []float
settype graphics.polygon.vertices []float

-- image

delete image.ImageData.encode
add image.ImageData  encode :: (self:ImageData, format:ImageFormat)                    -> (filedata:filesystem.FileData) !foreign method "encode"
add image.ImageData  encode :: (self:ImageData, format:ImageFormat, filename:Filename) -> (filedata:filesystem.FileData) !foreign method "encode"
add image.ImageData  encode :: (self:ImageData, outFile:Filename)                     !foreign method "encode"
add image.ImageData  encode :: (self:ImageData, outFile:Filename, format:ImageFormat) !foreign method "encode"

delete image.ImageData.mapPixel
add image.ImageData  _PixelFunction :: (x,y:int, r,g,b,a:float)
add image.ImageData  mapPixel :: (self:ImageData, pixelFunction:_PixelFunction, x:int=0, y:int=0, width:int=0--[[ImageData:getWidth()]], height:int=0--[[ImageData:getHeight()]]) !foreign method "mapPixel"
add image.ImageData  mapPixel :: (self:ImageData, x,y:int, width,height:int, pixelFunction:_PixelFunction) { self.mapPixel!(pixelFunction, x, y, width, height) }

delete image.newImageData
add image  export newImageData :: (width,height:int, format=graphics.PixelFormat.RGBA8)        -> (imageData:ImageData) !foreign lua "love.image.newImageData"
add image  export newImageData :: (width,height:int, format:graphics.PixelFormat, data:string) -> (imageData:ImageData) !foreign lua "love.image.newImageData"
add image  export newImageData :: (width,height:int, data:string)                              -> (imageData:ImageData) !foreign lua "love.image.newImageData"
add image  export newImageData :: (file:Filename|filesystem.FileData)                          -> (imageData:ImageData) !foreign lua "love.image.newImageData"

-- joystick

delete joystick.setGamepadMapping
add joystick  export setGamepadMapping :: (guid:string, button:GamepadButton, inputType:JoystickInputType, inputIndex:int, hatDir:JoystickHat|none=nil) -> (success:bool) !foreign lua "love.joystick.setGamepadMapping"
add joystick  export setGamepadMapping :: (guid:string, axis:GamepadAxis,     inputType:JoystickInputType, inputIndex:int, hatDir:JoystickHat|none=nil) -> (success:bool) !foreign lua "love.joystick.setGamepadMapping"

delete joystick.loadGamepadMappings
add joystick  export loadGamepadMappings :: (filenameOrMappings:string) !foreign lua "love.joystick.loadGamepadMappings"

delete joystick.Joystick.setVibration
add joystick.Joystick  setVibration :: (self:Joystick)                                  -> (success:bool) !foreign method "setVibration"
add joystick.Joystick  setVibration :: (self:Joystick, left,right:float, duration=-1.0) -> (success:bool) !foreign method "setVibration"

settype joystick.getJoysticks.joysticks []Joystick

-- keyboard

delete keyboard.isDown
add keyboard  export isDown :: (key,...:KeyConstant) -> (anyDown:bool) !foreign lua "love.keyboard.isDown"

-- math

delete math.Transform.getMatrix
delete math.Transform.setMatrix
add math.Transform  getMatrix :: (self:Transform) -> (e11,e12,e13,e14,e21,e22,e23,e24,e31,e32,e33,e34,e41,e42,e43,e44:float) !foreign method "getMatrix"
add math.Transform  setMatrix :: (self:Transform,                           e11,e12,e13,e14,e21,e22,e23,e24,e31,e32,e33,e34,e41,e42,e43,e44:float) -> (transform:Transform) !foreign method "setMatrix"
add math.Transform  setMatrix :: (self:Transform, layout:math.MatrixLayout, e11,e12,e13,e14,e21,e22,e23,e24,e31,e32,e33,e34,e41,e42,e43,e44:float) -> (transform:Transform) !foreign method "setMatrix"
add math.Transform  setMatrix :: (self:Transform, layout:math.MatrixLayout, matrix:([]float)|([][]float))                                          -> (transform:Transform) !foreign method "setMatrix"

delete math.colorFromBytes
delete math.colorToBytes
add math  export colorFromBytes :: (rb,gb,bb:int)    -> (r,g,b:float)   !foreign lua "love.math.colorFromBytes"
add math  export colorFromBytes :: (rb,gb,bb,ab:int) -> (r,g,b,a:float) !foreign lua "love.math.colorFromBytes"
add math  export colorToBytes   :: (r,g,b:float)   -> (rb,gb,bb:int)    !foreign lua "love.math.colorToBytes"
add math  export colorToBytes   :: (r,g,b,a:float) -> (rb,gb,bb,ab:int) !foreign lua "love.math.colorToBytes"

delete math.RandomGenerator.random
add math.RandomGenerator  random :: (self:RandomGenerator             ) -> (number:float) !foreign method "random"
add math.RandomGenerator  random :: (self:RandomGenerator,     max:int) -> (number:int)   !foreign method "random"
add math.RandomGenerator  random :: (self:RandomGenerator, min,max:int) -> (number:int)   !foreign method "random"
delete math.random
add math  export random :: (           ) -> (number:float) !foreign lua "love.math.random"
add math  export random :: (    max:int) -> (number:int)   !foreign lua "love.math.random"
add math  export random :: (min,max:int) -> (number:int)   !foreign lua "love.math.random"

settype math.BezierCurve.render.coordinates        []float
settype math.BezierCurve.renderSegment.coordinates []float

settype math.gammaToLinear.color Color
settype math.linearToGamma.color Color

settype math.isConvex.vertices       []float
settype math.newBezierCurve.vertices []float

settype math.triangulate.polygon   []float--[[Correct?]]
settype math.triangulate.triangles [][]float

-- mouse

delete mouse.isDown
add mouse  export isDown :: (button,...:int) -> (anyDown:bool) !foreign lua "love.mouse.isDown"

-- physics

delete physics.World.getCallbacks
delete physics.World.setCallbacks
add physics.World  _Callback          :: (fixture1,fixture2:Fixture, contact:Contact)
add physics.World  _CallbackPostSolve :: (fixture1,fixture2:Fixture, contact:Contact, ...--[[ normalImpulse1,tangentImpulse1, normalImpulse2,tangentImpulse2, ... ]]:float)
add physics.World  getCallbacks :: (self:World) -> (beginContact,endContact,preSolve:_Callback|none, postSolve:_CallbackPostSolve|none) !foreign method "getCallbacks"
add physics.World  setCallbacks :: (self:World, beginContact,endContact,preSolve:_Callback|none, postSolve:_CallbackPostSolve|none)     !foreign method "setCallbacks"

delete physics.World.getContactFilter
delete physics.World.setContactFilter
add physics.World  _ContactFilter :: (fixture1,fixture2:Fixture) -> (doCollide:bool)
add physics.World  getContactFilter :: (self:World) -> (filter:_ContactFilter|none) !foreign method "getContactFilter"
add physics.World  setContactFilter :: (self:World, filter:_ContactFilter|none)     !foreign method "setContactFilter"

delete physics.World.queryBoundingBox
add physics.World  queryBoundingBox :: (self:World, topLeftX,topLeftY,bottomRightX,bottomRightY:float, callback:(fixture:Fixture)->(continueSearch:bool)) !foreign method "queryBoundingBox"

delete physics.newMotorJoint
add physics  export newMotorJoint :: (body1,body2:Body, correctionFactor=0.3, collideConnected=false) -> (joint:MotorJoint) !foreign lua "love.physics.newMotorJoint"

delete physics.newPrismaticJoint
add physics  export newPrismaticJoint :: (body1,body2:Body, x,y:float,         ax,ay:float, collideConnected=false)                     -> (joint:PrismaticJoint) !foreign lua "love.physics.newPrismaticJoint"
add physics  export newPrismaticJoint :: (body1,body2:Body, x1,y1,x2,y2:float, ax,ay:float, collideConnected=false, referenceAngle=0.0) -> (joint:PrismaticJoint) !foreign lua "love.physics.newPrismaticJoint"

delete physics.newWeldJoint
add physics  export newWeldJoint :: (body1,body2:Body, x,y:float,         collideConnected=false)                     -> (joint:WeldJoint) !foreign lua "love.physics.newWeldJoint"
add physics  export newWeldJoint :: (body1,body2:Body, x1,y1,x2,y2:float, collideConnected=false, referenceAngle=0.0) -> (joint:WeldJoint) !foreign lua "love.physics.newWeldJoint"

settype physics.Body.getContacts.contacts  []Contact
settype physics.Body.getFixtures.fixtures  []Fixture
settype physics.Body.getJoints.joints      []Joint
settype physics.World.getBodies.bodies     []Body
settype physics.World.getContacts.contacts []Contact
settype physics.World.getJoints.joints     []Joint

settype physics.newChainShape.points     []float
settype physics.newPolygonShape.vertices []float

-- system

delete system.vibrate
add system  export vibrate :: (seconds=0.5) !foreign lua "love.system.vibrate"

delete system.getPowerInfo
add system  export getPowerInfo :: () -> (state:PowerState, percent:int|none, seconds:float|none) !foreign lua "love.system.getPowerInfo"

-- thread

delete thread.Channel.performAtomic
add thread.Channel  _Function         :: (channel:Channel)
add thread.Channel  _FunctionArgs     :: (channel:Channel, ...--[[args]]:any)
add thread.Channel  _FunctionRets     :: (channel:Channel)                    -> (ret1,...:any)
add thread.Channel  _FunctionArgsRets :: (channel:Channel, ...--[[args]]:any) -> (ret1,...:any)
add thread.Channel  performAtomic :: (self:Channel, func:_Function)                                              !foreign method "performAtomic"
add thread.Channel  performAtomic :: (self:Channel, func:_FunctionArgs,     ...--[[args]]:any)                   !foreign method "performAtomic"
add thread.Channel  performAtomic :: (self:Channel, func:_FunctionRets)                        -> (ret1,...:any) !foreign method "performAtomic"
add thread.Channel  performAtomic :: (self:Channel, func:_FunctionArgsRets, ...--[[args]]:any) -> (ret1,...:any) !foreign method "performAtomic"

delete thread.Thread.start
add thread.Thread  start :: (self:Thread, ...--[[args]]:Variant) !foreign method "start"

delete thread.newThread
add thread  export newThread :: (filenameOrLuaCode:string)     -> (thread:Thread) !foreign lua "love.thread.newThread"
add thread  export newThread :: (fileData:filesystem.FileData) -> (thread:Thread) !foreign lua "love.thread.newThread"

-- touch

settype touch.getTouches.touches []LightUserdata

-- window

-- Missing from love_api:
add window  export DisplayOrientation :: enum {
	LANDSCAPE         :: "landscape",
	LANDSCAPE_FLIPPED :: "landscapeflipped",
	PORTRAIT          :: "portrait",
	PORTRAIT_FLIPPED  :: "portraitflipped",
}

delete window.getDisplayOrientation
add window  export getDisplayOrientation :: ()          -> (orientation:DisplayOrientation) !foreign lua "love.window.getDisplayOrientation"
add window  export getDisplayOrientation :: (index:int) -> (orientation:DisplayOrientation) !foreign lua "love.window.getDisplayOrientation"

add window  export FullscreenMode :: !foreign struct { width:int, height:int }
settype window.getFullscreenModes.modes []FullscreenMode

add window  export WindowFlags :: struct { fullscreen=false, fullscreentype=FullscreenType.DESKTOP, vsync=1, msaa=0, resizable=false, borderless=false, centered=true, display=1, minwidth=1, minheight=1, highdpi=false, x:int|none=nil, y:int|none=nil, usedpiscale=true }
settype window.getMode.flags       WindowFlags
settype window.setMode.flags       WindowFlags
settype window.updateMode.settings WindowFlags

add window  export MessageBoxButtons :: struct { !value:string, enterbutton:int|none=nil, escapebutton:int|none=nil }
settype window.showMessageBox.buttonlist MessageBoxButtons



-- Number type resolutions
----------------------------------------------------------------

-- These also match direct sub-objects.
numbertype object getVersion int
numbertype object audio.getMaxSceneEffects int
numbertype object audio.getMaxSourceEffects int
numbertype object audio.Source.getAirAbsorption float
numbertype object audio.Source.setAirAbsorption float
numbertype object graphics.Canvas.getDimensions int
numbertype object graphics.Canvas.getHeight int
numbertype object graphics.Canvas.getWidth int
numbertype object graphics.Font.getHeight int
numbertype object graphics.Font.getLineHeight float
numbertype object graphics.Font.getWidth int
numbertype object graphics.Font.getWrap int
numbertype object graphics.Font.setLineHeight float
numbertype object graphics.Image.getDimensions int
numbertype object graphics.Image.getHeight int
numbertype object graphics.Image.getWidth int
numbertype object graphics.Mesh.getDrawRange int
numbertype object graphics.Mesh.setDrawRange int
numbertype object graphics.Quad.getTextureDimensions int--[[Correct?]]
numbertype object graphics.Quad.getViewport float
numbertype object graphics.Quad.setViewport.sw int--[[Correct?]]
numbertype object graphics.Quad.setViewport.sh int--[[Correct?]]
numbertype object graphics.Quad.setViewport float
numbertype object graphics.SpriteBatch.getBufferSize int
numbertype object graphics.SpriteBatch.setBufferSize int
numbertype object graphics.Text.getDimensions int
numbertype object graphics.Text.getHeight int
numbertype object graphics.Text.getWidth int
numbertype object graphics.Video.getDimensions int
numbertype object graphics.Video.getHeight int
numbertype object graphics.Video.getWidth int
numbertype object graphics.arc.x float
numbertype object graphics.arc.y float
numbertype object graphics.circle.x float
numbertype object graphics.circle.y float
numbertype object graphics.draw.x float
numbertype object graphics.draw.y float
numbertype object graphics.drawInstanced.x float
numbertype object graphics.drawInstanced.y float
numbertype object graphics.drawLayer.x float
numbertype object graphics.drawLayer.y float
numbertype object graphics.ellipse.x float
numbertype object graphics.ellipse.y float
numbertype object graphics.getDPIScale int--[[Correct?]]
numbertype object graphics.getDimensions int
numbertype object graphics.getHeight int
numbertype object graphics.getWidth int
numbertype object graphics.getLineWidth float
numbertype object graphics.setLineWidth float
numbertype object graphics.getPointSize int
numbertype object graphics.setPointSize int
numbertype object graphics.getScissor float
numbertype object graphics.setScissor float
numbertype object graphics.intersectScissor float
numbertype object graphics.line float
numbertype object graphics.polygon float
numbertype object graphics.newFont int
numbertype object graphics.newImageFont int
numbertype object graphics.setNewFont int
numbertype object graphics.newQuad.sw int--[[Correct?]]
numbertype object graphics.newQuad.sh int--[[Correct?]]
numbertype object graphics.newQuad float
numbertype object graphics.print float
numbertype object graphics.printf.limit int
numbertype object graphics.printf float
numbertype object image.ImageData.paste int
numbertype object joystick.Joystick.getAxis.direction float
numbertype object joystick.Joystick.getGamepadAxis.direction float
numbertype object joystick.Joystick.getVibration float
numbertype object keyboard.setTextInput int
numbertype object math.BezierCurve.evaluate.t float
numbertype object math.BezierCurve.evaluate.x float
numbertype object math.BezierCurve.evaluate.y float
numbertype object math.BezierCurve.getControlPoint.x float
numbertype object math.BezierCurve.getControlPoint.y float
numbertype object math.BezierCurve.setControlPoint.x float
numbertype object math.BezierCurve.setControlPoint.y float
numbertype object math.BezierCurve.insertControlPoint.x float
numbertype object math.BezierCurve.insertControlPoint.y float
numbertype object math.BezierCurve.rotate float
numbertype object math.BezierCurve.scale float
numbertype object math.BezierCurve.translate float
numbertype object math.RandomGenerator.randomNormal float
numbertype object math.randomNormal float
numbertype object math.gammaToLinear float
numbertype object math.linearToGamma float
numbertype object math.getRandomSeed int
numbertype object math.setRandomSeed int
numbertype object math.newRandomGenerator int
numbertype object math.newTransform float
numbertype object math.isConvex float
numbertype object math.newBezierCurve float
numbertype object math.noise float
numbertype object math.triangulate float
numbertype object physics.Body.getAngularVelocity float
numbertype object physics.Body.setAngularVelocity float
numbertype object physics.Body.getLinearDamping float
numbertype object physics.Body.setLinearDamping float
numbertype object physics.DistanceJoint.getLength float
numbertype object physics.DistanceJoint.setLength float
numbertype object physics.Fixture.rayCast float
numbertype object physics.Shape.rayCast float
numbertype object physics.World.rayCast float
numbertype object physics.WheelJoint.getJointTranslation float
numbertype object physics.newChainShape float
numbertype object physics.newPolygonShape float
numbertype object physics.newPulleyJoint float
numbertype object physics.newRopeJoint float
numbertype object physics.newWheelJoint float
numbertype object physics.newWorld float
numbertype object timer.getAverageDelta float
numbertype object timer.sleep float
numbertype object window.fromPixels.x float
numbertype object window.fromPixels.y float
numbertype object window.fromPixels.value float
numbertype object window.fromPixels.px int--[[Correct?]]
numbertype object window.fromPixels.py int--[[Correct?]]
numbertype object window.fromPixels.pixelvalue int--[[Correct?]]
numbertype object window.toPixels.x float
numbertype object window.toPixels.y float
numbertype object window.toPixels.value float
numbertype object window.toPixels.px int--[[Correct?]]
numbertype object window.toPixels.py int--[[Correct?]]
numbertype object window.toPixels.pixelvalue int--[[Correct?]]
numbertype object window.getDPIScale int--[[Correct?]]
numbertype object window.getMode int
numbertype object window.setMode int
numbertype object window.updateMode int
numbertype object window.getPosition int
numbertype object window.setPosition int
numbertype object window.getSafeArea int

numbertype scope graphics.ParticleSystem size int
numbertype scope graphics.ParticleSystem size1 int
numbertype scope graphics.ParticleSystem size2 int
numbertype scope graphics.ParticleSystem size8 int
numbertype scope graphics.ParticleSystem min float
numbertype scope graphics.ParticleSystem max float
numbertype scope graphics.ParticleSystem x float
numbertype scope graphics.ParticleSystem y float
numbertype scope graphics.ParticleSystem xmin float
numbertype scope graphics.ParticleSystem xmax float
numbertype scope graphics.ParticleSystem ymin float
numbertype scope graphics.ParticleSystem ymax float
numbertype scope graphics.ParticleSystem variation float
numbertype scope graphics.ParticleSystem spread float
numbertype scope graphics.SpriteBatch x float
numbertype scope graphics.SpriteBatch y float
numbertype scope graphics.SpriteBatch start int
numbertype scope graphics.Text x float
numbertype scope graphics.Text y float
numbertype scope graphics.Video offset float
numbertype scope math.BezierCurve startpoint int
numbertype scope math.BezierCurve endpoint int
numbertype scope math.RandomGenerator low int
numbertype scope math.RandomGenerator high int
numbertype scope math.Transform x float
numbertype scope math.Transform y float
numbertype scope math.Transform sx float
numbertype scope math.Transform sy float
numbertype scope math.Transform ox float
numbertype scope math.Transform oy float
numbertype scope math.Transform kx float
numbertype scope math.Transform ky float
numbertype scope math.Transform dx float
numbertype scope math.Transform dy float
numbertype scope mouse x int
numbertype scope mouse y int
numbertype scope physics.MouseJoint f float
numbertype scope physics.PrismaticJoint f float
numbertype scope physics.PrismaticJoint s float
numbertype scope physics.PrismaticJoint t float
numbertype scope physics.PrismaticJoint lower float
numbertype scope physics.PrismaticJoint upper float
numbertype scope physics.PulleyJoint length float
numbertype scope physics.PulleyJoint len1 float
numbertype scope physics.PulleyJoint len2 float
numbertype scope physics.PulleyJoint max1 float
numbertype scope physics.PulleyJoint max2 float
numbertype scope physics.PulleyJoint a1x float
numbertype scope physics.PulleyJoint a1y float
numbertype scope physics.PulleyJoint a2x float
numbertype scope physics.PulleyJoint a2y float
numbertype scope physics.RevoluteJoint f float
numbertype scope physics.RevoluteJoint s float
numbertype scope physics.RevoluteJoint lower float
numbertype scope physics.RevoluteJoint upper float
numbertype scope physics.RopeJoint maxLength float
numbertype scope physics.Shape tx float
numbertype scope physics.Shape ty float
numbertype scope physics.Shape tr float
numbertype scope sound.SoundData sample float

numbertype module love.audio ref float
numbertype module love.audio max float
numbertype module love.audio min float
numbertype module love.audio innerAngle float
numbertype module love.audio outerAngle float
numbertype module love.audio innerVolume float
numbertype module love.audio outerVolume float
numbertype module love.audio x float
numbertype module love.audio y float
numbertype module love.audio z float
numbertype module love.audio offset float
numbertype module love.audio position float
numbertype module love.audio scale float
numbertype module love.audio fx float
numbertype module love.audio ux float
numbertype module love.data size int
numbertype module love.data offset int
numbertype module love.filesystem size int
numbertype module love.filesystem pos int
numbertype module love.graphics r float
numbertype module love.graphics g float
numbertype module love.graphics b float
numbertype module love.graphics a float
numbertype module love.graphics r1 float
numbertype module love.graphics g1 float
numbertype module love.graphics b1 float
numbertype module love.graphics a1 float
numbertype module love.graphics r2 float
numbertype module love.graphics g2 float
numbertype module love.graphics b2 float
numbertype module love.graphics a2 float
numbertype module love.graphics r8 float
numbertype module love.graphics g8 float
numbertype module love.graphics b8 float
numbertype module love.graphics a8 float
numbertype module love.graphics dx float
numbertype module love.graphics dy float
numbertype module love.graphics ox float
numbertype module love.graphics oy float
numbertype module love.graphics sx float
numbertype module love.graphics sy float
numbertype module love.graphics kx float
numbertype module love.graphics ky float
numbertype module love.graphics direction float
numbertype module love.graphics comparevalue int
numbertype module love.image width int
numbertype module love.image height int
numbertype module love.image x int
numbertype module love.image y int
numbertype module love.image r float
numbertype module love.image g float
numbertype module love.image b float
numbertype module love.image a float
numbertype module love.joystick axisDir1 float
numbertype module love.joystick axisDir2 float
numbertype module love.joystick axisDirN float
numbertype module love.joystick axis int
numbertype module love.joystick axes int
numbertype module love.physics x float
numbertype module love.physics y float
numbertype module love.physics x1 float
numbertype module love.physics y1 float
numbertype module love.physics x2 float
numbertype module love.physics y2 float
numbertype module love.physics fx float
numbertype module love.physics fy float
numbertype module love.physics ix float
numbertype module love.physics iy float
numbertype module love.physics vx float
numbertype module love.physics vy float
numbertype module love.physics nx float
numbertype module love.physics ny float
numbertype module love.physics scale float
numbertype module love.physics topLeftX float
numbertype module love.physics topLeftY float
numbertype module love.physics bottomRightX float
numbertype module love.physics bottomRightY float
numbertype module love.physics width float
numbertype module love.physics height float
numbertype module love.touch x int
numbertype module love.touch y int

numbertype name angle float
numbertype name angle1 float
numbertype name angle2 float
numbertype name angleoffset float
numbertype name anisotropy int
numbertype name ascent int
numbertype name baseline int
numbertype name bitdepth int
numbertype name bitDepth int
numbertype name bits int
numbertype name buffer int
numbertype name buffercount int
numbertype name buffers int
numbertype name button int
numbertype name buttonN int
numbertype name buttons int
numbertype name categories int
numbertype name category1 int
numbertype name category2 int
numbertype name channel int
numbertype name channels int
numbertype name childIndex int
numbertype name codepoint1 int
numbertype name codepoint2 int
numbertype name count int
numbertype name damping float
numbertype name degree float
numbertype name density float
numbertype name depth int
numbertype name descent int
numbertype name display int
numbertype name displayindex int
numbertype name distance float
numbertype name dpiscale int--[[Correct?]]
numbertype name dt float
numbertype name duration float
numbertype name force float
numbertype name fps float--[[Correct?]]
numbertype name freq float
numbertype name friction float
numbertype name globalX float
numbertype name globalY float
numbertype name group int
numbertype name hat int
numbertype name hats int
numbertype name hotx int
numbertype name hoty int
numbertype name Hz float
numbertype name i int
numbertype name id int
numbertype name impulse float
numbertype name index int
numbertype name inertia float
numbertype name inputindex int
numbertype name instancecount int
numbertype name instanceid int
numbertype name invdt float
numbertype name joystickcount int
numbertype name layerindex int
numbertype name layers int
numbertype name level int
numbertype name life float
numbertype name localX float
numbertype name localY float
numbertype name mask int
numbertype name mask1 int
numbertype name mask2 int
numbertype name mass float
numbertype name maxForce float
numbertype name maxFraction float
numbertype name maxTorque float
numbertype name mipmaps int
numbertype name n int
numbertype name numparticles int
numbertype name numSources int
numbertype name pitch float
numbertype name pixelheight int
numbertype name pixelwidth int
numbertype name positioniterations int
numbertype name pressedbutton int
numbertype name pressure float
numbertype name processorCount int
numbertype name productID int
numbertype name productVersion int
numbertype name radius float
numbertype name radiusx float
numbertype name radiusy float
numbertype name rate int--[[Correct?]]
numbertype name ratio float
numbertype name referenceAngle float
numbertype name restitution float
numbertype name rolloff float
numbertype name samplecount int
numbertype name samplerate int
numbertype name samples int
numbertype name screenX float
numbertype name screenY float
numbertype name seconds float
numbertype name seed int
numbertype name segments int
numbertype name sharpness float--[[Correct?]]
numbertype name speed float
numbertype name spriteindex int
numbertype name time float
numbertype name timeout float
numbertype name torque float
numbertype name velocityiterations int
numbertype name vendorID int
numbertype name volume float
numbertype name vsync int
numbertype name worldX float
numbertype name worldY float
numbertype name wraplimit int


