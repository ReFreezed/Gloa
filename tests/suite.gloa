--
-- GlÃ³a test suite
--
-- Usage:
-- $ lua gloa.lua suite.gloa -- [testToRun]
--
-- Arguments:
-- * testToRun: Name or partial name of a specific test to run. (Optional, default is all.)
--

local TEST_FILES :: {
	"tests/assignmentsWithBinaryOperations.gloa",
	"tests/basic.gloa",
	"tests/compileTimeExecution.gloa",
	"tests/deepCompilation.gloa",
	"tests/modules.gloa",
	"tests/types.gloa",
}
local FILES_TO_COPY_TO_TEMP_FOLDER :: {
	-- These are used by TEST_FILES.
	"tests/types.errorGlobal.gloa",
	"tests/types.errorLocal.gloa",
	"tests/types.load.gloa",
}

local EXAMPLES: [] struct {folder:string, main:string} : {
	-- These only run if 'examplesFolder' in suite.ini is set.
	{folder="lovelyBlaster", main="src/main.gloa"},
	{folder="lovelySnake",   main="main.gloa"},
}

local COMPILER_OPTIONS   :: "--debug --nogc --silent"
local OUTPUT_REDIRECTION :: ">NUL" -- ">NUL 2>&1"



!import "basic"
!import "compiler"
!import "io"
!import "os"
!import "string"
!import "utils"

!load "suite.fails"

!run {
	local options      = getBuildOptions()
	options.outputType = BuildOutputType.NONE
	setBuildOptions(options)

	disableBuffering(STDOUT)
	disableBuffering(STDERR)

	print("Running test suite...")

	local examplesFolder = ""

	do {
		local ok, file = openForReadingText(APP_DIRECTORY.."/suite.ini")
		if ok {
			local ln = 0
			for line in eachLine(file) {
				ln += 1
				if not line or line[1] == !char "#"  continue

				local ok, k, v = matchPattern(line, "^(%w+)=(.*)$") !shadow
				if not ok
					errorLine("suite.ini:%d: Bad line format: %s", ln, line)
				elseif k == "examplesFolder"
					examplesFolder = cast(string) v
				else
					errorLine("suite.ini:%d: Unknown key '%s'.", ln, k)
			}
		}
	}

	print(examplesFolder ? "Including examples." : "Excluding examples.")

	local testToRun = getProgramArguments()[1]
	testToRun       = testToRun ~= NULL ? toLower(testToRun) : ""

	if testToRun  printf("Looking for test '%s'.", testToRun)

	local testCount = 0
	local failCount = 0
	local results: []string

	local shouldRunTest = [testToRun] (name:string) -> bool {
		if not testToRun  return true
		name = replacePattern(name, "%.gloa$", "")
		return (find(toLower(name), testToRun))
	}

	local runTest = [testCount,failCount,results] (name:string, expectSuccess:bool, cmd:string) {
		print(cmd)
		testCount += 1

		if (execute(cmd) == 0) == expectSuccess {
			insert(results, format("ok      %s", name))
		} else {
			insert(results, format("NOT_OK  %s", name))
			failCount = failCount+1
		}
	}

	for path: TEST_FILES {
		if shouldRunTest(path) {
			runTest(path, true, format(
				[["lua "%s" %s "%s" %s"]],
				COMPILER_PATH, COMPILER_OPTIONS,
				path,
				OUTPUT_REDIRECTION
			))
			if testToRun  break
		}
	}

	if examplesFolder  for example: EXAMPLES {
		local path = format("%s/%s/%s", examplesFolder, example.folder, example.main)

		if shouldRunTest(example.folder) {
			runTest(path, true, format(
				[["lua "%s" %s --root "%s/%s" "%s" %s"]],
				COMPILER_PATH, COMPILER_OPTIONS,
				examplesFolder, example.folder, example.main,
				OUTPUT_REDIRECTION
			))
			if testToRun  break
		}
	}

	for path: FILES_TO_COPY_TO_TEMP_FOLDER {
		local ok, filename = matchPattern(path, "[^/]+$")
		assert(ok, path)

		local tempPath = "temp/" .. cast(string) filename
		copy(path, tempPath)
	}

	for gloa, i: TESTS_THAT_SHOULD_FAIL {
		local tempPath = format("temp/shouldFail%d.gloa", i)

		if shouldRunTest(tempPath) {
			if not find(gloa, "main ::")
				gloa = gloa.."\nlocal main :: () {}\n"

			local ok, err = writeEntireFile(tempPath, gloa)
			assert(ok, err)

			runTest(tempPath, false, format(
				[["lua "%s" %s "%s" %s"]],
				COMPILER_PATH, COMPILER_OPTIONS,
				tempPath,
				OUTPUT_REDIRECTION
			))
			if testToRun  break
		}
	}

	print("-"*64)
	for results  print(it)
	print("-"*64)

	if testCount == 0
		print("No tests ran!")
	elseif failCount == 0
		printf("Completed all %d tests successfully. Yay!", testCount)
	else
		printf("Failed %d of %d", failCount, testCount)

	print()

	if failCount > 0  exit(1)
}
