--
-- GlÃ³a test suite
--

!import "basic"
!import "io"
!import "string"
!import "utils"

!load "suite.fails.gloa"

local TEST_FILES : []string : {
	"examples/lovelyBlaster/main.gloa",
	"examples/lovelySnake/main.gloa",
	"tests/basic.gloa",
	"tests/compileTimeExecution.gloa",
	"tests/deepCompilation.gloa",
	"tests/modules.gloa",
	"tests/types.gloa",
}

local COMPILER_OPTIONS   :: "--debug --nogc --silent"
local OUTPUT_REDIRECTION :: ">NUL" -- ">NUL 2>&1"

local execute :: (cmd:string) -> int !foreign lua "os.execute"

local main :: () {
	disableBuffering(STDOUT)
	disableBuffering(STDERR)

	local failCount = 0
	local lines: []string

	for path: TEST_FILES {
		local cmd = format([["lua "%s" %s "%s" %s"]], COMPILER_PATH, COMPILER_OPTIONS, path, OUTPUT_REDIRECTION)

		print(cmd)
		if execute(cmd) == 0 {
			insert(lines, format("ok      %s", path))
		} else {
			insert(lines, format("NOT_OK  %s", path))
			failCount = failCount+1
		}
	}

	local FILES_TO_COPY_TO_TEMP_FOLDER : []string : {
		"tests/types.errorGlobal.gloa",
		"tests/types.errorLocal.gloa",
		"tests/types.load.gloa",
	}

	for path: FILES_TO_COPY_TO_TEMP_FOLDER {
		local ok, filename = matchPattern(path, "[^/]+$")
		assert(ok, path)

		local tempPath = "local/temp/" .. cast(string) filename
		copyFile(path, tempPath)
	}

	for gloa, i: TESTS_THAT_SHOULD_FAIL {
		if not find(gloa, "main ::")
			gloa = gloa.."\nlocal main :: () {}\n"

		local tempPath = format("local/temp/shouldFail%d.gloa", i)
		local ok, err  = writeFile(tempPath, gloa)
		assert(ok, err)

		local cmd = format([["lua "%s" %s "%s" %s"]], COMPILER_PATH, COMPILER_OPTIONS, tempPath, OUTPUT_REDIRECTION)
		print(cmd)

		if execute(cmd) ~= 0 {
			insert(lines, format("ok      %s", tempPath))
		} else {
			insert(lines, format("NOT_OK  %s", tempPath))
			failCount = failCount+1
		}
	}

	print()
	print(repeat("-", 64))
	for lines  print(it)
	print(repeat("-", 64))

	local TEST_COUNT :: #TESTS_THAT_SHOULD_FAIL + #TEST_FILES
	if failCount == 0
		printf("Completed all %d tests successfully. Yay!", TEST_COUNT)
	else
		printf("Failed %d of %d", failCount, TEST_COUNT)

	print()
}
