--
-- Compile-time execution test.
--

local getInt :: (less=0) -> int {
	!import "basic"

	local insideInt  = globalInt
	insideInt       += 5-less
	outsideString    = "foo"

	print("What?", insideInt, outsideString)
	return globalInt
}

local  fileLocalInt = !run getInt(1)
global globalInt:int
local  outsideString = ""

!assert type_of(fileLocalInt) == int

local arr:[]int = !run ({0, 5*getInt()}) -- The parenthesis is only a parsing help here.

local getIntArrayType :: () -> type {
	return type_of(arr)
}
local IntArray :: !run getIntArrayType()

local main :: () {
	!import "basic"
	print("outsideString = '"..outsideString.."'") -- Should be empty. (Variables in metaprograms don't affect the final output.)
	print(getInt(-10))
}
