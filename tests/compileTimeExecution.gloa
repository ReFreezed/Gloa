--
-- Compile-time execution test.
--

local getInt :: (less=0) -> int {
	!import "basic"

	local insideInt  = globalInt
	insideInt       += 5-less
	outsideString    = "foo"

	print("What?", insideInt, outsideString)
	return globalInt
}

local  fileLocalInt = !run getInt(1)
global globalInt:int
local  outsideString = ""

!assert type_of(fileLocalInt) == int

local arr:[]int = !run ({0, 5*getInt()}) -- The parenthesis is only a parsing aid here.

local getIntArrayType :: () -> type {
	return type_of(arr)
}
local IntArray :: !run getIntArrayType()

local main :: () {
	!import "basic"
	print("outsideString = '"..outsideString.."'") -- Should be empty. (Variables in metaprograms don't affect the final output.)
	print(getInt(-10))
	local pear    = Fruit.PEAR
	local enumInt = Numeric.INT
}

!run valueFunction1()
!run valueFunction2()

local Vector2 :: struct { x:float, y:float }

local Fruit :: enum {
	APPLE  :: 1,
	PEAR   :: 2,
	ORANGE :: 3,
}
local Numeric :: enum {
	INT   :: int,
	FLOAT :: float,
}

local valueAny       = !run cast(any) 5
local valueBool      = !run true
local valueInt       = !run 5
local valueNone      = !run nil
local valueFloat     = !run 3.14
local valueString    = !run "foo"
local valueTable     = !run cast(table) {a=7, !import "math".getRandom()}
local valueType      = !run int
local valueArray     = !run cast([]int) {}
local valueFunction1 = !run main
local valueFunction2 = !run (){}
local valueStruct    = !run cast(Vector2) {y=11.7}
local valueEnum1     = !run Fruit.PEAR
local valueEnum2     = !run Numeric.FLOAT
!assert cast(type)Numeric.FLOAT == float

local add :: (a,b:float) -> float { return a+b }
local chain = 1 + !run add(20, !run !import "math".sqrt(900))
