--
-- Quick test.
--



-- Things that should work.
--------------------------------

-- local n = 1+2*3+4           -- 1+(2*3)+4
-- local n = a+i < b/2+1       -- (a+i) < ((b/2)+1)
-- local n = 5+x^2*8           -- 5+((x^2)*8)
-- local n = a < y and y <= z  -- (a < y) and (y <= z)
-- local n = -x^2              -- -(x^2)
-- local n = x^y^z             -- x^(y^z)

-- local str = "a\nb\tc" .. 1+2 .. 4

-- local flag = true
-- local null = nil

-- local t1 = {a=5, ["hello"]=nil, [true]=false, nil}
-- local t2 = {[{1+-2}]=true and false; [(b)]=((5))}
-- local t3 = { [f(1)] = g; "x", "y"; x = 1, f(x), [30] = 23; 45 }

-- local v = foo(5, "hello")
-- local v = bar({a=true}) + bat("?")

-- local a          = 5
-- local b :        : false
-- local c : *      = nil
-- local d : string = "hello"
-- local e : Thing
-- local f : Poly(int, !type Other(bool), bad(""))
-- local g : typeOf(d)
-- local h :        : typeOf(g)

-- local arr : [] int = {1,2,3}
-- local arr : [] [] Thing( [] int, bool )

-- local v = foo(5, hello) + "aaaa"

-- local foo :: ()
-- local foo :: (a:number) -> void
-- local foo :: (a:number, b:Groot) -> bool, Tree

-- local foo :: (b:Bar(Dog,Cat(int,int)), n:number=-1) -> (ok:bool, thing:Thing) {
-- 	local x:number = 2;
-- 	local y        = 85;
-- }

-- local foo :: (a, b: bool, x: *)
-- local foo :: (a, b: []int = nil)

local main :: () {
	-- local a: int
	-- a, b += 5, 7+-6
	-- s ..= "a".."b"

	-- local n = cast(number) ("6") + 5

	-- local hëllô_日本語 = 한국어_ٱلْعَرَبِيَّة

	-- local len = #t

	-- foo()
	-- foo(6, 7)
	-- foo("bar")
	-- foo({})("bar")()

	-- if x  foo()
	-- if x and y {
	-- 	local n = dirt()
	-- 	n += grass()
	-- }

	-- if x  local f = 7
	-- if x  foo()

	-- if      x  a()
	-- elseif  y  b()
	-- else if z  c()
	-- else       d()

	-- local x = 5
	-- while x > 0  x -= 1
	-- while x > 0  local i:int
	-- while x > 0  { x -= 1 }

	-- for 1, 3       print(it)
	-- for arr        print(itIndex, it)
	-- for v: arr     print(itIndex, v)
	-- for v, i: arr  print(i, v)
	-- for i = 1, 3              print(i)
	-- for i = 3, 1, -1          print(i)
	-- for i, v in ipairs(arr)   print(i, v)
	-- for k, v in next, t, nil  print(k, v)
	-- for v1, v2, v3: obj                print(i, v)
	-- for v1, v2, v3 in myIterator, obj  print(v1, v2, v3)

	-- local v1 = t1.t2[i].k
	-- local v2 = obj.k1.m1(m1Arg)(fArg).k2.m2(m2Arg).k3
	-- local v3 = obj.k1.m1!(m1Arg)(fArg).k2.m2!(m2Arg).k3
	-- local v4 = (t).k

	-- t.m()
	-- t.m!()
	-- obj.k1.m1(m1Arg)(fArg).k2.m2(m2Arg)
	-- obj.k1.m1!(m1Arg)(fArg).k2.m2!(m2Arg)

	-- t.n = 99
	-- t[1] = 99
	-- t.s, t.b = "foo", true
	-- f().k, t[k] = 1, 2
	-- t[k], f().k = 2, 1
}



-- Incomplete stuff.
--------------------------------

-- @Incomplete: '|'.
-- local foo :: (a, b: []int|[]string|nil)

-- @Incomplete: Function signature as type.
-- local foo : (a:number, b:Groot)



-- Things that should result in an error.
--------------------------------

local syntaxErrors :: () {
	-- ;
	-- (f)()

	-- f!()
	-- t.(m)!()
	-- t.m!()!()
	-- f()!()
	-- local v = f!()
	-- local v = t.m!()!()
	-- local v = t.(m)!()
	-- local v = f()!()
	-- local v = (f)!()

	-- t.(k)
	-- local v = t.(k)

	-- obj.k1.m1(m1Arg)(fArg).k2.m2(m2Arg).k3
	-- obj.k1.m1!(m1Arg)(fArg).k2.m2!(m2Arg).k3
}


