--
-- Quick test.
--



-- Things that should result in an error.
--------------------------------

local syntaxErrors :: () {
	-- ; -- Empty statement,

	-- f!()
	-- t.(m)!()
	-- t.m!()!()
	-- f()!()
	-- local v = f!()
	-- local v = t.m!()!()
	-- local v = t.(m)!()
	-- local v = f()!()
	-- local v = (f)!()

	-- t.(k)
	-- local v = t.(k)

	-- obj.k1.m1(m1Arg)(fArg).k2.m2(m2Arg).k3 -- Not a full statement.
	-- obj.k1.m1!(m1Arg)(fArg).k2.m2!(m2Arg).k3 -- Not a full statement.

	-- x, f() = a, b -- Cannot "set" a call.
	-- a = x, y -- Too many values.
	-- f().k, a = x, y, z -- Too many values.
	-- local a, b = 1, 2, 3 -- Too many values.

	-- local func :: () -> (i:int=5) {} -- Out args cannot have default values (yet?).
}

-- !import 5

local illegalStatements :: () {
	-- local var:number|nil -- Must have values if multiple types are specified.
	-- local var : number|nil : 0 -- Constants must be of a single type.

	-- !import "math"
	-- !load   "src/foo.gloa"
	-- local ioLib :: !import "io"
	-- local blarg :: !load "uhhh/blarg.gloa"

	-- local func :: (...:int, b:bool) {}
	-- local func :: (..., x: int) {}
}

-- local io1, io2 :: !import "io", !import "io"
-- local io:int : !import "io"



-- Things that should work.
--------------------------------

-- local n = 1+2*3+4           -- 1+(2*3)+4
-- local n = a+i < b/2+1       -- (a+i) < ((b/2)+1)
-- local n = 5+x^2*8           -- 5+((x^2)*8)
-- local n = a < y and y <= z  -- (a < y) and (y <= z)
-- local n = -x^2              -- -(x^2)
-- local n = x^y^z             -- x^(y^z)

-- local str = "a\nb\tc" .. 1+2 .. 4

-- local flag = true
-- local null = nil

-- local t1 = {a=5, ["hello"]=nil, [true]=false, nil}
-- local t2 = {[{1+-2}]=true and false; [(b)]=((5))}
-- local t3 = { [f(1)] = g; "x", "y"; x = 1, f(x), [30] = 23; 45 }

-- local v = func(5, "hello")
-- local v = bar({a=true}) + bat("?")

-- local a          = 5
-- local b :        : false
-- local c : *      = nil
-- local d : string = "hello"
-- local e : Thing
-- local f : Poly(int, !type Other(bool), bad(""))
-- local g : typeOf(d)
-- local h :        : typeOf(g)

-- local arr : [] int = {1,2,3}
-- local arr : [] [] Thing( [] int, bool )

-- local v = func(5, hello) + "aaaa"

-- local sig :: ()
-- local sig :: (a:number) -> void
-- local sig :: (a:number, b:Groot) -> bool, Tree

-- local func :: (b:Bar(Dog,Cat(int,int)), n:number=-1) -> (ok:bool, thing:Thing) {
-- 	local x:number = 2;
-- 	local y        = 85;
-- }

-- local sig :: (a, b: bool, x: *)
-- local sig :: (a, b: []int = nil)

-- !import "math"
-- !load   "src/foo.gloa"
-- global ioLib :: !import "io"
-- local  blarg :: !load "uhhh/blarg.gloa"

local main :: () {
	-- local a: int
	-- a, b += 5, 7+-6
	-- s ..= "a".."b"

	-- local n = cast(number) ("6") + 5

	-- local hëllô_日本語 = 한국어_ٱلْعَرَبِيَّة

	-- local len = #t

	-- func()
	-- func(6, 7)
	-- func("bar")
	-- func({})("bar")()
	-- (func)()

	-- if x  func()
	-- if x and y {
	-- 	local n = dirt()
	-- 	n += grass()
	-- }

	-- if x  local f = 7
	-- if x  func()

	-- if      x  a()
	-- elseif  y  b()
	-- else if z  c()
	-- else       d()

	-- local x = 5
	-- while x > 0  x -= 1
	-- while x > 0  local i:int
	-- while x > 0  { x -= 1 }

	-- for 1, 3       print(it)
	-- for arr        print(itIndex, it)
	-- for v: arr     print(itIndex, v)
	-- for v, i: arr  print(i, v)
	-- for i = 1, 3              print(i)
	-- for i = 3, 1, -1          print(i)
	-- for i, v in ipairs(arr)   print(i, v)
	-- for k, v in next, t, nil  print(k, v)
	-- for v1, v2, v3: obj                print(i, v)
	-- for v1, v2, v3 in myIterator, obj  print(v1, v2, v3)

	-- local v1 = t1.t2[i].k
	-- local v2 = obj.k1.m1(m1Arg)(fArg).k2.m2(m2Arg).k3
	-- local v3 = obj.k1.m1!(m1Arg)(fArg).k2.m2!(m2Arg).k3
	-- local v4 = (t).k

	-- t.m()
	-- t.m!()
	-- obj.k1.m1(m1Arg)(fArg).k2.m2(m2Arg)
	-- obj.k1.m1!(m1Arg)(fArg).k2.m2!(m2Arg)

	-- t.n = 99
	-- t[1] = 99
	-- t.s, t.b = "foo", true
	-- f(arg).k, t[k] += 1, 2
	-- t[k], f(arg).k = 2, 1
	-- a, b = f(arg)
	-- a, b = (f(arg))

	-- local a:int   = f()
	-- local a, b    = f()
	-- local a, b    = (f())
	-- local a, b, c = 100, f()
	-- local a,b:int : 1,2

	-- local var:number|nil = 0
	-- local func :: (a:int, b:int|nil=nil) -> (a:int, b:int|nil) {}
	-- local sig  :: (a, b: int|[]string|nil)
	-- local func :: (a:int=nil) {} -- 'a:int=nil' desugars into 'a:int|nil=nil'.

	-- defer file.close!()
	-- defer { file.close!() ; print("yo") }

	-- -- These work if we got out args.
	-- do return 1, func()
	-- do return 2, (func())

	-- -- Ambiguity for return!
	-- if x return
	-- func()

	-- -- Ambiguity for break/continue!
	-- for 1, 5
	-- 	if it < 3
	-- 		print(it)
	-- 	else
	-- 		break
	-- func()

	-- -- Ambiguity for break/continue!
	-- for v: arr {
	-- 	if x continue
	-- 	func1()
	-- 	if y break v
	-- 	func2()
	-- }

	-- local func :: (a:string, ...:int) {
	-- 	local x, y, z: int = 5, ...
	-- 	local x, y, z: int = 5, (...)
	-- }
}



-- Incomplete stuff.
--------------------------------

-- @Incomplete: Function signature as type.
-- local func : (a:number, b:Groot)

-- ()() -- Should be an error. The compiler things this is a call on an expression (that results in a function signature.) May solve itself once we resolve types.


