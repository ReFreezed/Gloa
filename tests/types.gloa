--
-- Type inference tests.
--
-- * Simple declarations
-- * Functions
-- * Structs and enums
-- * Operations
-- * Blocks
-- * Multiple files
-- * Lists of things
-- * Using
-- * Arrays and loops
-- * Misc
--



-- [[ Simple declarations
--------------------------------

local myNum1 : float
local myNum2 :      : 10
local myNum3 : int  : 20
local myNum4 :      = myNum2
local myNum5        = myNum2 -- The colon is optional for variables with inferred type.
local myNum6 : int  = myNum2
local myTyp1 :      : int
local myTyp2 : Type : int

local MyType1 :: int
local MyType2 :: MyType1
local myVar1:MyType1 = 555
local myVar2:MyType2 = 555

local myInt1 = -100
local myInt2 : type_of(myInt1)
local myInt3 : type_of(myInt2) = (3+4)*2

local messyInt1 :: 5
local messyType :: type_of(messyInt1)
local messyInt2:messyType = 10

local double11, double12 : int
local double21, double22                     = 1, 2
local double31, double32 : int               = 1, 2
local double41, double42 : type_of(double22) = 1, 2

local NilType :: none -- Note: The nil type (none) is only really useful in compound types.
local iCanOnlyBeNil : NilType = nil

local StringOrNil :: string|none
local maybeString:StringOrNil = nil

local testTable :: () {
	local k       = "a%/"
	local t:table = {[k]=false} -- Keys can be non-constant for tables, unlike for structs and arrays.
}
--]]



-- [[ Functions
--------------------------------

local theMain :: () -> void {}

local testFunctions :: () {
	local oneInTwoOut1 :: (a:int) -> int, int { return a, 2*a }
	local one1, two1, three1 : int = 5, oneInTwoOut1(99)

	local oneInTwoOut2 :: (a:int) -> int, string { return a, "foo" }
	local one2, two2, three2 = 5, oneInTwoOut2(99)

	local mySig :: (arg1:string, arg2,arg3:int) -> bool, string
	local myFunc1:mySig : (arg1:string, arg2,arg3:int) -> bool, string { return true, "foo" }

	local myFunc : (arg1:string,arg2,arg3:int)->bool,string : (arg1:string, arg2,arg3:int) -> bool, string { return true, "" }

	local testFuncReturningFunc :: () {
		local funcReturningFunc :: () -> (func:(n:int)->string) {
			return (n:int) -> string {
				return "foo"
			}
		}
		local theString = funcReturningFunc()(5)
	}

	local getTwo    :: () -> int, int      { return 1, 2 }
	local getThree1 :: () -> int, int, int { return 1, getTwo() }
	local getThree2 :: () -> int, int, int { return 1, getTwo(), 3 }
	local getThree3 :: () -> int, int, int { return 1, 2, (getTwo()) }

	local recursive :: () -> int { return recursive() }

	local first :: () {}
	local same  :: first

	local someFunc1 :: () -> void {}
	local someFunc2 : type_of(someFunc1) = someFunc1

	local overloaded :: (n:int) {}
	local overloaded :: (s:string) {}
	overloaded(5)
	overloaded("foo")

	local optional :: (x:int, y:int=0, z:int=0) {
		local sum = x+y+z
	}
	optional(1, 2, 3)
	optional(1, 2)
	optional(1)

	do {
		local print :: (...:any) !foreign lua "print"
		local overload :: (n:int, v:any)    { print(n, "any") }
		local overload :: (n:int, f:float)  { print(n, "float") }
		local overload :: (n:int, i:int)    { print(n, "int") }
		local overload :: (n:int, s:string) { print(n, "string") }
		overload(11, 5)    -- int
		overload(12, "")   -- string
		overload(13, true) -- any
	}
	do {
		local print :: (...:any) !foreign lua "print"
		local overload :: (n:int, v:[]any)   { print(n, "any") }
		local overload :: (n:int, f:[]float) { print(n, "float") }
		local arrInt: []int    = {1, 2, 3}
		local arrStr: []string = {"a", "b"}
		local arrAny: []any    = {5, "", true}
		overload(21, arrInt) -- float
		overload(22, arrStr) -- any
		overload(23, arrAny) -- any
	}
	do {
		local print :: (...:any) !foreign lua "print"
		local overload :: (n:int, i:int, f:float) { print(n, "int,float") }
		local overload :: (n:int, f:float, i:int) { print(n, "float,int") }
		local overload :: (n:int, i1:int, i2:int) { print(n, "int,int") }
		overload(31, 1,   2) -- int,int
		overload(32, 1.0, 2) -- float,int
		overload(33, 1, 2.0) -- int,float
	}
}
--]]



-- [[ Structs and enums
--------------------------------

local MyStruct1 :: struct {
	m1     = 0,
	m2:int,
	m3:int = 10,
	m4 :: () { local m2 = true },
}
local m1 = 4

local MyStruct2 :: struct { a:IntAlias }
local IntAlias  :: int

local MyVecType :: struct { x:int; y:int, z:int }
local myVec1:MyVecType

local EntityType :: enum {
	PLAYER  :: 0x01,
	MONSTER :: 0x02;
	BUTTON  :: 0x03,
	DOOR    :: 0x04
}
local ENTITY_TYPE_PLAYER = EntityType.PLAYER

local MELEE_NAME :: "Knight"
local ClassName :: enum string {
	MELEE  :: MELEE_NAME,
	RANGED :: "Archer",
	MAGIC  :: "Mage",
}
local myClass:ClassName = ClassName.MAGIC

local Vector3 :: struct { x:int; y:int, z:int }
local myVec3:Vector3

local noCollision :: 5
local StructFreeOfCollisions :: struct { noCollision="" }

local StructWithOne :: struct { ONE::1 }
local one :: cast(int) StructWithOne.ONE

local AcceptableRecursiveStruct :: struct {
	recursive: AcceptableRecursiveStruct|none = nil,
}

local testStructs :: () {
	local Vector2 :: struct { x:float=.5; y:float }
	local myVec3a:Vector2
	local y = 1
	local myVec3b:Vector2 = {y=y}

	do {
		local Inner :: struct { innerStatic::(){} }
		local Outer :: struct { inner:Inner }
		local outer:Outer
		outer.inner.innerStatic()
	}
}

local testEnumLookups :: () {
	local TypeEnum :: enum {
		STRING :: type_of(""),
		INT    :: int,
	}

	local IntTypeAsEnum1 :: TypeEnum.INT

	local StructReferencingEnum :: struct {
		_IntTypeAsEnum2 :: TypeEnum.INT,
		_IntTypeAsEnum3 :: IntTypeAsEnum1,
	}

	local IntTypeAsEnum2 :: StructReferencingEnum._IntTypeAsEnum2
	local IntTypeAsEnum3 :: StructReferencingEnum._IntTypeAsEnum3

	local myIntFromEnum1:IntTypeAsEnum1 = 0
	local myIntFromEnum2:IntTypeAsEnum2 = 0
	local myIntFromEnum3:IntTypeAsEnum3 = 0

	local IntTypeFromCast1 :: cast(Type) TypeEnum.INT
	local IntTypeFromCast2: Type : cast(Type) TypeEnum.INT

	local myIntFromCast1:IntTypeFromCast1 = 0
	local myIntFromCast2:IntTypeFromCast2 = 0

	local step1 :: cast(Type) TypeEnum.INT
	local step2: Type : step1

	local IntEnum        :       : enum int { ONE::1 }
	local floatFromEnum1 :       = cast(float) IntEnum.ONE
	local floatFromEnum2 : float = cast(int)   IntEnum.ONE -- Implicit cast from int to float.

	local StructUsingEnum :: struct {
		someType = TypeEnum.INT,
	}
	local setType :: (instance:StructUsingEnum, theType:TypeEnum) {
		instance.someType = theType
	}
	local instanceUsingEnum:StructUsingEnum
	local strType = TypeEnum.STRING
	setType(instanceUsingEnum, strType)

	-- @Incomplete: Handle implicit casts everywhere.
	-- local FloatEnum :: enum float { ONE::1 } -- 1 should get to float here.
	-- local one = cast(int) FloatEnum.ONE
}
--]]



-- [[ Operations
--------------------------------

local unary = -5
local True  = not not true

local binary = 1+2*3

local divNum = 3/8
local divInt = 6.8 // 3.11

local advanced = 1 + 2 * 3 // 4^5 % 6

local lessInt = 5 < 1
local lessStr = "foo" < "bar"
local equal   = ("foo" == "bar") ~= false or false

local EIGHT : int : cast(int) (2.0 ^ 2.0) * 2
local TAU   :     : 3.14 * cast(type_of(5.0)) (EIGHT // 4)

local testOperations :: () {
	local getCompound :: () -> int|none { return 5 }
	local x      = cast(int) getCompound()
	local xMaybe = cast(int|none) x

	local Foo :: struct {
		status = -1;
	}
	local Thinger :: struct {
		WHAT :: "maybe ",
		name = "unnamed",
		flag = true,
		count:int,
		foo:Foo,
	}
	local thing:Thinger
	thing.name = "("..thing.name..")"
	thing["na".."me"] = thing.WHAT..Thinger.WHAT.."Rita"

	local isFemale = true
	local name     = isFemale ? "Peach" : "Berry"

	local strValue = ""
	strValue       = strValue ?: "default"
}
--]]



-- [[ Blocks
--------------------------------

local testBlocks :: () {
	local answer:int = 42
	answer = answer+1

	testBlocks()

	local returnArg :: (a:int) -> int { return a }
	returnArg(5)

	-- Lexical visibility.
	do {
		do {
			local blockVar = 1
		}
		local blockVar = 2
	}
	local blockVar = 3

	inner()
	local inner :: () {} -- Constants have higher visibility than dynamic variables.

	local flag = false or true
	if flag {
		local success = true
	}

	local n = 3
	while n > 0 {
		n = n-1
	}
}
--]]



-- [[ Multiple files
--------------------------------

export !self
!load "types.load"

export myGlobalFunc :: () {}

local useImportedNamespace :: () {
	funcInOtherFile(5)
}

local testModules1 :: () {
	testFunction()
	!import "test"
}
local testModules2 :: () {
	local lib :: !import "test"
	lib.testFunction()
}
local testModules3 :: () {
	lib2.testFunction()
	local lib2 :: lib1
	local lib1 :: !import "test"
}
local testModulesNon :: () {
	local testFunction :: () {}
	testFunction()
}
--]]



-- [[ Lists of things
--------------------------------

local testLists :: () {
	local printString :: (s:string) !foreign lua "print"
	printString("Hello, Lua!")

	local printAny :: (v:any) !foreign lua "print"
	printAny("Hello, Lua!")
	printAny(123)

	local maybeInt1        : int|none                  = 0
	local maybeInt2        : type_of(maybeInt1)        = 0
	local maybeIntOrString : type_of(maybeInt1)|string = ""

	local printStringOrInt :: (v:string|int) !foreign lua "print"
	printStringOrInt("Hello, Lua!")
	printStringOrInt(123)

	local printStrings :: (...:string) !foreign lua "print"
	printStrings("Hello, ", "Lua!")
	printStrings()
	local print :: (...:any) !foreign lua "print"
	print("Hello", 123, true, "Lua!")
	print()

	local getValues :: () -> string, int { return "GET", 100 }
	print(true, getValues())

	local getVararg :: () -> ...int { return 1, 2, 3 }
	local takeThreeMaybe :: (x,y,z:int|none) {}
	takeThreeMaybe(10, getVararg(), 30)
	takeThreeMaybe(10, 20, (getVararg()))

	local getAtLeastOne :: () -> int, ...int { return 1, 2, 3 }
	local takeExactlyThree :: (x:int, y:int, z:int) {}
	takeExactlyThree(10, 20, (getAtLeastOne()))
	takeExactlyThree(10, getAtLeastOne(), 30)

	local takeAndReturnVararg :: (...:int) -> ...int {
		local a1, a2 = ...
		local b1, b2 = 1, ...
		local c1, c2 = 1, (...)
		local d1, d2 = ..., 2
		local e1, e2 = (...), 2
		local typeOfVararg = type_of(...) -- Should be int.
		if ... == nil {}
		return ...
	}
	local x, y = takeAndReturnVararg(1, 2, 3)
	local typeOfX :: type_of(x) -- Value should be int|none.
	local typeOfY :: type_of(y) -- Value should be int|none.
	local takeOneIntMaybe :: (x:int|none) {}
	takeOneIntMaybe(x)
	takeOneIntMaybe(y)
	if x ~= nil and y ~= nil {
		local x1 = cast(       int|none) x
		local y1 = cast(string|int|none) y
		local x2 = cast(int) x
		local y2 = cast(int) y
		takeAndReturnVararg(x2, y2, x2, y2)
	}

	local getIntVararg :: () -> ...int { return void }
	local useIntVararg :: (...:int) {}
	useIntVararg(getIntVararg())

	-- @Polish: Make this work (or disallow this specific compound type).
	-- local negateNumber : int|float = 0
	-- negateNumber = -negateNumber
}
--]]



-- [[ Using
--------------------------------

local testUsing :: () {
	do {
		local House :: struct {
			HAS_ROOF :: true,
			floors    = 1,
			rooms     = 1,
		}
		local smallHouse:House
		using smallHouse
		local canSeeSky :: not HAS_ROOF
		local moreFloors = floors+1
		rooms = 2
	}

	do {
		local Fish :: struct {
			CAN_SWIM :: true,
			length    = 1,
		}
		using Fish
		local canWalk = not CAN_SWIM
	}

	do {
		local Choice :: enum { A::"a", B::"b", C::"c" }
		using Choice
		local choiceA = A
	}

	do {
		using local Choice :: enum { A::"a", B::"b", C::"c" }
		local choiceA = A

		local SomeStruct :: struct { theChoice=Choice.A }
		local typeVar = SomeStruct

		local getChoice :: () -> type_of(SomeStruct.theChoice) {
			using Choice
			return C
		}
		local myChoice = getChoice()

		local usingArg :: (using some:SomeStruct) {
			theChoice = B
		}
		local mySome:SomeStruct
		usingArg(mySome)
	}
}
--]]




-- [[ Arrays and loops
--------------------------------

local testArraysAndLoops :: () {
	local print  :: (...:any) !foreign lua "print"
	local insert :: (arr:[]int, item:int) !foreign lua "table.insert"

	do {
		local ints : []int
		insert(ints, 5)
		local x      = ints[1]
		local length = #ints
		ints[1]      = 10
	}

	for i = 1, 3  print(i)

	local times = 5
	for 1, times, 2 {
		it = it*2
		print(it)
	}

	do {
		local ints : []int
		insert(ints, 10)
		insert(ints, 20)
		for        ints  print(itIndex, it*it)
		for n    : ints  print(itIndex, n*n)
		for n, i : ints  print(i,       n*n)
	}

	do {
		local inext :: (ints:[]int, i:int) -> int|none, int {
			if ints[i+1] == NULL  return nil, 0
			return i+1, ints[i+1]
		}
		local ints : []int
		insert(ints, 10)
		insert(ints, 20)
		for i, n in inext, ints, 0  print("inext", i, n*n)
	}
	do {
		local next :: (t:table, k:any) -> any, any !foreign lua "next"
		local ints : []int
		insert(ints, 10)
		insert(ints, 20)
		for k, v in next, ints, nil  print("next", k, cast(int)(v)^2) -- Note: Arrays are compatible with tables.
	}

	do {
		local IntArrayIterator :: (arr:[]int, i:int) -> (i:int|none, item:int)
		local ipairs :: (arr:[]int) -> (iter:IntArrayIterator, arr:[]int, init:int) !foreign lua "ipairs"
		local ints : []int
		insert(ints, 10)
		insert(ints, 20)
		for i, n in ipairs(ints)  print("ipairs", i, n*n)
	}

	do {
		local ints : []int = {10,20,30}
		for ints {
			print(it)
			if itIndex == 2  break
		}
		local printLength :: (arr:[]any) {
			print("Length:", #arr)
		}
		printLength({"a","b"})
	}

	for x = 1, 5 {
		for y = 1, 5 {
			if x == 5 and y == 2  break(x)
			if x+y == 5  break
			print(x, y)
		}
	}
}
--]]




-- [[ Misc
--------------------------------

local testMisc :: () {
	local print    :: (...:any) !foreign lua "print"
	local tostring :: (v:any) -> string !foreign lua "tostring"

	local codepointX = !char "X"
	local codepoint龠 = !char "龠"
	local nonsense:int = codepoint龠-codepointX

	local TableIterator :: (t:table, k:any) -> (k:any, item:any)
	local pairs :: (t:table) -> (iter:TableIterator, t:table, init:any) !foreign lua "pairs"
	local LUA_VERSION:string : !foreign lua "_VERSION"
	local luaEnv:table       = !foreign lua "_G"
	for k, v in pairs(luaEnv) {
		print("_G."..tostring(k), v)
	}

	local FOREIGN_STRING : string : !foreign lua "_VERSION"
	local FOREIGN_ALIAS :: FOREIGN_STRING
	local localString = FOREIGN_ALIAS.." test"
	print("localString", localString)

	local STRING_CONST :: "TEST"
	!assert STRING_CONST
}

local shadowed1:int
local shadowed2:int
local testShadow :: (shadowed1:int=1 !shadow, x:int=2) {
	local shadowed2:int = 5 !shadow
}

-- @Incomplete: Make this work. (Actually, it should be an error in this case.)
-- local  LOCAL_STRING :: ""
-- export fileScopeShadowingGlobal = LOCAL_STRING
-- local  fileScopeShadowingGlobal = 1 !shadow
--]]



local main :: () {} -- So the test suite doesn't trip.
