--
-- Type test.
--



--[[ Simple declarations.
--------------------------------

local myNum1 = 10
local myNum2:int = 20
local myNum3 = int

local myVar:MyType2 = 555
local MyType2 :: MyType1
local MyType1 :: int

local myInt = 10
local myInt2 : typeOf(myInt)

---- Things that should result in an error.

-- local coolVar:CoolType3 = true
-- local CoolType3 :: CoolType2
-- local CoolType2 :: CoolType1
-- local CoolType1 :: 5 -- Ints are not types!

-- local myVar :: string -- Redeclaration.

-- local possible = nope -- Undeclared identifier.

-- local maybe : typeOf(nope) -- Undeclared identifier.

-- local a:b -- Circular dependency.
-- local b:a

-- @Incomplete:
-- local myInt3 : typeOf(myInt) = "nope" -- Type/value type mismatch.
--]]



-- [[ Functions.
--------------------------------

local main :: () -> void {}

local oneInTwoOut :: (a:int) -> int, int { return a, 2*a }
local one, two, three : int = 5, oneInTwoOut(99)

local oneInTwoOut2 :: (a:int) -> int, string { return a, 2*a }
local one2, two2, three2 = 5, oneInTwoOut2(99)

-- local mySig :: (arg1:string, arg2,arg3:int) -> bool, string
-- local mySig :: (arg1:string, arg2:int) -> bool, string
-- local mySig :: (arg1:string, arg2,arg3:string) -> bool, string
-- local myFunc:mySig : (arg1:string, arg2,arg3:int) -> bool, string {}

-- local mySig :: (a:int,b:nope) -- Error: Undeclared identifier.

---- Things that should result in an error.

-- local oneInNoneOut :: (a:int) { return a, 2*a }
-- local x, y, z : int = 5, oneInNoneOut(99) -- Nothing for y (nor z).

-- local oneInOneOut :: (a:int) -> int { return a, 2*a }
-- local x, y, z : int = 5, oneInOneOut(99) -- Nothing for z.

-- local func :: (a:int) -> int, string { return a, "foo" }
-- local x, y, z : int = 5, func(99) -- Type mismatch for 'z'.

-- @Incomplete:
-- local func :: (a:int) -> int { return a }
-- local x, y = func() -- Missing args for func()
--]]


