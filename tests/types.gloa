--
-- Type test.
--



-- [[ Simple declarations.
--------------------------------

local myNum1      = 10
local myNum2:int  = 20
local myNum3      = myNum2
local myNum4:int  = myNum1
local myTyp1      = int
local myTyp2:type = int

local MyType1 :: int
local MyType2 :: MyType1
local myVar1:MyType1 = 555
local myVar2:MyType2 = 555

local myInt1 = 100
local myInt2 : typeOf(myInt1)
local myInt3 : typeOf(myVar2) = 7

-- @Incomplete:
-- ...

---- Things that should result in an error.

-- local bad:5555 = int -- 5555 is not a type. (Parsing error.)
-- local bad:int = "foo" -- Type/value type mismatch.
-- local bad:type = 50 -- Type/value type mismatch.
-- local bad : typeOf(myInt1) = "nope" -- Type/value type mismatch.

-- local badVar:BadType3 = 99 -- The int 5 is not a type.
-- local BadType3 :: BadType2
-- local BadType2 :: BadType1
-- local BadType1 :: 5

-- local myVar1 :: string -- Redeclaration.

-- local bad:badType -- Undeclared type/identifier.
-- local bad:badType(5, int) -- Undeclared type/identifier.
-- local bad = badVar -- Undeclared identifier.
-- local bad = badFunc() -- Undeclared identifier.
-- local bad : typeOf(badVar) -- Undeclared identifier.

-- local a:b -- Circular dependency.
-- local b:a

-- @Incomplete:
-- ...
--]]



-- [[ Functions.
--------------------------------

local main :: () -> void {}

local oneInTwoOut :: (a:int) -> int, int { return a, 2*a }
local one, two, three : int = 5, oneInTwoOut(99)

local oneInTwoOut2 :: (a:int) -> int, string { return a, 2*a }
local one2, two2, three2 = 5, oneInTwoOut2(99)

local mySig :: (arg1:string, arg2,arg3:int) -> bool, string
local myFunc:mySig : (arg1:string, arg2,arg3:int) -> bool, string {}

---- Things that should result in an error.

-- local oneInNoneOut :: (a:int) { return a, 2*a }
-- local x, y, z : int = 5, oneInNoneOut(99) -- Nothing for y (nor z).

-- local oneInOneOut :: (a:int) -> int { return a, 2*a }
-- local x, y, z : int = 5, oneInOneOut(99) -- Nothing for z.

-- local func :: (a:int) -> int, string { return a, "foo" }
-- local x, y, z : int = 5, func(99) -- Type mismatch for 'z'.

-- local mySig2 :: (arg1:string, arg2:int) -> bool, string
-- local myFunc2:mySig2 : (arg1:string, arg2,arg3:int) -> bool, string {}

-- local mySig3 :: (arg1:string, arg2,arg3:string) -> bool, string
-- local myFunc3:mySig3 : (arg1:string, arg2,arg3:int) -> bool, string {}

-- local mySig :: (a:int,b:nope) -- Undeclared identifier.

-- @Incomplete:
-- local func :: (a:int) -> int { return a }
-- local x, y = func() -- Missing args for func()
--]]



--[[ Structs.
--------------------------------

local Vec3 :: struct {x=0, y:int, z:int=10}
local myVec3:Vec3 = {x=1}
--]]


