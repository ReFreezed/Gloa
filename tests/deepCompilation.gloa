--
-- Deep compilation test.
--

!import "basic"
!import "string"
!import "os"
!import "compiler"

!run {
	local options      = getBuildOptions()
	options.outputType = BuildOutputType.NONE
	setBuildOptions(options)

	-- compileApps({
	-- 	"deepCompilation.1.gloa",
	-- 	"deepCompilation.2.gloa",
	-- })

	compileLuaModule()
}

local compileApps :: (filenames:[]string) {
	for filenames {
		print("Compiling "..it.."...")
		compile(it)
	}
	print("Both compiled!")

	for filenames {
		local path
			= getProjectDirectory().."/"
			..replacePattern(it, "%.gloa$", ".lua")

		print("Running "..path.."...")

		local args: []string = {path}
		local ok, err, code  = execute("lua", args)

		if not (ok and code == 0)
			error(err ?: "Failed!")
	}
	print("Both ran!")
}

local compileLuaModule :: () {
	local FILENAME = "deepCompilation.luaModule.gloa"
	print("Compiling "..FILENAME.."...")
	compile(FILENAME)

	local path
		= getProjectDirectory().."/"
		..replacePattern(FILENAME, "%.gloa$", ".lua")

	local requireLuaModuleByPath :: (path:string, $ModuleType:type) -> ModuleType !foreign lua "dofile"

	local luaModule = requireLuaModuleByPath(path, !foreign struct {
		foo:   string           = NULL,
		func:  ()               = NULL,
		round: (x:float) -> int = NULL,
	})

	printf("foo = %s", luaModule.foo)
	luaModule.func()
	printf("round(11.65) = %d", luaModule.round(11.65))
}
