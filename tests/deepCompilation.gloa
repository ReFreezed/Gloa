--
-- Deep compilation test.
--

!import "basic"
!import "string"
!import "os"
!import "compiler"

!run {
	local options      = getBuildOptions()
	options.outputType = BuildOutputType.NONE
	setBuildOptions(options)

	local FILENAMES :: {
		"deepCompilation.1.gloa",
		"deepCompilation.2.gloa",
	}

	compileApps(FILENAMES)
	compileLuaModule()
	compileUsingMessageSystem(FILENAMES[1])

	print("All sub-compilations done!")
}

local compileApps :: (filenames:[]string) {
	for filenames {
		print("Compiling "..it.."...")
		compile(it)
	}
	print("Both compiled!")

	for filenames {
		local path
			= getProjectDirectory().."/"
			..replacePattern(it, "%.gloa$", ".lua")

		print("Running "..path.."...")

		local args: []string = {path}
		local ok, err, code  = execute("lua", args)

		if not (ok and code == 0)
			error(err ?: "Failed!")
	}
	print("Both ran!")
}

local compileLuaModule :: () {
	local FILENAME = "deepCompilation.luaModule.gloa"
	print("Compiling "..FILENAME.."...")
	compile(FILENAME)

	local path
		= getProjectDirectory().."/"
		..replacePattern(FILENAME, "%.gloa$", ".lua")

	local requireLuaModuleByPath :: (path:string, $ModuleType:type) -> ModuleType !foreign lua "dofile"

	local luaModule = requireLuaModuleByPath(path, !foreign struct {
		foo:   string           = NULL,
		func:  ()               = NULL,
		round: (x:float) -> int = NULL,
	})

	printf("foo = %s", luaModule.foo)
	luaModule.func()
	printf("round(11.65) = %d", luaModule.round(11.65))
}

local compileUsingMessageSystem :: (filename:string) {
	print("Intercepted compilation of "..filename.."...")

	local state = newCompilation(filename)
	defer compilerFinish(state)

	while true {
		using CompilerMessage.Kind

		local hasMessage, message = compilerWaitForMessage(state)
		if not hasMessage  break

		if message.kind == {
			case COMPILATION_PHASE:
				local phaseMessage = cast(CompilerMessageCompilationPhase) message
				using phaseMessage.phase

				if !complete phaseMessage.phase == {
					case SOURCE_CODE_PARSED:
						print("Message phase SOURCE_CODE_PARSED")
					case PRE_WRITE_OUTPUT:
						print("Message phase PRE_WRITE_OUTPUT "..phaseMessage.outputPath)
					case POST_WRITE_OUTPUT:
						print("Message phase POST_WRITE_OUTPUT "..phaseMessage.outputPath)
				}

			case FILE:
				local fileMessage = cast(CompilerMessageFile) message
				print("Message file "..fileMessage.path)

			case CODE_TYPECHECKED:
				local typechecked = cast(CompilerMessageCodeTypechecked) message
				local decl        = typechecked.declaration
				printf("Message typechecked %s @ %s:%d", decl.name, decl.filepath, decl.lineNumber)

				for note, i: decl.notes {
					printf("    Note %d: %d", i, note)
				}

			case COMPLETE:
				print("Message complete")

			case:
				printf("Message (kind=%d)", cast(int) message.kind)
		}
	}
}
