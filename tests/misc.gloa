--
-- Example Gl√≥a code
--



-- Control structures.
----------------------------------------------------------------

local foo :: () {
	local arr:[]int = {1,2,3}

	-- If statement.
	if 5 < 1
		print("No way!")
	elseif arr
		print('Arr is a '..type(arr))
	else
		print([[This cannot be!]])

	-- Do scope.
	do {
		local x = a()
	}
	local x = 4 -- No shadowing happens here so this is ok.

	-- For loops.
	-- Short:
	for 1, 3
		print(it)
	for arr
		print(itIndex, it)
	for v: arr
		print(itIndex, v)
	for v, i: arr
		print(i, v)
	-- Traditional:
	for i = 1, 3
		print(i)
	for i = 3, 1, -1
		print(i)
	for i, v in ipairs(arr)
		print(i, v)
	for k, v in next, t, nil
		print(k, v)
	-- Custom:
	for v1, v2, v3: obj -- Using a defined default iterator.
		print(i, v)
	for v1, v2, v3 in myIterator, obj
		print(v1, v2, v3)

	-- While loop. (There's no repeat/until loop (yet?))
	local x = 10
	while x > 0
		x -= 1

	-- Loop control.
	for x = 1, 10 {
		if x == 7  continue

		for y = 1, 10 {
			if x-y == 0  continue

			if y == 10 and x < 5  break x -- Break from the outer loop.

			print("x"..x.." y"..y)
		}
	}

	-- Switch statement.
	local count = 2

	if count == {
		case 1: print("We got one!")

		case 2: !through
		case 3: print("We got two or three!")

		case:
			printf("We got %d...", count)
			print("That's a lot!")
	}

	-- Defer.
	do {
		local file, err = io.open("dog.png", "rb")
		if not file {
			print("Error: "..err)
		} else {
			defer file:close()

			local contents = file:read"*a"
			print("File size: "..#contents)
		} -- Defer fires here at scope exit.
	}
}



-- Variables/contants.
----------------------------------------------------------------

-- Variables.
local a          = 0 -- Inferred type.
local b : number = 0 -- Explicit type.
local c : number     -- Getting a default value.

-- Constants.
local A :        : 0 -- Inferred type.
local B : number : 0 -- Explicit type.



-- Functions.
----------------------------------------------------------------

-- File-scope.
local a :: (n:number) -> number {
	if n == 0  return n
	return a()+b() -- b exists! Order doesn't matter in file scope.
}
local b : (n:number)->number : (n:number)->number { -- Explicit type for function. Verbose and unnecessary, but valid.
	return a()
}

-- Global scope.
global callMeAnytime :: () -> void {
	foo()
}

-- Main function. (The program's entry point.)
local main :: () { -- The return type can be omitted if the function returns nothing (void).
	print("We're on!")
}

-- @Incomplete: Named arguments.
-- @Incomplete: !must for returns.



-- Types.
----------------------------------------------------------------

local doer :: (n:number, t1,t2:table, any:*, optional:int=10) -> success:bool {
	local sum = n + #t1 + #t2 + optional

	print("Sum is "..sum)
	print("Any:", any)

	return true
}

local func :: () {
	local integers:[]int = {1,2,3}

	local words:table = nil
	words = {"Hello", id=5}
	words[2] = "World"

	local ok = doer(5, cast(table)integers, words, func)
}

local multiply :: (...:number) -> result:number=0 {
	-- (Is it good having return args be automaticly declared vars?
	-- Maybe the returned args should only be able to have default values.)
	for ...  result *= it
	return result
}



-- Enums and data structures.
----------------------------------------------------------------

local EntityType :: enum {
	PLAYER  = 0x01,
	MONSTER = 0x02,
	BUTTON  = 0x03,
	DOOR    = 0x04,
}

local Id        :      : int
local AnotherId : type : int

local Entity :: struct {
	entityType: EntityType,
	id:         Id,

	x = 0.0,
	y = 0.0,
}

local testEnum :: () {
	local ent:Entity = {x=5, y=7}

	local entType:EntityType = MONSTER

	if !complete entType == {
		case PLAYER:  say("Hello.")
		case MONSTER: say("Rawr!")
		case BUTTON:  say("Click")
		case DOOR:    say("Slam")
	}
}

-- @Incomplete: "Sub structs".



-- Polymorphism/overloading.
----------------------------------------------------------------

local testStuff :: () {
	printValue("Feather in a hat")
	printValue(-98)
	print(performConcat("boats"))
	print(performConcat(12345))
}

local printValue :: (value:string) {
	print("Value is the string '"..value.."'.")
}
local printValue :: (value:number) {
	print("Value is the number '"..value.."'.")
}

local performConcat :: (v:string|number) -> string {
	return "safe concat: "..v
}

local justReturnIt :: (v:$T/Entity) -> T {
	print("Type:", T)
	return v
}

-- Parameterized struct.
local Wrapper :: struct (T:type, n:int=0) {
	value: T,
	num: int = n,
}

--
-- @Incomplete: Operator overloading on structs, somehow? (We need metatables which
-- might be outside of the compiler's scope. Maybe we don't allow metatables?)
--
-- Actually, do we need metatables? Can't we just desugar
--   local a, b: MyObject
--   local c = a+b
-- into
--   local a, b: MyObject
--   local c = add(a, b)
-- ? 2019-11-18
--



-- Metaprogram. (Recursive, even!)
----------------------------------------------------------------

local prog :: () {
	local something = !run getSomething()
	print(something)
}

local LOCATION :: !run getLocation("[", "]")

local getSomething :: () -> string {
	return "Quite a 'something' right "..LOCATION.."."
}

local getLocation :: (prefix,suffix:string) -> string {
	local where = math.random() < 0.5 and "here" or "there"
	return prefix..where..suffix
}

-- @Incomplete: !if



-- Generation/introspection.
----------------------------------------------------------------

local printString5Times :: (s:string) !bodyText {
	local buffer:[]string

	for 1, 5  tableInsert(buffer, "print(s)")

	return tableConcat(buffer)
}

-- @Incomplete: Introspection.



-- Modules.
----------------------------------------------------------------

-- Add the exports of modules as locals here.
useLibrary "assetManager" -- Looks in some common folder on the computer. (Should we use the word "use" here?)
use        "appFunctions" -- Looks in the local project folder.

-- Grab things from modules into local identifiers.
local utils        :: use "utilities"
local stringConcat :: utils.stringConcat

local bar :: () {
	print("A humble tumble.")

	local s:string = stringConcat({"A","humble","tumble."}, " ")
	print(s)
}

export {
	printString5Times = printString5Times,

	bat = () {
		print("Screech!")
	},

	someValue = 8,
}

-- JAI
-- pow :: (x: float, power: float) -> float #foreign Crt "powf";


