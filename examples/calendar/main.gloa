--[[============================================================
--=
--=  Example program: Calendar
--=  by Marcus 'ReFreezed' ThunstrÃ¶m
--=
--=  Requires wxLua to run!
--=
--=  Tested with:
--=  - wxLua 2.8.7.0 / wxWidgets 2.8.8
--=
--============================================================]]

local ESCAPE_CLOSES_APP :: false

export !import "basic"
export !import "io"
export !import "math"
export !import "os"

export !import "wx/common"
export !import "wx/wxadv_adv"
export !import "wx/wxbase_base"
export !import "wx/wxbase_datetime"
export !import "wx/wxcore_appframe"
export !import "wx/wxcore_controls"
export !import "wx/wxcore_core"
export !import "wx/wxcore_defsutils"
export !import "wx/wxcore_dialogs"
export !import "wx/wxcore_event"
export !import "wx/wxcore_gdi"
export !import "wx/wxcore_menutool"
export !import "wx/wxcore_sizer"
export !import "wx/wxcore_windows"
export !import "wx/wxlua"

export !self
export !load "paint"

local connectEvent :: (window:wxWindow,                eventType:wxEventType, onEvent:(event:wxCloseEvent  )) { window.Connect!(    eventType, cast((event:wxEvent)) cast(any) onEvent) }
local connectEvent :: (window:wxWindow, id:wxWindowID, eventType:wxEventType, onEvent:(event:wxCloseEvent  )) { window.Connect!(id, eventType, cast((event:wxEvent)) cast(any) onEvent) }
local connectEvent :: (window:wxWindow,                eventType:wxEventType, onEvent:(event:wxCommandEvent)) { window.Connect!(    eventType, cast((event:wxEvent)) cast(any) onEvent) }
local connectEvent :: (window:wxWindow, id:wxWindowID, eventType:wxEventType, onEvent:(event:wxCommandEvent)) { window.Connect!(id, eventType, cast((event:wxEvent)) cast(any) onEvent) }
local connectEvent :: (window:wxWindow,                eventType:wxEventType, onEvent:(event:wxKeyEvent    )) { window.Connect!(    eventType, cast((event:wxEvent)) cast(any) onEvent) }
local connectEvent :: (window:wxWindow, id:wxWindowID, eventType:wxEventType, onEvent:(event:wxKeyEvent    )) { window.Connect!(id, eventType, cast((event:wxEvent)) cast(any) onEvent) }
local connectEvent :: (window:wxWindow,                eventType:wxEventType, onEvent:(event:wxMenuEvent   )) { window.Connect!(    eventType, cast((event:wxEvent)) cast(any) onEvent) }
local connectEvent :: (window:wxWindow, id:wxWindowID, eventType:wxEventType, onEvent:(event:wxMenuEvent   )) { window.Connect!(id, eventType, cast((event:wxEvent)) cast(any) onEvent) }
local connectEvent :: (window:wxWindow,                eventType:wxEventType, onEvent:(event:wxMouseEvent  )) { window.Connect!(    eventType, cast((event:wxEvent)) cast(any) onEvent) }
local connectEvent :: (window:wxWindow, id:wxWindowID, eventType:wxEventType, onEvent:(event:wxMouseEvent  )) { window.Connect!(id, eventType, cast((event:wxEvent)) cast(any) onEvent) }
local connectEvent :: (window:wxWindow,                eventType:wxEventType, onEvent:(event:wxPaintEvent  )) { window.Connect!(    eventType, cast((event:wxEvent)) cast(any) onEvent) }
local connectEvent :: (window:wxWindow, id:wxWindowID, eventType:wxEventType, onEvent:(event:wxPaintEvent  )) { window.Connect!(id, eventType, cast((event:wxEvent)) cast(any) onEvent) }

--[[ @Compiler @Incomplete: Make this kind of polymorphism work.
local connectEvent :: (window:wxWindow, eventType:wxEventType, onEvent:(event:$T)) {
	connectEvent(window:wxWindow, wxID_ANY, eventType, onEvent)
}
local connectEvent :: (window:wxWindow, id:wxWindowID, eventType:wxEventType, onEvent:(event:$T)) {
	-- @Robustness: Assert that T is wxEvent.
	window.Connect!(eventType, cast((event:wxEvent)) cast(any) onEvent)
	-- window.Connect!(eventType, cast((event:wxEvent)) onEvent) -- @Compiler @Incomplete: Make this explicit cast work.
}
--]]

local newButton :: (parent:wxWindow, id:wxWindowID, caption:string, size:wxSize, onPress:(event:wxCommandEvent)) -> wxButton {
	local button = wxButton(parent, id, caption, wxDefaultPosition, size)
	connectEvent(button, id, wxEVT_COMMAND_BUTTON_CLICKED, onPress)
	return button
}
local newButton :: (parent:wxWindow, id:wxWindowID, caption:string, onPress:(event:wxCommandEvent)) -> wxButton {
	return newButton(parent, id, caption, wxDefaultSize, onPress)
}

local updateWindow :: (window:wxWindow) {
	window.Refresh!()
	window.Update!()
}

local theFrame:    wxFrame  = NULL
local paintWindow: wxWindow = NULL
local monthOffset           = 0

local main :: () {
	local wxJustDont = wxLogNull()

	disableBuffering(STDOUT)
	disableBuffering(STDERR)

	theFrame = wxFrame(
		wxWindow.null,
		wxID_ANY,
		"Calendar",
		wxDefaultPosition,
		wxSize(800, 600)
	)
	theFrame.SetMinSize!(wxSize(560, 300))

	connectEvent(theFrame, wxEVT_CHAR_HOOK, (event:wxKeyEvent) { -- We cannot catch wxEVT_KEY_DOWN "globally" so we use wxEVT_CHAR_HOOK instead.
		local key   = event.GetKeyCode!()
		-- print("EVT_CHAR_HOOK", key)

		if key == WXK_ESCAPE and ESCAPE_CLOSES_APP {
			theFrame.Close!(true)
		} else {
			event.Skip!()
		}
	})

	connectEvent(theFrame, wxEVT_CLOSE_WINDOW, (event:wxCloseEvent) {
		event.Skip!()
		-- wxGetApp().ExitMainLoop!() -- Does this fix the rare ghost process bug?
	})

	theFrame.CreateStatusBar!() -- Note: Without a status bar we crash when the mouse cursor is over the window for some reason.

	--

	local fileMenu = wxMenu()
	fileMenu.Append!(wxID_EXIT, "E&xit", "Exit the program")

	connectEvent(theFrame, wxID_EXIT, wxEVT_COMMAND_MENU_SELECTED, (event:wxMenuEvent) {
		theFrame.Close!(true)
	})

	local helpMenu = wxMenu()
	helpMenu.Append!(wxID_ABOUT, "&About", "About Calendar")

	connectEvent(theFrame, wxID_ABOUT, wxEVT_COMMAND_MENU_SELECTED, (event:wxMenuEvent) {
		local text = "Calendar\nGloa Example Program\n\nRunning "..wxLUA_VERSION_STRING.." built with "..wxVERSION_STRING
		wxMessageBox(text, "About Calendar", wxOK+wxICON_INFORMATION, theFrame)
	})

	local menuBar = wxMenuBar()
	menuBar.Append!(fileMenu, "&File")
	menuBar.Append!(helpMenu, "&Help")

	theFrame.SetMenuBar!(menuBar)

	--

	local panel      = wxPanel(theFrame, wxID_ANY)
	local panelSizer = wxBoxSizer(wxVERTICAL)
	panel.SetSizer!(panelSizer)

	-- @Incomplete: Use a wxToolBar instead of buttons here.
	local navigation      = wxPanel(panel, wxID_ANY)
	local navigationSizer = wxBoxSizer(wxHORIZONTAL)
	navigation.SetSizer!(navigationSizer)

	local buttonGotoPrevious = newButton(navigation, wxID_ANY, "Previous month", (event:wxCommandEvent) {
		monthOffset -= 1
		updateWindow(paintWindow)
	})
	local buttonGotoCurrent = newButton(navigation, wxID_ANY, "Today", (event:wxCommandEvent) {
		monthOffset = 0
		updateWindow(paintWindow)
	})
	local buttonGotoNext = newButton(navigation, wxID_ANY, "Next month", (event:wxCommandEvent) {
		monthOffset += 1
		updateWindow(paintWindow)
	})

	navigationSizer.Add!(buttonGotoPrevious, 1, wxGROW)
	navigationSizer.Add!(buttonGotoCurrent,  1, wxGROW)
	navigationSizer.Add!(buttonGotoNext,     1, wxGROW)

	-- There is a calendar control in wxWidgets but we're not gonna use that. :)
	-- Instead we'll create a window to paint the calendar in and manually add any functionality we want.
	paintWindow = wxWindow(
		panel, wxID_ANY, wxDefaultPosition, wxDefaultSize,
		wxNO_BORDER + wxFULL_REPAINT_ON_RESIZE -- wxFULL_REPAINT_ON_RESIZE fixes garbage along the edges when resizing the frame.
	)

	connectEvent(paintWindow, wxEVT_MOTION, (event:wxMouseEvent) {
		local mx, my = event.GetPositionXY!()
		theFrame.SetStatusText!(format("Mouse: [%d, %d]", mx, my))
	})
	connectEvent(paintWindow, wxEVT_LEAVE_WINDOW, (event:wxMouseEvent) {
		theFrame.SetStatusText!("")
	})
	connectEvent(paintWindow, wxEVT_MOUSEWHEEL, (event:wxMouseEvent) {
		monthOffset -= getSign0(event.GetWheelRotation!())
		updateWindow(paintWindow)
	})

	connectEvent(paintWindow, wxEVT_PAINT, (event:wxPaintEvent) {
		drawCalendar()
	})

	panelSizer.Add!(navigation, 0, wxGROW)
	panelSizer.Add!(paintWindow, 1, wxGROW)

	preparePaint()

	--

	theFrame.SetDefaultItem!(paintWindow)
	panel.SetAutoLayout!(true)

	theFrame.Center!()
	paintWindow.SetFocus!()
	theFrame.Show!()

	wxGetApp().MainLoop!()

	print("Exiting...")
	exit(0) -- Does this fix the rare ghost process bug?
}

local getWeekday :: (date:wxDateTime) -> int {
	local _, weekday = stringToInt(date.Format!("%w"))
	return (weekday-1)%7+1 -- 1=monday, 7=sunday
}
local getMonthDay :: (date:wxDateTime) -> int {
	local _, monthDay = stringToInt(date.Format!("%d"))
	return monthDay
}

local drawCalendar :: () {
	local ww, wh = paintWindow.GetClientSizeWH!()
	local dc     = wxPaintDC(paintWindow)

	local date = wxDateTime()

	date.SetToCurrent!()
	local todayWeekday  = getWeekday(date)
	local todayMonthDay = getMonthDay(date)

	date.SetDay!(1)
	date.Add!(wxDateSpan(0, monthOffset))
	local weekday = getWeekday(date)

	date.SetToLastMonthDay!()
	local _, daysInMonth = stringToInt(date.Format!("%d"))

	local HEADER_HEIGHT :: 50
	local VISIBLE_WEEKS :: 6

	local viewX = 0
	local viewY = HEADER_HEIGHT
	local viewW = ww
	local viewH = wh-HEADER_HEIGHT
	local dayW  = viewW/7
	local dayH  = viewH/VISIBLE_WEEKS

	local getDayLayout :: (viewX,viewY:int, dayW,dayH:float, weekday,row:int) -> (dayX,dayY:int, w,h:int) {
		local x = viewX+(weekday-1)*dayW
		local y = viewY+(row    -1)*dayH
		return round(x), round(y), round((x+dayW)-round(x)), round((y+dayH)-round(y))
	}

	-- Grid background.
	setColor(.9, .9, .7)
	drawRectangleFill(dc, 0, 0, ww, wh)

	-- Weekend background.
	do {
		local x = round(5*dayW)
		setColor(.8, .7, .5)
		drawRectangleFill(dc, viewX+x, viewY, viewW-x, viewH)
	}

	-- Shadow of days before current month.
	setColor(.4)
	if weekday > 1 {
		local w = round((weekday-1)*dayW)
		drawRectangleFill(dc, viewX, viewY, w, dayH)
	}

	-- Header with month, year and weekday texts.
	setFont(dc, 11)

	do {
		local monthNames: []string : {
			"January",
			"February",
			"March",
			"April",
			"May",
			"June",
			"July",
			"August",
			"September",
			"October",
			"November",
			"December",
		}
		local _, month     = stringToInt(date.Format!("%m"))
		local text         = format("%s %s", monthNames[month], date.Format!("%Y"))
		local textW, textH = getTextDimensions(dc, text)
		local spacingY     = (HEADER_HEIGHT-2*textH)/3

		setColor(wxSystemSettings.GetColour(wxSYS_COLOUR_3DFACE))
		drawRectangleFill(dc, 0, 0, ww, HEADER_HEIGHT)
		setColor(0)
		drawText(dc, text, (ww-textW)/2, spacingY)
	}

	for weekdayCurrent = 1, 7 {
		local weekdayNames: []string : {
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday",
			"Sunday",
		}
		local text         = weekdayNames[weekdayCurrent]
		local textW, textH = getTextDimensions(dc, text)
		local dayX         = getDayLayout(viewX, viewY, dayW, dayH, weekdayCurrent, 1)
		local spacingY     = (HEADER_HEIGHT-2*textH)/3

		drawText(dc, text, dayX+(dayW-textW)/2, 2*spacingY+textH)
	}

	-- Day texts.
	weekday   -= 1
	local row  = 1

	setFont(dc, 15)
	setColor(0)

	for monthDay = 1, daysInMonth {
		weekday += 1
		if weekday > 7 {
			weekday  = 1
			row     += 1
		}

		local text       = format("%d", monthDay)
		local dayX, dayY = getDayLayout(viewX, viewY, dayW, dayH, weekday, row)

		-- Highlight current date.
		if monthDay == todayMonthDay and monthOffset == 0 {
			setColor(1)
			drawRectangleFill(dc, dayX, dayY, dayW, dayH)
			setColor(0)
		}

		drawText(dc, text, dayX+4, dayY+2)
	}

	-- Shadow of days after current month.
	setColor(.4)
	if weekday < 7 {
		local x = round(weekday*dayW)
		local y = round((row-1)*dayH)
		drawRectangleFill(dc, viewX+x, viewY+y, viewW-x, round(row*dayH)-y)
	}
	if row < VISIBLE_WEEKS {
		local y = round(row*dayH)
		drawRectangleFill(dc, viewX, viewY+y, viewW, viewH-y)
	}

	-- Grid.
	setColor(0)
	for 1, 7-1              drawRectangleFill(dc, viewX+it*dayW, viewY, 1, viewH)
	for 1, VISIBLE_WEEKS-1  drawRectangleFill(dc, viewX, viewY+it*dayH, viewW, 1)
	drawRectangleLine(dc, viewX, viewY, viewW, viewH)
	drawRectangleLine(dc, 0, 0, ww, wh)

	dc.delete!()
}
