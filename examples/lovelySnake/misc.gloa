--[[============================================================
--=
--=  Misc functionality
--=
--=-------------------------------------------------------------
--=
--=  Example program: LÃ¶vely Snake
--=
--============================================================]]

global print :: (...:any) !foreign lua "print"

-- Math.

global PI  : float : !foreign lua "math.pi"
global TAU : float : !foreign lua "math.pi*2"

global abs :: (angle:float) -> float !foreign lua "math.abs"
global sin :: (angle:float) -> float !foreign lua "math.sin"
global cos :: (angle:float) -> float !foreign lua "math.cos"

global floor :: (n:float) -> float !foreign lua "math.floor"
global ceil  :: (n:float) -> float !foreign lua "math.ceil"
global round :: (n:float) -> float { return floor(n+.5) }

global min :: (n1,n2,...:int)   -> int   !foreign lua "math.min"
global max :: (n1,n2,...:int)   -> int   !foreign lua "math.max"
global min :: (n1,n2,...:float) -> float !foreign lua "math.min"
global max :: (n1,n2,...:float) -> float !foreign lua "math.max"

global random :: (nMin,nMax:int) -> int   !foreign lua "math.random"
global random :: (nMax:int)      -> int   !foreign lua "math.random" -- Same as random(1, nMax)
global random :: ()              -> float !foreign lua "math.random"

global lerp :: (v1,v2:float, k:float) -> float { return v1+k*(v2-v1) }

global clamp   :: (n:float, nMin,nMax:float) -> float { return min(max(n, nMin), nMax) }
global clamp01 :: (n:float)                  -> float { return min(max(n, 0), 1) }

-- Arrays/tables.

global TableIterator :: (t:table, k:any) -> (k:any, item:any)
global pairs :: (t:table) -> (iter:TableIterator, t:table, init:any) !foreign lua "pairs"

global ArrayIterator :: (arr:[]any, i:int) -> (i:int, item:any)
global ipairs :: (arr:[]any) -> (iter:TableIterator, arr:[]any, init:int) !foreign lua "pairs"
-- @Compiler @Incomplete: Polymorphic functions.
-- global ArrayIterator :: (arr:[]$T, i:int) -> (i:int, item:T)
-- global ipairs :: (arr:[]$T) -> (iter:TableIterator, arr:[]T, init:int) !foreign lua "pairs"

global insert :: (arr:[]any, value:any)            !foreign lua "table.insert"
global insert :: (arr:[]any, index:int, value:any) !foreign lua "table.insert"
global remove :: (arr:[]any, index:int=1) -> any   !foreign lua "table.remove"
-- @Compiler @Incomplete: Polymorphic functions.
-- global insert :: (arr:[]$T, value:T)            !foreign lua "table.insert"
-- global insert :: (arr:[]$T, index:int, value:T) !foreign lua "table.insert"
-- global remove :: (arr:[]$T, index:int=1) -> T   !foreign lua "table.remove"

-- Strings.

global format :: (s:string, ...:int|float|string) -> string !foreign lua "string.format"
