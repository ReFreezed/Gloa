--[[============================================================
--=
--=  LÖVE bindings
--=
--=-------------------------------------------------------------
--=
--=  Example program: Lövely Snake
--=
--============================================================]]

global love : table : !foreign lua "love" -- Only used for setting event handlers.

----------------------------------------------------------------
-- love.event.*
----------------------------------------------------------------

global loveQuit :: (exitStatus:int=0) !foreign lua "love.event.quit"

local _loveRestart :: (restart:string) !foreign lua "love.event.quit"
global loveRestart :: () { _loveRestart("restart") }

----------------------------------------------------------------
-- love.graphics.*
----------------------------------------------------------------

-- Drawing.

global loveDrawText :: (text:string, x,y:float=0, r:float=0                                         ) !foreign lua "love.graphics.print"
global loveDrawText :: (text:string, x,y:float,   r:float, sx:float                                 ) { loveDrawText(text, x,y, r, sx,sx) }
global loveDrawText :: (text:string, x,y:float,   r:float, sx,sy:float, ox,oy:float=0, kx,ky:float=0) !foreign lua "love.graphics.print"
-- @Compiler @Incomplete: Make sy:float=sx work somehow here below and remove the overloads here above.
-- global loveDrawText :: (text:string, x,y:float=0, r:float=0, sx:float=1,sy:float=sx, ox,oy:float=0, kx,ky:float=0) !foreign lua "love.graphics.print"

local _loveDrawRectangle :: (mode:string, x,y:float, w,h:float)                                      !foreign lua "love.graphics.rectangle"
local _loveDrawRectangle :: (mode:string, x,y:float, w,h:float, radiusX,radiusY:float)               !foreign lua "love.graphics.rectangle"
local _loveDrawRectangle :: (mode:string, x,y:float, w,h:float, radiusX,radiusY:float, segments:int) !foreign lua "love.graphics.rectangle"
global loveDrawRectangleFill :: (x,y:float, w,h:float)                                      { _loveDrawRectangle("fill", x,y, w,h) }
global loveDrawRectangleLine :: (x,y:float, w,h:float)                                      { _loveDrawRectangle("line", x,y, w,h) }
global loveDrawRectangleFill :: (x,y:float, w,h:float, radiusX,radiusY:float)               { _loveDrawRectangle("fill", x,y, w,h, radiusX,radiusY) }
global loveDrawRectangleLine :: (x,y:float, w,h:float, radiusX,radiusY:float)               { _loveDrawRectangle("line", x,y, w,h, radiusX,radiusY) }
global loveDrawRectangleFill :: (x,y:float, w,h:float, radiusX,radiusY:float, segments:int) { _loveDrawRectangle("fill", x,y, w,h, radiusX,radiusY, segments) }
global loveDrawRectangleLine :: (x,y:float, w,h:float, radiusX,radiusY:float, segments:int) { _loveDrawRectangle("line", x,y, w,h, radiusX,radiusY, segments) }

local _loveDrawCircle :: (mode:string, x,y:float, radius:float)               !foreign lua "love.graphics.circle"
local _loveDrawCircle :: (mode:string, x,y:float, radius:float, segments:int) !foreign lua "love.graphics.circle"
global loveDrawCircleFill :: (x,y:float, radius:float)               { _loveDrawCircle("fill", x,y, radius) }
global loveDrawCircleLine :: (x,y:float, radius:float)               { _loveDrawCircle("line", x,y, radius) }
global loveDrawCircleFill :: (x,y:float, radius:float, segments:int) { _loveDrawCircle("fill", x,y, radius, segments) }
global loveDrawCircleLine :: (x,y:float, radius:float, segments:int) { _loveDrawCircle("line", x,y, radius, segments) }

global loveDrawLine :: (x1,y1,x2,y2,...:float) !foreign lua "love.graphics.line"

-- Graphics state.

global loveGetColor :: () -> (r,g,b,a:float)    !foreign lua "love.graphics.getColor"
global loveSetColor :: (r,g,b:float, a:float=1) !foreign lua "love.graphics.setColor"

global loveClear :: ()                       !foreign lua "love.graphics.clear" -- Same as loveClear(0,0,0,0)
global loveClear :: (r,g,b:float, a:float=1) !foreign lua "love.graphics.clear"

global loveGetLineWidth :: () -> float !foreign lua "love.graphics.getLineWidth"
global loveSetLineWidth :: (w:float)   !foreign lua "love.graphics.setLineWidth"

-- Coordinate system.

global loveCoordinateSystemRotate    :: (anlge:float) !foreign lua "love.graphics.rotate"
global loveCoordinateSystemScale     :: (sx,sy:float) !foreign lua "love.graphics.scale"
global loveCoordinateSystemShear     :: (kx,ky:float) !foreign lua "love.graphics.shear"
global loveCoordinateSystemTranslate :: (dx,dy:float) !foreign lua "love.graphics.translate"

global loveCoordinateSystemReset :: () !foreign lua "love.graphics.origin"

local _loveGraphicsPush :: (stack:string|nil) !foreign lua "love.graphics.push"
global loveGraphicsPushAll       :: () { _loveGraphicsPush("all") }
global loveGraphicsPushTransform :: () { _loveGraphicsPush(nil) }
global loveGraphicsPop           :: () !foreign lua "love.graphics.pop"
global loveGraphicsReset         :: () !foreign lua "love.graphics.reset"

-- Window.

global loveGetWindowDimensions :: () -> int, int !foreign lua "love.graphics.getDimensions"

----------------------------------------------------------------
-- love.timer.*
----------------------------------------------------------------

global loveGetTime :: () -> float !foreign lua "love.timer.getTime"
