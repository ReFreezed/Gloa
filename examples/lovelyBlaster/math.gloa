--[[============================================================
--=
--=  Math functions
--=
--=  @Cleanup: Move everything here to a module.
--=
--=-------------------------------------------------------------
--=
--=  Example program: Lövely Blaster
--=  by Marcus 'ReFreezed' Thunström
--=
--==============================================================

	-- Vectors:
	add
	dot
	rotate

	-- Intersections:
	isRectangleIntersectingAabb
	isRectangleIntersectingRectangle

--============================================================]]



export add :: (x1,y1:float, x2,y2:float) -> (x,y:float) {
	return x1+x2, y1+y2
}

export rotate :: (x,y:float, angle:float) -> (x,y:float) {
	local c = cos(angle)
	local s = sin(angle)
	return c*x-s*y, s*x+c*y
}

export dot :: (x,y:float, otherX,otherY:float) -> float {
	return x*otherX + y*otherY
}



export isRectangleIntersectingAabb :: (rectX,rectY:float, rectW,rectH:float, angle:float, aabbX,aabbY:float, aabbW,aabbH:float) -> bool {
	return isRectangleIntersectingRectangle(rectX,rectY, rectW,rectH, angle, aabbX,aabbY, aabbW,aabbH, 0) -- @Speed: AABB optimization.
}
export isRectangleIntersectingRectangle :: (ax,ay:float, aw,ah:float, aAngle:float, bx,by:float, bw,bh:float, bAngle:float) -> bool {
	local getMinMax :: (vectors:[]float, axisX,axisY:float) -> (minProj,maxProj:float) {
		local minProj = dot(vectors[1],vectors[2], axisX,axisY)
		local maxProj = minProj

		for 3, #vectors, 2 {
			local proj = dot(vectors[it],vectors[it+1], axisX,axisY)
			minProj = min(minProj, proj)
			maxProj = max(maxProj, proj)
		}

		return minProj, maxProj
	}

	local getRectCorners :: (x,y:float, w,h:float, angle:float, corners:[]float) {
		local wHalf = w/2
		local hHalf = h/2

		local rotatedX, rotatedY: float
		rotatedX, rotatedY = rotate( wHalf, -hHalf, angle) ; local ax, ay = add(x,y, rotatedX,rotatedY)
		rotatedX, rotatedY = rotate( wHalf,  hHalf, angle) ; local bx, by = add(x,y, rotatedX,rotatedY)
		rotatedX, rotatedY = rotate(-wHalf,  hHalf, angle) ; local cx, cy = add(x,y, rotatedX,rotatedY)
		rotatedX, rotatedY = rotate(-wHalf, -hHalf, angle) ; local dx, dy = add(x,y, rotatedX,rotatedY)

		corners[1], corners[2] = ax, ay
		corners[3], corners[4] = bx, by
		corners[5], corners[6] = cx, cy
		corners[7], corners[8] = dx, dy
	}

	local getRectNormals :: (angle:float) {
		local ax,ay = rotate(1, 0,  angle  )
		local bx,by = rotate(ax,ay, 1*TAU/4)
		local cx,cy = rotate(ax,ay, 2*TAU/4)
		local dx,dy = rotate(ax,ay, 3*TAU/4)

		normals[1], normals[2] = ax, ay
		normals[3], normals[4] = bx, by
		normals[5], normals[6] = cx, cy
		normals[7], normals[8] = dx, dy
	}

	static aCorners : []float = {}
	static bCorners : []float = {}
	static normals  : []float = {}

	getRectCorners(ax,ay, aw,ah, aAngle, aCorners)
	getRectCorners(bx,by, bw,bh, bAngle, bCorners)

	getRectNormals(aAngle)
	for 1, 8, 2 {
		local normalX, normalY = normals[it], normals[it+1]
		local minProj1, maxProj1 = getMinMax(aCorners, normalX, normalY)
		local minProj2, maxProj2 = getMinMax(bCorners, normalX, normalY)
		if maxProj1 < minProj2 or maxProj2 < minProj1  return false
	}

	getRectNormals(bAngle)
	for 1, 8, 2 {
		local normalX, normalY = normals[it], normals[it+1]
		local minProj1, maxProj1 = getMinMax(aCorners, normalX, normalY)
		local minProj2, maxProj2 = getMinMax(bCorners, normalX, normalY)
		if maxProj1 < minProj2 or maxProj2 < minProj1  return false
	}

	return true
}


