Confusion
GlÃ³a

Declarations, types, values, function/method calls, parameters... it can all get very confusing!

	local funcType   : = ( arg:MyType (OtherType, int) )     -- Getting the type of a function (AKA a function signature) that takes a type as its one argument.
	local func       : = ( arg:MyType (OtherType, int) ) {}  -- Getting a reference to an anonymous function.
	local value      : = ( obj.method!(OtherType, int) )     -- Calling a method which takes two types as arguments.
	local value      : = ( obj.method!(OtherType, int) ) {}  -- Invalid curly brackets! (Doesn't make sense.)

	local obj        :         MyType (OtherType, int)       -- Specifying a variable type and implicitly instantiating a parameterized struct. (Note: Compare this to 'obj:int', which would implicitly initialize to 0.)
	local obj        :         MyType (OtherType, int)   {}  -- Invalid curly brackets! (Doesn't make sense.)

	local structType : =       MyType (OtherType, int)       -- Assigning a type to a variable.
	local structType : =       MyType (OtherType, int)   {}  -- Invalid curly brackets! (Doesn't make sense.)
	local invalid    : =              (OtherType, int)       -- Invalid!
	local invalid    : =              (OtherType, int)   {}  -- Invalid! Super invalid!
	local someType   : =              (OtherType     )       -- Assigning a type to a variable.
	local someType   : =              (OtherType     )   {}  -- Invalid curly brackets! (Doesn't make sense.)

	local structType : :       MyType (OtherType, int)       -- Creating a (constant) alias for a type.
	local structType : :       MyType (OtherType, int)   {}  -- Invalid curly brackets! (Doesn't make sense.)
	local invalid    : :              (OtherType, int)       -- Invalid!
	local invalid    : :              (OtherType, int)   {}  -- Invalid! Super invalid!
	local someType   : :              (OtherType     )       -- Creating a (constant) alias for a type.
	local someType   : :              (OtherType     )   {}  -- Invalid curly brackets! (Doesn't make sense.)

A function takes another function as a parameter:

	transformAndDouble :: (transformer:(n:int)->string) -> string {
		local s = transformer(6)
		return s..s
	}
