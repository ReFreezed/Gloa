--[[============================================================
--=
--=  Compile-time execution
--=
--=-------------------------------------------------------------
--=
--=  Glóa - a language that compiles into Lua
--=  by Marcus 'ReFreezed' Thunström
--=
--==============================================================

	runnerConvertBufferToChunk, runnerRunBufferAsChunk
	runnerSetup

--============================================================]]



-- Note: runnerRunBufferAsChunk() needs to be called at some point after this!
function _G.runnerSetup(state)
	local writer = state.runnerWriter
	if writer then  return  end

	state.runnerEnvironment = DEFAULT_ENVIRONMENT
	--[[ :CompilerEnvironment
	for k, v in pairs(DEFAULT_GLOBALS) do
		state.runnerEnvironment[k] = v
	end
	state.runnerEnvironment._G = state.runnerEnvironment
	]]

	state.runnerEnvironment.metaprogramArguments = metaprogramArguments
	state.runnerEnvironment.compilerArguments    = compilerArguments
	state.runnerEnvironment._STATE               = state
	state.runnerEnvironment._COMPILER            = compilerApi

	writer             = WriterState()
	writer.file        = newVirtualFile()
	state.runnerWriter = writer

	writeCompilerSymbols(state, writer)
end



function _G.runnerConvertBufferToChunk(state)
	local file = state.runnerWriter.file
	local lua  = file:getBuffer()

	local chunk, err = loadstring(lua, "@(metaprogram)")
	if not chunk then
		!if DEBUG then
			print(lua)
		!end
		errorInternal("%s", err)
	end

	-- !ifDEBUG `print(lua)`

	file:clearBuffer()
	setfenv(chunk, state.runnerEnvironment)

	return chunk
end

function _G.runnerRunBufferAsChunk(state)
	if state.runnerWriter.file:isBufferEmpty() then  return  end

	local chunk = runnerConvertBufferToChunk(state)
	chunk() -- @Incomplete: Better error messages using xpcall().
end


