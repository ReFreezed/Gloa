--[[============================================================
--=
--=  Compile-time execution
--=
--=-------------------------------------------------------------
--=
--=  Glóa - a language that compiles into Lua
--=  by Marcus 'ReFreezed' Thunström
--=
--==============================================================

	runnerConvertCurrentOutputToChunk, runnerRunCurrentOutputAsChunkIfNotEmpty
	runnerSetup

--============================================================]]
!recordLineNumber(@file, @line)



-- Note: runnerRunCurrentOutputAsChunkIfNotEmpty() needs to be called at some point after this!
function _G.runnerSetup(state)
	local writer = state.runnerWriter
	if writer then  return  end

	state.runnerPath = (state.projectDirectory.."/.gloa.metaprogram"..state.id..".lua"):gsub("^%./", "")
	if isReadableFile(state.runnerPath) then
		assert(os.remove(state.runnerPath))
	end

	writer                  = WriterState()
	writer.luaMainChunkBody = !!(LUA_STATEMENT"do end")
	state.runnerWriter      = writer

	--[[ Should we copy these fields so the user can do pairs(_G) in !preload blocks?
	for k, v in pairs(DEFAULT_GLOBALS) do
		state.runnerEnvironment[k] = v
	end
	--]]
	state.runnerEnvironment._G = state.runnerEnvironment

	state.runnerEnvironment.metaprogramTypeIds      = state.publicTypeInfoIds
	state.runnerEnvironment.metaprogramTypeTable    = state.publicTypeInfoById
	state.runnerEnvironment.metaprogramArguments    = metaprogramArguments
	state.runnerEnvironment.metaprogramAppPath      = state.pathToFirstFile
	state.runnerEnvironment.metaprogramAppDirectory = state.projectDirectory
	state.runnerEnvironment.compilerLuaArguments    = LUA_ARGUMENTS
	state.runnerEnvironment.compilerArguments       = compilerArguments
	state.runnerEnvironment.compilerErrorHandler    = compilerErrorHandler
	state.runnerEnvironment._STATE                  = state
	state.runnerEnvironment._COMPILER               = compilerApi

	setmetatable(state.runnerEnvironment, {__index=DEFAULT_ENVIRONMENT}) -- :CompilerEnvironment

	state.runnerLineMappings = {
		files = writer.lineMappingFiles,
		lines = writer.lineMappingLines,
	}

	for _, typeInfo in ipairs(state.allTypeInfos) do
		if typeInfo.isReady and isTypePublic(typeInfo) then
			getPublicType(state, typeInfo)
		end
	end

	writeCompilerSymbols(state, writer, writer.luaMainChunkBody, nil)
end



local function runnerConvertCurrentOutputToChunk(state)
	local writer            = state.runnerWriter
	local lua               = createLuaOutput(writer, state.runnerWrittenLines+1)
	writer.luaMainChunkBody = !!(LUA_STATEMENT"do end")

	local debugFile = assert(io.open(state.runnerPath, "a")) -- @Speed: Can we keep this file open?
	debugFile:write(lua)
	debugFile:close()

	local chunk, err = loadstring(("\n"):rep(state.runnerWrittenLines)..lua, "@"..state.runnerPath)
	if not chunk then
		-- astPrintTree(state.globalScope)
		errorInternal("%s", err)
	end
	setfenv(chunk, state.runnerEnvironment)

	state.runnerWrittenLines = state.runnerWrittenLines + countString(lua, "\n", true)
	return chunk
end

function _G.runnerRunCurrentOutputAsChunkIfNotEmpty(state)
	if not state.runnerWriter.luaMainChunkBody.statements[1] then  return  end

	local chunk = runnerConvertCurrentOutputToChunk(state)
	chunk()
end


