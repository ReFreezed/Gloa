--[[============================================================
--=
--=  Compiler entry point
--=
--=-------------------------------------------------------------
--=
--=  Glóa - a language that compiles into Lua
--=  by Marcus 'ReFreezed' Thunström
--=
--==============================================================

	compilationInitState, compilationStart, compilationDoOneCycle
	compileProgram
	compilerErrorHandler
	countLinesOfCode
	maybeWriteProgram

--============================================================]]
!recordLineNumber(@file, @line)

!(
local VERSION = "0.1.0"

local HELP_TEXT = [[
Synopsis:
    lua gloa.lua [compilerOptions] myProgram.gloa [myOtherProgram.gloa ...] [-- metaprogramArgument1 ...]

Options:
    --debug       Output debug information into compiled programs.
    --help        Display this help.
    --nogc        Disable garbage collection during compilation. (May decrease compilation time.)
    --nostrip     Disable automatic removal of dead code. (May trigger runtime errors on start-up!)
    --root <dir>  Specify the root directory for the project. (Default is where the target .gloa file is.)
    --silent      Disable output to stdout. (Errors and warnings are still printed to stderr.)
    --            Start of arguments for metaprogram.]]

local DISABLE_STDOUT_BUFFER = 1==1 -- Note: Slows down all printing.

local EXTRA_STATS                  = DEBUG and 1==0 -- Pipe cycles and more.
local COUNT_LOC_PER_FILE           = DEBUG and 1==0
local COUNT_TOKEN_REUSES           = DEBUG and 1==0
local FUNCTION_TO_MEASURE_CALLS_ON = not DEBUG and "" or ""--`inferIdentifierOrVararg` -- Also see profiler*() in functions.luapart. (The two features are not compatible.)

local DEBUG_MAX_CYCLES = 50--1000
)

local args = arg

do
	--
	-- Note: We create a sandbox environment for the compiler and leave the
	-- default environment for the metaprogram to use instead of the other way
	-- around. Otherwise modules loaded by the metaprogram may not work if
	-- they're expected to modify the (default) environment. The compiler
	-- doesn't require any modules by itself so this should work just fine.
	--
	-- However! There may be problems when the metaprogram compiles other
	-- subprograms as they currently share the same (fallback) environment.
	-- (See runnerSetup.) Not sure if there's a perfect solution here...
	--
	local defaultGlobals      = {}
	local compilerEnvironment = {} -- :CompilerEnvironment

	for k, v in pairs(_G) do
		defaultGlobals[k]      = v
		compilerEnvironment[k] = v
	end

	compilerEnvironment.DEFAULT_GLOBALS     = defaultGlobals
	compilerEnvironment.DEFAULT_ENVIRONMENT = _G
	compilerEnvironment.LUA_ARGUMENTS       = args
	compilerEnvironment._G                  = compilerEnvironment

	setfenv(1, compilerEnvironment)
end

local allStates = {}

local loaders = {
	!-- We want the resulting Glóa compiler to be a single file, so we use @insert instead of requiring modules here. Note: The order matters!
	function() !(do) @insert "preprocessorStuffAndGlobals.luapart" !(end) end,
	function() !(do) @insert "messengerEnums.luapart" !(end) end,
	function() !(do) @insert "functions.luapart" !(end) end,
	function() !(do) @insert "lexer.luapart" !(end) end,
	function() !(do) @insert "parser.luapart" !(end) end,
	function() !(do) @insert "pipes.luapart" !(end) end,
	function() !(do) @insert "typer.luapart" !(end) end,
	function() !(do) @insert "ready.luapart" !(end) end,
	function() !(do) @insert "emitter.luapart" !(end) end,
	function() !(do) @insert "runner.luapart" !(end) end,
	function() !(do) @insert "messenger.luapart" !(end) end,
	function() !(do) @insert "compilerApi.luapart" !(end) end,
	function() !(do) @insert "programWriter.luapart" !(end) end,
}
!recordLineNumber(@file, @line)

local function runCompiler()
	!if DISABLE_STDOUT_BUFFER then
		io.stdout:setvbuf("no")
		io.stderr:setvbuf("no")
	!end

	for _, loader in ipairs(loaders) do
		loader()
	end

	local timeStartInitial = timerGetCurrentInSeconds()



	-- Parse arguments.
	local pathsToCompile    = {}
	local disableGc         = false
	_G.compilerArguments    = {}
	_G.metaprogramArguments = {}
	_G.silent               = false
	_G.outputDebugInfo      = false
	_G.keepDeadCode         = false
	_G.rootDirectory        = ""

	!if EXTRA_STATS then
		_G.nodeCreationCounts = {
			!for nodeType in pairs(AST_NAMES) do
				[!(nodeType)] = 0,
			!end
		}
	!end

	!if DEBUG then
	_G.debug_onlyParse      = false
	_G.debug_onlyInferTypes = false
	!end

	do
		local function printHelpAndExit()
			print(!("Gloa v"..VERSION..os.date" (built %Y-%m-%d)")) -- No "Glóa" because we don't know the code page. :(
			print()
			print(!(HELP_TEXT))
			print()
			exit(0)
		end

		if not args[1] then  printHelpAndExit()  end

		local forCompiler = true
		local i           = 1

		while args[i] do
			local arg = args[i]

			if not forCompiler then
				table.insert(metaprogramArguments, arg)
				i = i+1
			elseif arg == "--" then
				forCompiler = false
				i           = i+1
			elseif not arg:find"^%-" then
				local path = arg:gsub("\\", "/")
				table.insert(pathsToCompile,    path)
				table.insert(compilerArguments, path)
				i = i+1

			elseif arg == "--help" or arg == "-help" or arg == "-?" or arg == "/help" or arg == "/?" then
				printHelpAndExit()
			elseif arg == "--nogc" then
				disableGc = true
				table.insert(compilerArguments, arg)
				i = i+1
			elseif arg == "--silent" then
				_G.silent = true
				table.insert(compilerArguments, arg)
				i = i+1
			elseif arg == "--debug" then
				_G.outputDebugInfo = true
				table.insert(compilerArguments, arg)
				i = i+1
			elseif arg == "--nostrip" then
				_G.keepDeadCode = true
				table.insert(compilerArguments, arg)
				i = i+1
			elseif arg == "--root" then
				_G.rootDirectory = args[i+1] or errorLine("Compiler", "Expected a path after '--root'.")
				_G.rootDirectory = rootDirectory == "" and "" or normalizeDirectoryPath((rootDirectory:gsub("\\", "/")))
				i = i+2

			!if DEBUG then
			elseif arg == "--debug:onlyparse" then
				_G.debug_onlyParse = true
				table.insert(compilerArguments, arg)
				i = i+1
			elseif arg == "--debug:onlyinfer" then
				_G.debug_onlyInferTypes = true
				table.insert(compilerArguments, arg)
				i = i+1
			!end

			else
				errorLine("Compiler", "Unknown option '%s'.", arg)
			end
		end
	end



	!if DEBUG then
		print(os.date"%Y-%m-%d %H:%M:%S")
	!else
		if not silent then
			print()
			print("-------- Gloa --------")
			print('Args:  "'..table.concat(args, '" "')..'"')
			print("Files: "..table.concat(pathsToCompile, ", "))
			print(os.date"Date:  %Y-%m-%d %H:%M:%S")
			if disableGc then  print("Garbage collection disabled.")  end
			print()
		end
	!end

	if disableGc then  collectgarbage("stop")  end

	do
		local duplicates = {}
		for _, path in ipairs(pathsToCompile) do
			if duplicates[path] then
				errorLine("Compiler", "Duplicate path in arguments: %s", path)
			end
			duplicates[path] = true
		end
	end

	if not pathsToCompile[1] then
		errorLine("Compiler", "No files to compile.")
	end



	!local RESERVED_TOP_SCOPE_NAMES = Set{
		-- Locals:
		"_BREAK",
		"_CONDITION",
		"_JUMP",
		"_SWITCH",
		-- _AWBO_*

		-- Globals:
		"_COMPILER",
		"_FOREIGN",
		"_STATE",
		"_TYPE_INFO",
		"_TYPES",

		-- Compiler symbols:
		"_BYTE",
		"_FLOOR",
		"_IPAIRS",
		"_IPAIRSR",
		"_MODF",
		"_PAIRS",
		"_REP",
		"_REP2",
		"_SELECT",

		-- Special Lua stuff:
		"_ENV", -- Added in Lua 5.2.
	}

	local !struct"CompilationSettings"{
		-- BuildOptions:
		{`outputType`,      OUTPUT_TYPE_LUA_APP},
		{`outputFilePath`,  ""},
		{`entryPointName`,  "main"},
	}

	!(
	local typeInfosTableTemplate    = {}
	local constantsTableTemplate    = {}
	local dependenciesTableTemplate = {}
	for tag        = 1, #TYPE_NAMES        do  typeInfosTableTemplate[tag]           = {}  end
	for kind       = 1, #CONST_KIND_TITLES do  constantsTableTemplate[kind]          = {}  end
	for dependType = 1, #DEPEND_TITLES     do  dependenciesTableTemplate[dependType] = {}  end
	)

	!struct"_CompilationState"{
		{`id`,                 0},

		{`fileBuffers`,        {}},
		{`tokens`,             nil}, -- Tokens (struct)
		{`settings`,           nil}, -- CompilationSettings

		{`pathToFirstFile`,    ""},
		{`projectDirectory`,   ""},
		{`mainFileBasename`,   ""},

		{`timeLexing`,         0.00},
		{`timeLexingInPipes`,  0.00},
		{`timeParsing`,        0.00},
		{`timeParsingInPipes`, 0.00},
		{`timePipesStart`,     0.00},
		{`timePipes`,          0.00},
		{`timeOutput`,         0.00},

		{`sendMessages`,       false},
		{`phase`,              0},
		{`messages`,           {}},
		{`nextMessageToSend`,  1},

		{`publicTypeInfoIds`,  {}},
		{`publicTypeInfoById`, {}},

		{`warnings`,           0},

		-- Lexer:
		{`lineCount`,       0},
		{`locCount`,        0},
		{`locCountPerPath`, (COUNT_LOC_PER_FILE and {} or STRUCT_FIELD_IGNORE)},
		{`locCountPaths`,   (COUNT_LOC_PER_FILE and {} or STRUCT_FIELD_IGNORE)},

		-- Parser:
		{`globalScope`,            nil},   -- AstGlobalScope
		{`nextToken`,              1},
		{`soft`,                   false}, -- Enabling this will make parsing functions return nil on error instead of triggering an actual error.
		{`luaPreloads`,            {}},    -- { lua=string, lineOffset=number, path=string, line=number, trimmedInitialNewline=bool } -- All '!preload' strings.
		{`luaPreloadsCompiletime`, {}},    -- { lua=string, lineOffset=number, path=string, line=number, trimmedInitialNewline=bool } -- All '!preload compiletime' strings.
		{`luaPreloadsRuntime`,     {}},    -- { lua=string, lineOffset=number, path=string, line=number, trimmedInitialNewline=bool } -- All '!preload runtime' strings.

		-- Pipes:
		{`queueActive`,           {n=0}},
		{`queueWaiting`,          {n=0}},
		{`priorityStack`,         {n=0}},
		{`allQueueds`,            {}},
		{`allDependencies`,       {}},
		{`dependenciesForLookup`, dependenciesTableTemplate},
		-- Debug:
		{`finalPipe`,             PIPE_DONE-1},
		{`queuedUpdates`,         0},
		{`queuedUpdatesPerCycle`, {}},
		{`queueActiveMaxSize`,    0},
		{`queueWaitingMaxSize`,   0},
		{`pipeCycles`,            0},
		{`prioriyCount`,          0},

		-- Typer:
		{`lastTypeId`,                0},
		{`builtinTypeInfos`,          {}},
		{`allTypeInfos`,              {}},
		{`allTypeInfosByTag`,         typeInfosTableTemplate},
		{`allTypeInfosByTagAndValue`, typeInfosTableTemplate},

		-- Emitter:
		{`constants`,               {}},
		{`constantsByKind`,         constantsTableTemplate},
		{`constantsByKindAndValue`, constantsTableTemplate},
		{`constantsByTypeAndValue`, constantsTableTemplate},
		{`constantN`,               0},
		{`functionN`,               0}, -- Same as constantN, but for constant functions.
		{`topScopeNames`,           RESERVED_TOP_SCOPE_NAMES},

		-- Runner:
		{`runnerPath`,                       ""},
		{`runnerEnvironment`,                {}},
		{`runnerLineMappings`,               nil},
		{`runnerWriter`,                     nil}, -- WriterState
		{`runnerWrittenLines`,               0},
		{`runnerWrittenObjects`,             {}},
		{`runnerWrittenPreloads`,            0},
		{`runnerWrittenPreloadsCompiletime`, 0},
	}

	local nextStateId              = 1
	local timeDoingSubCompilations = 0
	local warningsTotal            = 0

	function _G.compilationInitState(pathToFirstFile)
		local state = !new"_CompilationState"{
			`id`,     `nextStateId`,
			`tokens`, `Tokens()`,
		}
		nextStateId = nextStateId + 1

		if rootDirectory == "" then
			-- Project directory result examples:
			--   C:/app/main.gloa > C:/app
			--   ../main.gloa     > ..
			--   main.gloa        > .
			state.pathToFirstFile  = pathToFirstFile
			state.projectDirectory = normalizeDirectoryPath((pathToFirstFile:gsub("/?[^/]+$", ""):gsub("^$", ".")))
		else
			pathToFirstFile        = isPathAbsolute(pathToFirstFile) and pathToFirstFile or rootDirectory.."/"..pathToFirstFile
			state.pathToFirstFile  = pathToFirstFile
			state.projectDirectory = rootDirectory
		end

		state.mainFileBasename = pathToFirstFile:match"([^/]+)%.gloa$"
		if not state.mainFileBasename then
			errorLine("Compiler", "Expected the file to compile to end with '.gloa': %s", pathToFirstFile)
		end

		local settings          = CompilationSettings()
		settings.outputFilePath = (state.projectDirectory.."/"..state.mainFileBasename..".lua"):gsub("^%./", "")
		state.settings          = settings

		!if DEBUG then
			if debug_onlyInferTypes then  state.finalPipe = !(PIPE_READY)  end
		!end

		table.insert(allStates, state)
		return state
	end

	function _G.compilationStart(state)
		local pathToFirstFile = state.pathToFirstFile
		if not silent then  print("Compiling "..pathToFirstFile:gsub("^.*/", ""))  end

		local tokens     = state.tokens
		local sourceInfo = {path=pathToFirstFile, string=""}

		insertNewToken(tokens, !(TOKEN_DIRECTIVE), "import",  sourceInfo)
		insertNewToken(tokens, !(TOKEN_STRING),    "preload", sourceInfo)

		local locCountStartToken = tokens.n + 1

		local timeLexingStart, timeLexingEnd = readAndTokenizeFile(state, pathToFirstFile, true)
		state.timeLexing                     = timeLexingEnd - timeLexingStart

		countLinesOfCode(state, locCountStartToken, tokens.n)

		local timeStart = timerGetCurrentInSeconds()
		parseGlobalScope(state, pathToFirstFile)
		state.timeParsing = timerGetCurrentInSeconds() - timeStart

		if peekNextTok(state, 1) then
			errorParsingNext(state, "Expected the end of the file.")
		end

		markTokensAsUnused(state)
		addTypeInfosForBuiltinTypes(state)
	end

	-- compilationFinished = compilationDoOneCycle( state )
	function _G.compilationDoOneCycle(state)
		!local FINAL_PIPE = DEBUG and `state.finalPipe` or toLua(PIPE_DONE-1)

		!if DEBUG then
			state.queueActiveMaxSize  = math.max(state.queueActiveMaxSize,  state.queueActive.n)
			state.queueWaitingMaxSize = math.max(state.queueWaitingMaxSize, state.queueWaiting.n)
			state.pipeCycles          = state.pipeCycles+1
			-- print("cycle", state.pipeCycles)
		!end

		local didSomething = false
		local i            = 1

		local queueActive      = state.queueActive
		local queueWaiting     = state.queueWaiting
		local queueWaitingN    = queueWaiting.n
		local priorityStack    = state.priorityStack
		local nextQueueActiveN = 0
		local nextQueueActive  = {n=0}
		local gotPrioritized   = {}

		local insert              = table.insert
		local inferNode           = inferNode
		local handleTypeReadyPipe = handleTypeReadyPipe
		local emitNode            = emitNode
		local fulfillDependencies = fulfillDependencies

		!if EXTRA_STATS then
			local updatesThisCycle = {
				total = 0,
				!(
				for nodeType = 1, #AST_NAMES do
					__LUA("0,")
				end
				)
			}
			state.queuedUpdatesPerCycle[state.pipeCycles] = updatesThisCycle
		!end

		while true do
			local priorityLen = priorityStack.n
			local queued

			if priorityLen > 0 then
				queued                       = priorityStack[priorityLen]
				priorityStack[priorityLen]   = nil
				priorityStack.n              = priorityLen - 1
				!ifDEBUG `state.prioriyCount = state.prioriyCount + 1`
			else
				queued = queueActive[i] -- Note: New nodes (or nodes to reinfer) may be inserted into queueActive during this loop.
				if not queued then  break  end
			end

			if queued.unqueued then
				-- void

			elseif gotPrioritized[queued] then
				-- void  WARNING: Make sure we don't queue prioritized nodes multiple times!

			elseif queued.waitingOn then
				queueWaitingN               = queueWaitingN + 1
				queueWaiting[queueWaitingN] = queued

			else
				!(
				local DID_SOMETHING = "didSomething = true"

				if DEBUG then
					DID_SOMETHING = DID_SOMETHING.." state.queuedUpdates = state.queuedUpdates+1"

					if EXTRA_STATS then
						DID_SOMETHING = DID_SOMETHING
							.." updatesThisCycle.total                 = updatesThisCycle.total                 + 1"
							.." updatesThisCycle[queued.node.nodeType] = updatesThisCycle[queued.node.nodeType] + 1"
							-- .." if state.pipeCycles >= 89 then  print('Cycle '..state.pipeCycles) ; astPrint(queued.node) ; where(state, queued.node)  end"
					end
				end
				)

				if queued.pipe == !(PIPE_INFER) then
					!!(DID_SOMETHING)
					inferNode(state, queued.node)

					if not (queued.waiters and queued.waiters[1]) then
						-- void
					elseif queued.pipe > !(PIPE_EMIT) then
						fulfillDependencies(state, queued, !(DEPEND_NODE_INFERRED))
						fulfillDependencies(state, queued, !(DEPEND_NODE_PASSED_INFER))
						fulfillDependencies(state, queued, !(DEPEND_NODE_PASSED_READY))
						fulfillDependencies(state, queued, !(DEPEND_NODE_PASSED_EMIT))
					elseif queued.pipe > !(PIPE_READY) then
						fulfillDependencies(state, queued, !(DEPEND_NODE_INFERRED))
						fulfillDependencies(state, queued, !(DEPEND_NODE_PASSED_INFER))
						fulfillDependencies(state, queued, !(DEPEND_NODE_PASSED_READY))
					elseif queued.pipe > !(PIPE_INFER) then
						fulfillDependencies(state, queued, !(DEPEND_NODE_INFERRED))
						fulfillDependencies(state, queued, !(DEPEND_NODE_PASSED_INFER))
					elseif queued.node.inferredType then
						fulfillDependencies(state, queued, !(DEPEND_NODE_INFERRED))
					end

					--[[ This decreases node update count, but somehow makes compilation slower? Maybe just sometimes? I dunno, man...
					if queued.pipe == !(PIPE_EMIT) then
						!ifDEBUG`if not debug_onlyInferTypes then`
							emitNode(state, queued.node)
							if queued.pipe > !(PIPE_EMIT) then
								fulfillDependencies(state, queued, !(DEPEND_NODE_PASSED_EMIT))
							end
						!ifDEBUG`end`
					end
					--]]

					!if DEBUG and 1==0 then
						if queued.pipe == !(PIPE_INFER) and queued.node.inferredType and not queued.node.inferredType.isReady then
							where(state, queued.node, "Not ready!")
						end
					!end

				elseif queued.pipe == !(PIPE_READY) then
					!!(DID_SOMETHING)
					handleTypeReadyPipe(state, queued.node)

					if not (queued.waiters and queued.waiters[1]) then
						-- void
					elseif queued.pipe > !(PIPE_EMIT) then
						fulfillDependencies(state, queued, !(DEPEND_NODE_PASSED_READY))
						fulfillDependencies(state, queued, !(DEPEND_NODE_PASSED_EMIT))
					elseif queued.pipe > !(PIPE_READY) then
						fulfillDependencies(state, queued, !(DEPEND_NODE_PASSED_READY))
					end

				elseif queued.pipe == !(PIPE_EMIT) then
					!!(DID_SOMETHING)
					emitNode(state, queued.node)

					if not (queued.waiters and queued.waiters[1]) then
						-- void
					elseif queued.pipe > !(PIPE_EMIT) then
						fulfillDependencies(state, queued, !(DEPEND_NODE_PASSED_EMIT))
					end
				end

				if queued.unqueued then
					-- void
				elseif queued.waitingOn then
					queueWaitingN               = queueWaitingN + 1
					queueWaiting[queueWaitingN] = queued
				elseif queued.pipe < !(PIPE_DONE) then
				-- elseif queued.pipe <= !!(FINAL_PIPE) then -- This doesn't work! Some nodes being inferred wants others to be emitted. :OnlyInferTypes
					nextQueueActiveN                  = nextQueueActiveN + 1
					nextQueueActive[nextQueueActiveN] = queued
				else
					-- void
				end
			end

			if priorityLen > 0 then
				gotPrioritized[queued] = true
			else
				i = i+1
			end
		end--while queueActive[i]

		if queueWaitingN == 0 and nextQueueActiveN == 0 then
			!if DEBUG then
				for _, queued in ipairs(state.allQueueds) do
					if not (queued.pipe == !(PIPE_DONE) or queued.unqueued) then
					-- if not (queued.pipe > !!(FINAL_PIPE) or queued.unqueued) then -- :OnlyInferTypes
						errorInternal(state, queued.node)
					end
				end
			!end

			return true
		end

		queueWaiting.n    = queueWaitingN
		nextQueueActive.n = nextQueueActiveN
		queueActive       = nextQueueActive
		state.queueActive = queueActive

		if not didSomething then  errorPipesAreStuck(state)  end

		local currentQueueWaiting = queueWaiting
		queueWaiting              = {n=0}
		queueWaitingN             = 0
		state.queueWaiting        = queueWaiting

		local findPublicDeclarationInScope = findPublicDeclarationInScope
		local findDeclaration              = findDeclaration
		local findMemberDeclaration        = findMemberDeclaration

		for _, queued in ipairs(currentQueueWaiting) do
			local dependencyCurrent = not queued.unqueued and queued.waitingOn

			while dependencyCurrent do
				local dependency  = dependencyCurrent
				local dependType  = dependency.dependType
				dependencyCurrent = nil

				!local DEPENDENCY_FULFILLED = `
					dependencyCurrent = dependency.next
					queued.waitingOn  = dependencyCurrent
				`

				if dependType == !(DEPEND_DECLARATION) then
					if dependency.extraData--[[scope]] then
						if findPublicDeclarationInScope(state, dependency.extraData--[[scope]], dependency.dependOn--[[name]]) then
							!!(DEPENDENCY_FULFILLED)
						end
					else
						-- @Speed: Only call findDeclaration() if it's reported that a declaration with the awaited name has been added to the tree.
						if findDeclaration(state, queued.node, dependency.dependOn--[[name]]) then
							!!(DEPENDENCY_FULFILLED)
						end
					end
				elseif dependType == !(DEPEND_MEMBER_DECLARATION) then
					local scope = dependency.extraData
					if findMemberDeclaration(state, scope, dependency.dependOn--[[name]]) then
						!!(DEPENDENCY_FULFILLED)
					elseif scope.nodeType == !(AST_STRUCT) and scope.representedType and scope.representedType.hasMembers then
						!!(DEPENDENCY_FULFILLED) -- This should eventually lead to an error if the struct isn't table-like with string keys.
					end

				elseif dependType == !(DEPEND_HAS_DECLARATION) then
					if dependency.dependOn.node.declaration then
						!!(DEPENDENCY_FULFILLED)
					end

				elseif dependType == !(DEPEND_NODE_INFERRED) then
					-- Note: dependOn.node is not necessarily an expression which is why we also check the pipe.
					if dependency.dependOn.node.inferredType or dependency.dependOn.pipe > !(PIPE_INFER) then
						!!(DEPENDENCY_FULFILLED)
					end
				elseif dependType == !(DEPEND_NODE_PASSED_INFER) then
					if dependency.dependOn.pipe > !(PIPE_INFER) then
						!!(DEPENDENCY_FULFILLED)
					end

				elseif dependType == !(DEPEND_TYPE_READY) then
					if dependency.dependOn.isReady then
						!!(DEPENDENCY_FULFILLED)
					end
				elseif dependType == !(DEPEND_STRUCT_MEMBERS_READY) then
					if dependency.dependOn.hasMembers then
						!!(DEPENDENCY_FULFILLED)
					end

				elseif dependType == !(DEPEND_NODE_PASSED_READY) then
					if dependency.dependOn.pipe > !(PIPE_READY) then
						!!(DEPENDENCY_FULFILLED)
					end

				elseif dependType == !(DEPEND_NODE_PASSED_EMIT) then
					if dependency.dependOn.pipe > !(PIPE_EMIT) then
						!!(DEPENDENCY_FULFILLED)
					end

				elseif dependType == !(DEPEND_CONSTANT_READY) then
					if dependency.dependOn.isReady then
						!!(DEPENDENCY_FULFILLED)
					end

				else
					errorInternal("%d", dependType)
				end
			end

			if queued.unqueued then
				-- void
			elseif queued.waitingOn then
				queueWaitingN               = queueWaitingN + 1
				queueWaiting[queueWaitingN] = queued
			else
				queueActive.n              = queueActive.n + 1
				queueActive[queueActive.n] = queued
			end
		end--for currentQueueWaiting

		queueWaiting.n = queueWaitingN

		!if DEBUG then
			-- Guard against an infinite loop.
			if state.pipeCycles == !(DEBUG_MAX_CYCLES) then  errorPipesAreInfiniteLooping(state, !!(FINAL_PIPE))  end
		!end

		return false
	end

	function _G.maybeWriteProgram(state)
		if state.settings.outputType == !(OUTPUT_TYPE_NONE) then  return  end

		!ifDEBUG `if debug_onlyParse or debug_onlyInferTypes then  return  end`

		local pathToFirstFile = state.pathToFirstFile
		if state.settings.outputFilePath == pathToFirstFile then
			errorLine("Compiler", "The output path is the same as the input path. (%s)", pathToFirstFile)
		end

		local timeStart = timerGetCurrentInSeconds()

		local writer         = WriterState()
		writer.outputRuntime = true
		writeProgram(state, writer)

		state.timeOutput = timerGetCurrentInSeconds() - timeStart
	end

	function _G.countLinesOfCode(state, tokenFirst, tokenLast)
		local tokens   = state.tokens
		local locCount = state.locCount

		!if COUNT_LOC_PER_FILE then
		local locCountPerPath = state.locCountPerPath
		local locCountPaths   = state.locCountPaths
		!end

		local lastPath = ""
		local lastLine = 0

		for token = tokenFirst, tokenLast do
			local tok  = tokens[token]
			local path = tok.source.path

			if path ~= lastPath then
				lastPath = path
				lastLine = 0

				!if COUNT_LOC_PER_FILE then
					if not locCountPerPath[path] then
						locCountPerPath[path] = 0
						table.insert(locCountPaths, path)
					end
				!end
			end

			if tok.line1 ~= lastLine then
				locCount = locCount + 1
				!if COUNT_LOC_PER_FILE then
					locCountPerPath[path] = locCountPerPath[path] + 1
				!end
			end

			if tok.line2 then
				locCount = locCount + tok.line2 - tok.line1
				!if COUNT_LOC_PER_FILE then
					locCountPerPath[path] = locCountPerPath[path] + tok.line2 - tok.line1
				!end
			end

			lastLine = tok.line2 or tok.line1
		end

		state.locCount = locCount
	end

	function _G.compileProgram(pathToFirstFile)
		local timeCompilingStart            = timerGetCurrentInSeconds()
		local timeDoingSubCompilationsStart = timeDoingSubCompilations

		local state = compilationInitState(pathToFirstFile)
		compilationStart(state)

		-- Pipes.
		!ifDEBUG `profilerStart()`
		state.timePipesStart = timerGetCurrentInSeconds()

		!ifDEBUG`if not debug_onlyParse then`
			addToQueueRecursively(state, state.globalScope)
			repeat until compilationDoOneCycle(state)
		!ifDEBUG`end`

		state.timePipes = timerGetCurrentInSeconds() - state.timePipesStart - state.timeLexingInPipes - state.timeParsingInPipes
		!ifDEBUG `profilerStop()`
		--

		maybeWriteProgram(state)

		local timeCompilation = timerGetCurrentInSeconds() - timeCompilingStart

		!ifNotDEBUG`if not silent then`
			!ifDEBUG `if debug_onlyParse then  astPrintTree(state.globalScope)  end`

			local subTime = timeDoingSubCompilations - timeDoingSubCompilationsStart

			!local OK = {
				"██████████████████████ ",
				"███▀    ▀███  ███▀  ██ ",
				"██  ▄██▄  ██  █▀  ▄███ ",
				"██  ████  ██     █████ ",
				"██  ▀██▀  ██  █▄  ▀███ ",
				"███▄    ▄███  ███▄  ██ ",
				"██████████████████████ ",
			}

			printf(!((DEBUG and OK[  N(1)] or "Successfully compiled ").."%s"), state.pathToFirstFile)

			if subTime > 0 then
			printf(!((DEBUG and OK[incN()] or "").."Total:   %.3f (+%.3f) sec"), timeCompilation-subTime, subTime)
			else
			printf(!((DEBUG and OK[   N()] or "").."Total:   %.3f sec"        ), timeCompilation-subTime)
			end
			printf(!((DEBUG and OK[incN()] or "").."Lexing:  %.3f sec"), state.timeLexing)
			printf(!((DEBUG and OK[incN()] or "").."Parsing: %.3f sec"), state.timeParsing)
			printf(!((DEBUG and OK[incN()] or "").."Pipes:   %.3f sec"), state.timePipes-subTime)
			printf(!((DEBUG and OK[incN()] or "").."Output:  %.3f sec"), state.timeOutput)

			printf(
				!((DEBUG and OK[incN()] or "").."%d LOC in %d file%s (%d lines including empty lines and comments)"),
				state.locCount,
				#state.globalScope.fileScopes-1,
				(state.globalScope.fileScopes[3] and "s" or ""),
				state.lineCount
			)

			!if COUNT_LOC_PER_FILE then
				--[[ -- Sort by name.
				table.sort(locCountPaths)
				--[=[]] -- Sort by count.
				table.sort(locCountPaths, function(a, b)
					if locCountPerPath[a] ~= locCountPerPath[b] then  return locCountPerPath[a] > locCountPerPath[b]  end
					return a < b
				end)
				--]=]
				for _, path in ipairs(locCountPaths) do
					printf(!((DEBUG and OK[incN()] or "").."LOC: %-5d  %-25s  %s"), locCountPerPath[path], path:match"[^/]+$", path)
				end
			!end

			!if DEBUG then
				local dependencyCount = {}
				for _, dependency in ipairs(state.allDependencies) do
					dependencyCount[dependency.dependType] = (dependencyCount[dependency.dependType] or 0)+1
				end

				local depencyCountTexts = {}
				for dependType, title in ipairs(DEPEND_TITLES) do
					depencyCountTexts[dependType] = F("%s:%d", title, (dependencyCount[dependType] or 0))
				end

				printf(
					!((DEBUG and OK[incN()] or "").."Cycles:%d Updates:%d Prio:%d Queue:%d(a=%d,w=%d) Types:%d Consts:%d"),
					state.pipeCycles,
					state.queuedUpdates,
					state.prioriyCount,
					#state.allQueueds, state.queueActiveMaxSize, state.queueWaitingMaxSize,
					#state.allTypeInfos, #state.constants
				)
				printf(
					!((DEBUG and OK[incN()] or "").."Deps:%d (%s)"),
					#state.allDependencies,
					table.concat(depencyCountTexts, " ")
				)
				printf(
					!((DEBUG and OK[incN()] or "").."Toks:%d TokReuses:%d"),
					state.tokens.n, (state.tokens.reuseCount or -1)
				)

				!if EXTRA_STATS then
					print()

					for cycle = 1, state.pipeCycles do
						local updatesThisCycle  = state.queuedUpdatesPerCycle[cycle]
						local relevantNodeTypes = {}
						local perNodeTypeTexts  = {}

						for nodeType = 1, !(#AST_NAMES) do
							if updatesThisCycle[nodeType] > 0 then
								table.insert(relevantNodeTypes, nodeType)
							end
						end

						table.sort(relevantNodeTypes, function(a, b)
							return AST_NAMES[a] < AST_NAMES[b]
							-- return updatesThisCycle[a] > updatesThisCycle[b]
						end)

						for _, nodeType in ipairs(relevantNodeTypes) do
							table.insert(
								perNodeTypeTexts,
								F("%s=%d", AST_NAMES[nodeType], updatesThisCycle[nodeType])
							)
						end

						printf("Cycle %-4d %-7d - %s", cycle, updatesThisCycle.total, table.concat(perNodeTypeTexts, " "))
					end
				!end
			!end

			print()
		!ifNotDEBUG`end`

		warningsTotal = warningsTotal + state.warnings

		timeDoingSubCompilations = timeDoingSubCompilationsStart + timeCompilation
	end

	!if FUNCTION_TO_MEASURE_CALLS_ON ~= "" then
		local callCount     = 0
		local callTime      = 0.00
		local callTimeStart = 0.00
		local getinfo       = debug.getinfo
		local clock         = timerGetCurrentInSeconds
		local funcToMeasure = !!(FUNCTION_TO_MEASURE_CALLS_ON) or errorInternal!(FUNCTION_TO_MEASURE_CALLS_ON)

		debug.sethook(function(event)
			if getinfo(2, "f").func == funcToMeasure then
				-- @Incomplete: Handle recursive calls.
				if event == "call" then
					callCount     = callCount+1
					callTimeStart = clock()
				else
					callTime = callTime + (clock()-callTimeStart)
				end
			end
		end, "cr")
	!end

	for _, path in ipairs(pathsToCompile) do
		compileProgram(path)
	end

	!if FUNCTION_TO_MEASURE_CALLS_ON ~= "" then
		debug.sethook(nil)
	!end

	!if EXTRA_STATS then
		local nodeTypes = getKeys(AST_NAMES)
		table.sort(nodeTypes, function(a, b)
			if nodeCreationCounts[a] ~= nodeCreationCounts[b] then  return nodeCreationCounts[a] > nodeCreationCounts[b]  end
			return a < b
		end)
		for _, nodeType in ipairs(nodeTypes) do
			printf(!((DEBUG and OK[incN()] or "").."Nodes %-6d %s"), nodeCreationCounts[nodeType], AST_NAMES[nodeType])
		end
		print()
	!end

	!ifNotDEBUG`if not silent then`
		print("Finished compiling!")

		if pathsToCompile[2] then
			printf("Compiled all %d programs in %.3f sec", #pathsToCompile, clock()-timeStartInitial)
		end
		!ifNotDEBUG`if disableGc then`
			printf("Memory usage: %s bytes", formatNumber(collectgarbage"count"*1024))
		!ifNotDEBUG`end`
		if warningsTotal > 0 then
			printf("Warnings: %d", warningsTotal)
		end

		!if FUNCTION_TO_MEASURE_CALLS_ON ~= "" then
			printf(!("Calls ("..FUNCTION_TO_MEASURE_CALLS_ON.."): %d in %.3f seconds"), callCount, callTime)
		!end

		print()
	!ifNotDEBUG`end`

	!ifDEBUG `profilerPrint()`
	!ifDEBUG `staticProfilerPrint()`

	!ifDEBUG `if printTokenTestCounts then  printTokenTestCounts()  end`

	exit()
end

local gotCriticalError = false

-- compilerErrorHandler( err [, level=1 ] )
function _G.compilerErrorHandler(err, level)
	level = (level or 1)+1
	err   = tostring(err):gsub("^[-%w_/.]+:%d+: ", "")

	if gotCriticalError then
		io.stderr:write(debug.traceback("Error: Internal error: Error in xpcall() error handler: "..err, 2))
		os.exit(1)
	end
	gotCriticalError = true -- For some reason this function is also the error handler for itself. What the heck, Lua...

	local traceback    = debug.traceback("Error: Critical Lua error: "..err, level)
	local line1        = traceback:match"\n(\t[^\n]*)"
	local isInUserCode = false

	-- Is the error in user code?
	if line1 then
		!local linePat1 = "^\t((?[^:]+):(%d+)): (.+)"
		!local linePat2 = "^\t((%a:?[^:]+):(%d+)): (.+)"

		local                 luaLocation, filepath, ln, message = line1:match!(linePat1)
		if not filepath then  luaLocation, filepath, ln, message = line1:match!(linePat2)  end

		local state = filepath and itemWith1(allStates, "runnerPath", filepath)

		if state then
			local lineMappings = state.runnerLineMappings
			ln                 = tonumber(ln)
			isInUserCode       = lineMappings.lines[ln] ~= nil
		end
	end

	-- Print message.
	local lastWasIsCompiler = false

	io.stderr:write("\n")

	for line in traceback:gmatch"[^\n]+" do
		local                 luaLocation, filepath, ln, message = line:match!(linePat1)
		if not filepath then  luaLocation, filepath, ln, message = line:match!(linePat2)  end

		local written = false
		local state   = filepath and itemWith1(allStates, "runnerPath", filepath)

		if state then
			local lineMappings = state.runnerLineMappings
			ln                 = tonumber(ln)

			if lineMappings.lines[ln] then
				local luaLocationStr = " <"..luaLocation..">"
				io.stderr:write(
					"\t",
					lineMappings.files[ln], ":", lineMappings.lines[ln],
					": ",
					message,
					(not message:find(luaLocationStr, 1, true) and luaLocationStr or ""),
					"\n"
				)
				written = true
			end
		end

		if written then
			lastWasIsCompiler = false

		elseif not (isInUserCode and line:find"^\t") then
			!if DEBUG and 1==1 then
				if filepath == COMPILER_PATH then
					ln           = tonumber(ln)
					filepath, ln = tryToFixLocationForCompilerError(filepath, ln)
					line         = F("\t%s:%d: %s", filepath, ln, message)
				end
			!end
			io.stderr:write(line, "\n")
			lastWasIsCompiler = false

		elseif not lastWasIsCompiler then
			io.stderr:write("\t[Compiler]\n")
			-- io.stderr:write("\t(...)\n")
			lastWasIsCompiler = true
		end
	end

	io.stderr:write("\n")
	exit(1) -- Don't use exitFailure()! :ExitFailureOverride
end

!if DEBUG then
	_G.compilerLineNumbers = !(getLineNumbers())
!end

-- runCompiler() -- DEBUG
local ok = xpcall(runCompiler, compilerErrorHandler)
if not ok then  os.exit(1)  end
