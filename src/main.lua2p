--[[============================================================
--=
--=  Compiler entry point
--=
--=-------------------------------------------------------------
--=
--=  Glóa - a language that compiles into Lua
--=  by Marcus 'ReFreezed' Thunström
--=
--============================================================]]
!(
local VERSION = "0.1.0"

local HELP_TEXT = [[
Synopsis:
    lua gloa.lua [compilerOptions] myProgram.gloa [myOtherProgram.gloa ...] [-- metaprogramArgument1 ...]

Options:
    --debug    Output debug information into compiled programs.
    --help     Display this help.
    --nogc     Disable garbage collection during compilation. (May decrease compilation time.)
    --nostrip  Disable automatic removal of dead code. (May trigger runtime errors on start-up!)
    --silent   Disable output to stdout. (Errors and warnings are still printed to stderr.)
    --         Start of arguments for metaprogram.]]

local EXTRA_STATS = DEBUG and false
)

local args = {...}

do
	-- Note: We create a sandbox environment for the compiler and leave the
	-- default environment for the metaprogram to use instead of the other way
	-- around. Otherwise modules loaded by the metaprogram may not work if
	-- they're expected to modify the (default) environment. The compiler
	-- doesn't require any modules by itself so this work just fine.

	local defaultGlobals      = {}
	local compilerEnvironment = {} -- :CompilerEnvironment

	for k, v in pairs(_G) do
		defaultGlobals[k]      = v
		compilerEnvironment[k] = v
	end

	compilerEnvironment.DEFAULT_GLOBALS     = defaultGlobals
	compilerEnvironment.DEFAULT_ENVIRONMENT = _G
	compilerEnvironment._G                  = compilerEnvironment

	setfenv(1, compilerEnvironment)
end

local gotCriticalError = false

xpcall(function()
	local timeStartInitial = os.clock()

	!if DEBUG then
		-- Note: This slows down all printing.
		io.stdout:setvbuf("no")
		io.stderr:setvbuf("no")
	!end



	!-- We want the resulting Glóa compiler to be a single file, so we use @insert instead of requiring modules here. Note: The order matters!
	do !(do) @insert "preprocessorStuffAndGlobals.luapart" !(end) end
	do !(do) @insert "messagerEnums.luapart" !(end) end
	do !(do) @insert "functions.luapart"     !(end) end
	do !(do) @insert "lexer.luapart"         !(end) end
	do !(do) @insert "parser.luapart"        !(end) end
	do !(do) @insert "pipes.luapart"         !(end) end
	do !(do) @insert "typer.luapart"         !(end) end
	do !(do) @insert "bytecode.luapart"      !(end) end -- @Cleanup: Rename to something better.
	do !(do) @insert "runner.luapart"        !(end) end
	do !(do) @insert "messager.luapart"      !(end) end
	do !(do) @insert "compilerApi.luapart"   !(end) end
	do !(do) @insert "programWriter.luapart" !(end) end



	-- Parse arguments.
	local pathsToCompile    = {}
	local disableGc         = false
	_G.compilerArguments    = {}
	_G.metaprogramArguments = {}
	_G.silent               = false
	_G.outputDebugInfo      = false
	_G.keepDeadCode         = false

	!if DEBUG then
	_G.debug_onlyParse      = false
	_G.debug_onlyInferTypes = false
	!end

	do
		local function printHelpAndExit()
			print(!("Gloa v"..VERSION..os.date" (built %Y-%m-%d)")) -- No "Glóa" because we don't know the code page. :(
			print()
			print(!(HELP_TEXT))
			print()
			exit(0)
		end

		if not args[1] then  printHelpAndExit()  end

		local forCompiler = true
		local i           = 1

		while args[i] do
			local arg = args[i]

			if not forCompiler then
				table.insert(metaprogramArguments, arg)
				i = i+1
			elseif arg == "--" then
				forCompiler = false
				i           = i+1
			elseif not arg:find"^%-" then
				local path = arg:gsub("\\", "/")
				table.insert(pathsToCompile,    path)
				table.insert(compilerArguments, path)
				i = i+1

			elseif arg == "--help" or arg == "-help" or arg == "-?" or arg == "/help" or arg == "/?" then
				printHelpAndExit()
			elseif arg == "--nogc" then
				disableGc = true
				table.insert(compilerArguments, arg)
				i = i+1
			elseif arg == "--silent" then
				_G.silent = true
				table.insert(compilerArguments, arg)
				i = i+1
			elseif arg == "--debug" then
				_G.outputDebugInfo = true
				table.insert(compilerArguments, arg)
				i = i+1
			elseif arg == "--nostrip" then
				_G.keepDeadCode = true
				table.insert(compilerArguments, arg)
				i = i+1

			!if DEBUG then
			elseif arg == "--debug:onlyparse" then
				_G.debug_onlyParse = true
				table.insert(compilerArguments, arg)
				i = i+1
			elseif arg == "--debug:onlyinfer" then
				_G.debug_onlyInferTypes = true
				table.insert(compilerArguments, arg)
				i = i+1
			!end

			else
				errorLine("Compiler", "Unknown option '%s'.", arg)
			end
		end
	end



	!if DEBUG then
		print(os.date"%Y-%m-%d %H:%M:%S")
	!else
		if not silent then
			print()
			print("-------- Gloa --------")
			print('Args:  "'..table.concat(args, '" "')..'"')
			print("Files: "..table.concat(pathsToCompile, ", "))
			print(os.date"Date:  %Y-%m-%d %H:%M:%S")
			if disableGc then  print("Garbage collection disabled.")  end
			print()
		end
	!end

	if disableGc then  collectgarbage("stop")  end

	do
		local duplicates = {}
		for _, path in ipairs(pathsToCompile) do
			if duplicates[path] then
				errorLine("Compiler", "Duplicate path in arguments: %s", path)
			end
			duplicates[path] = true
		end
	end

	if not pathsToCompile[1] then
		errorLine("Compiler", "No files to compile.")
	end



	!local RESERVED_TOP_SCOPE_NAMES = Set{
		-- Locals:
		"_BREAK",
		"_CONDITION",
		"_SWITCH",
		-- _MEMBER#
		-- _OBJECT#
		-- _VALUE#

		-- Globals:
		"_COMPILER",
		"_FOREIGN",
		"_STATE",
		"_TYPE_INFO", -- @Incomplete: Make all type infos available to the user program.

		-- Compiler symbols:
		"_IPAIRS",
		"_IPAIRSR",
		"_FLOOR",
		"_HUGE",
		"_MODF",
		"_PAIRS",
		"_REP",
		"_REP2",
		"_SELECT",
	}

	local !struct"CompilationSettings"{
		-- BuildOptions:
		{`outputType`,      OUTPUT_TYPE_LUA_APP},
		{`outputFilePath`,  ""},
		{`entryPointName`,  "main"},
	}

	local !struct"CompilationState"{
		{`fileBuffers`,           {}},
		{`tokens`,                nil},   -- Tokens (struct)
		{`settings`,              nil},   -- CompilationSettings

		{`pathToFirstFile`,       ""},
		{`projectDirectory`,      ""},
		{`mainFileBasename`,      ""},

		{`timeParsing`,           0.0},
		{`timeParsingInPipes`,    0.0},
		{`timePipesStart`,        0.0},
		{`timePipes`,             0.0},
		{`timeOutput`,            0.0},

		{`sendMessages`,          false},
		{`phase`,                 0},
		{`messages`,              {}},
		{`nextMessageToSend`,     1},

		-- Parser:
		{`globalScope`,           nil},   -- AstGlobalScope
		{`nextToken`,             1},
		{`soft`,                  false}, -- Enabling this will make parsing functions return nil on error instead of triggering an actual error.
		{`luaPreloads`,           {}},    -- All !preload strings.

		-- Pipes:
		{`queueActive`,           {}},
		{`queueWaiting`,          {}},
		{`priorityStack`,         {}},
		{`allQueueds`,            {}},
		{`allDependencies`,       {}},
		-- Debug:
		{`finalPipe`,             PIPE_DONE-1},
		{`queuedUpdates`,         0},
		{`queuedUpdatesPerCycle`, {}},
		{`queueActiveMaxSize`,    0},
		{`queueWaitingMaxSize`,   0},
		{`pipeCycles`,            0},
		{`prioriyCount`,          0},

		-- Typer:
		{`lastTypeId`,            0},
		{`allTypeInfos`,          {}},

		-- Bytecode:
		{`constants`,             {}},
		{`constantN`,             0},
		{`functionN`,             0},     -- Same as constantN, but for function constants.
		{`topScopeNames`,         RESERVED_TOP_SCOPE_NAMES},
		{`bytecodes`,             {}},    -- Code for the interpreter to run.

		-- Runner:
		{`runnerEnvironment`,     {}},
		{`runnerWriter`,          nil}, -- WriterState
		{`runnerWrittenObjects`,  {}},
		{`runnerWrittenPreloads`, 0},
	}

	local timeDoingSubCompilations = 0

	function _G.compilationInitState(pathToFirstFile)
		local state  = CompilationState()
		state.tokens = Tokens()

		-- Project directory result examples:
		--   C:/app/main.gloa > C:/app
		--   ../main.gloa     > ..
		--   main.gloa        > .
		state.pathToFirstFile  = pathToFirstFile
		state.projectDirectory = pathToFirstFile:gsub("/?[^/]+$", ""):gsub("^$", ".")
		state.mainFileBasename = pathToFirstFile:match"([^/]+)%.gloa$"

		if not state.mainFileBasename then
			errorLine("Compiler", "Expected the file to compile to end with '.gloa': %s", pathToFirstFile)
		end

		local settings          = CompilationSettings()
		settings.outputFilePath = pathToFirstFile:gsub("%.gloa$", "")..".lua"
		state.settings          = settings

		!if DEBUG then
			if debug_onlyInferTypes then  state.finalPipe = !(PIPE_INFER)  end
		!end

		return state
	end

	function _G.compilationStart(state)
		local pathToFirstFile = state.pathToFirstFile
		if not silent then  print("Compiling "..pathToFirstFile:gsub("^.*/", ""))  end

		insertToken(state.tokens, !(TOKEN_DIRECTIVE),"import", "",pathToFirstFile)
		insertToken(state.tokens, !(TOKEN_STRING),"preload",   "",pathToFirstFile)

		local timeStart   = os.clock()
		readAndTokenizeFile(state, pathToFirstFile, true)
		parseGlobalScope(state, pathToFirstFile)
		state.timeParsing = os.clock()-timeStart

		if peekNextToken(state) then
			errorParsingNext(state, "Expected the end of the file.")
		end
	end

	-- compilationFinished = compilationDoOneCycle( state )
	function _G.compilationDoOneCycle(state)
		!local FINAL_PIPE = DEBUG and `state.finalPipe` or toLua(PIPE_DONE-1)

		!if DEBUG then
			state.queueActiveMaxSize  = math.max(state.queueActiveMaxSize,  #state.queueActive)
			state.queueWaitingMaxSize = math.max(state.queueWaitingMaxSize, #state.queueWaiting)
			state.pipeCycles          = state.pipeCycles+1
			-- print("cycle", state.pipeCycles)
		!end

		local didSomething    = false
		local i               = 1

		local queueActive     = state.queueActive
		local queueWaiting    = state.queueWaiting
		local priorityStack   = state.priorityStack
		local nextQueueActive = {}
		local gotPrioritized  = {}

		local insert          = table.insert
		local inferNode       = inferNode
		local bcEmit          = bcEmit

		!if EXTRA_STATS then
			local updatesThisCycle = {
				total = 0,
				!(
				for nodeType = 1, #nodeTypeNames do
					__LUA("0,")
				end
				)
			}
			state.queuedUpdatesPerCycle[state.pipeCycles] = updatesThisCycle
		!end

		while true do
			local priority = priorityStack[1]
			local queued

			if priority then
				local len          = #priorityStack
				queued             = priorityStack[len]
				priorityStack[len] = nil
				!ifDEBUG `state.prioriyCount = state.prioriyCount+1`
			else
				queued = queueActive[i] -- Note: New nodes (or nodes to reinfer) may be inserted into queueActive during this loop.
				if not queued then  break  end
			end

			if queued.unqueued then
				-- void

			elseif gotPrioritized[queued] then
				-- void  WARNING: Make sure we don't queue prioritized nodes multiple times!

			elseif queued.waitingOn then
				insert(queueWaiting, queued)

			else
				!(
				local DID_SOMETHING = "didSomething = true"

				if DEBUG then
					DID_SOMETHING = DID_SOMETHING.." state.queuedUpdates = state.queuedUpdates+1"

					if EXTRA_STATS then
						DID_SOMETHING = DID_SOMETHING
							.." updatesThisCycle.total                 = updatesThisCycle.total                 + 1"
							.." updatesThisCycle[queued.node.nodeType] = updatesThisCycle[queued.node.nodeType] + 1"
							-- .." if state.pipeCycles >= 89 then  print('Cycle '..state.pipeCycles) ; astPrint(queued.node) ; where(state, queued.node)  end"
					end
				end
				)

				if queued.pipe == !(PIPE_INFER) then
					!!(DID_SOMETHING)
					inferNode(state, queued.node)

					if queued.pipe > !(PIPE_INFER) then
						fulfillDependencies(state, queued.node, !(DEPEND_NODE_INFERRED))
						fulfillDependencies(state, queued.node, !(DEPEND_NODE_INFERRED_FULLY))
					elseif queued.node.inferredType then
						fulfillDependencies(state, queued.node, !(DEPEND_NODE_INFERRED))
					end

					--[[ This decreases node update count but somehow makes compilation slower. I dunno, man...
					if queued.pipe == !(PIPE_BYTECODE) then
						!ifDEBUG`if not debug_onlyInferTypes then`
							bcEmit(state, queued.node)
							if queued.pipe > !(PIPE_BYTECODE) then
								fulfillDependencies(state, queued.node, !(DEPEND_NODE_EMITTED))
							end
						!ifDEBUG`end`
					end
					--]]

				elseif queued.pipe == !(PIPE_BYTECODE) then
					!!(DID_SOMETHING)
					bcEmit(state, queued.node)

					if queued.pipe > !(PIPE_BYTECODE) then
						fulfillDependencies(state, queued.node, !(DEPEND_NODE_EMITTED))
					end
				end

				if queued.unqueued then
					-- void
				elseif queued.waitingOn then
					insert(queueWaiting, queued)
				elseif queued.pipe <= !!(FINAL_PIPE) then
					insert(nextQueueActive, queued)
				else
					-- void
				end
			end

			if priority then
				gotPrioritized[queued] = true
			else
				i = i+1
			end
		end--while queueActive[i]

		queueActive       = nextQueueActive
		state.queueActive = queueActive

		if not (queueWaiting[1] or queueActive[1]) then
			!if DEBUG then
				for _, queued in ipairs(state.allQueueds) do
					if not (queued.pipe > !!(FINAL_PIPE) or queued.unqueued) then
						errorInternal(state, queued.node)
					end
				end
			!end

			return true
		end

		if not didSomething then  errorPipesAreStuck(state)  end

		local currentQueueWaiting = queueWaiting
		queueWaiting              = {}
		state.queueWaiting        = queueWaiting

		for _, queued in ipairs(currentQueueWaiting) do
			local dependencyCurrent = not queued.unqueued and queued.waitingOn

			while dependencyCurrent do
				local dependency  = dependencyCurrent
				dependencyCurrent = nil

				!local DEPENDENCY_FULFILLED = `
					dependencyCurrent = dependency.next
					queued.waitingOn  = dependencyCurrent
				`

				if dependency.dependType == !(DEPEND_DECLARATION) then
					if dependency.extraData then
						if findPublicDeclarationInScope(state, dependency.extraData, dependency.dependOn) then
							!!(DEPENDENCY_FULFILLED)
						end
					else
						-- @Speed: Only call findDeclaration() if it's reported that a declaration with the awaited name has been added to the tree.
						if findDeclaration(state, queued.node, dependency.dependOn) then
							!!(DEPENDENCY_FULFILLED)
						end
					end
				elseif dependency.dependType == !(DEPEND_MEMBER_DECLARATION) then
					if findMemberDeclaration(state, dependency.extraData, dependency.dependOn) then
						!!(DEPENDENCY_FULFILLED)
					end

				elseif dependency.dependType == !(DEPEND_NODE_INFERRED) then
					-- Note: dependOn.node is not necessarily an expression which is why we also check the pipe.
					if dependency.dependOn.node.inferredType or dependency.dependOn.pipe > !(PIPE_INFER) then
						!!(DEPENDENCY_FULFILLED)
					end
				elseif dependency.dependType == !(DEPEND_NODE_INFERRED_FULLY) then
					if dependency.dependOn.pipe > !(PIPE_INFER) then
						!!(DEPENDENCY_FULFILLED)
					end

				elseif dependency.dependType == !(DEPEND_STRUCT_MEMBERS_READY) then
					if dependency.dependOn.hasMembers then
						!!(DEPENDENCY_FULFILLED)
					end

				elseif dependency.dependType == !(DEPEND_NODE_EMITTED) then
					if dependency.dependOn.pipe > !(PIPE_BYTECODE) then
						!!(DEPENDENCY_FULFILLED)
					end

				elseif dependency.dependType == !(DEPEND_CONSTANT_READY) then
					if dependency.dependOn.isReady then
						!!(DEPENDENCY_FULFILLED)
					end

				else
					errorInternal("%d", dependency.dependType)
				end
			end

			if queued.unqueued then
				-- void
			elseif queued.waitingOn then
				insert(queueWaiting, queued)
			else
				insert(queueActive, queued)
			end
		end--for currentQueueWaiting

		!if DEBUG then
			-- Guard against an infinite loop.
			if state.pipeCycles == 1000 then  errorPipesAreInfiniteLooping(state, !!(FINAL_PIPE))  end
		!end

		return false
	end

	function _G.maybeWriteProgram(state)
		if state.settings.outputType == !(OUTPUT_TYPE_NONE) then  return  end

		!ifDEBUG `if debug_onlyParse or debug_onlyInferTypes then  return  end`

		local pathToFirstFile = state.pathToFirstFile
		if state.settings.outputFilePath == pathToFirstFile then
			errorLine("Compiler", "The output path is the same as the input path. (%s)", pathToFirstFile)
		end

		local timeStart = os.clock()

		local writer         = WriterState()
		writer.file          = assert(io.open(state.settings.outputFilePath, "w"))
		writer.outputRuntime = true
		writeProgram(state, writer)

		state.timeOutput = os.clock()-timeStart
	end

	function _G.compileProgram(pathToFirstFile)
		local timeCompilingStart            = os.clock()
		local timeDoingSubCompilationsStart = timeDoingSubCompilations

		local state = compilationInitState(pathToFirstFile)
		compilationStart(state)

		-- Pipes.
		!ifDEBUG `profilerStart()`
		state.timePipesStart = os.clock()

		!ifDEBUG`if not debug_onlyParse then`
			addToQueueRecursively(state, state.globalScope)

			for cycle = 1, math.huge do
				if compilationDoOneCycle(state) then  break  end
			end
		!ifDEBUG`end`

		state.timePipes = os.clock() - state.timePipesStart - state.timeParsingInPipes
		!ifDEBUG `profilerStop()`
		--

		maybeWriteProgram(state)

		local timeCompilation = os.clock()-timeCompilingStart

		!ifNotDEBUG`if not silent then`
			!ifDEBUG `if debug_onlyParse then  astPrintTree(state.globalScope)  end`

			local tokens        = state.tokens
			local subTime       = timeDoingSubCompilations-timeDoingSubCompilationsStart
			local lineCountCode = 0
			local lastFile      = ""
			local lastLine      = 0

			for token = 1, tokens.count do
				if not tokens.inserted[token] then
					if tokens.file[token] ~= lastFile then
						lastFile = tokens.file[token]
						lastLine = 0
					end

					if tokens.line1[token] ~= lastLine then
						lineCountCode = lineCountCode+1
					end

					lineCountCode = lineCountCode+tokens.line2[token]-tokens.line1[token]
					lastLine      = tokens.line2[token]
				end
			end

			!local OK = {
				"██████████████████████ ",
				"███▀    ▀███  ███▀  ██ ",
				"██  ▄██▄  ██  █▀  ▄███ ",
				"██  ████  ██     █████ ",
				"██  ▀██▀  ██  █▄  ▀███ ",
				"███▄    ▄███  ███▄  ██ ",
				"██████████████████████ ",
			}

			printf(!((DEBUG and OK[  N(1)] or "Successfully compiled ").."%s"), state.pathToFirstFile)

			if subTime > 0 then
			printf(!((DEBUG and OK[incN()] or "").."Total:   %.3f (+%.3f) sec"), timeCompilation-subTime, subTime)
			else
			printf(!((DEBUG and OK[   N()] or "").."Total:   %.3f sec"        ), timeCompilation-subTime)
			end
			printf(!((DEBUG and OK[incN()] or "").."Parsing: %.3f sec"), state.timeParsing)
			printf(!((DEBUG and OK[incN()] or "").."Pipes:   %.3f sec"), state.timePipes-subTime)
			printf(!((DEBUG and OK[incN()] or "").."Output:  %.3f sec"), state.timeOutput)

			printf(
				!((DEBUG and OK[incN()] or "").."%d LOC in %d file%s (%d lines including empty lines and comments)"),
				lineCountCode,
				#state.globalScope.fileScopes-1,
				(state.globalScope.fileScopes[3] and "s" or ""),
				tokens.lineCount
			)

			!if DEBUG then
				local dependencyCount = {}
				for _, dependency in ipairs(state.allDependencies) do
					dependencyCount[dependency.dependType] = (dependencyCount[dependency.dependType] or 0)+1
				end

				local depencyCountTexts = {}
				for dependType, title in ipairs(DEPEND_TITLES) do
					depencyCountTexts[dependType] = F("%s:%d", title, (dependencyCount[dependType] or 0))
				end

				printf(
					!((DEBUG and OK[incN()] or "").."Cycles:%d Updates:%d Prio:%d Queue:%d(a=%d,w=%d) Consts:%d"),
					state.pipeCycles,
					state.queuedUpdates,
					state.prioriyCount,
					#state.allQueueds, state.queueActiveMaxSize, state.queueWaitingMaxSize,
					#state.constants
				)
				printf(
					!((DEBUG and OK[incN()] or "").."Deps:%d (%s)"),
					#state.allDependencies,
					table.concat(depencyCountTexts, " ")
				)

				!if EXTRA_STATS then
					print()

					for cycle = 1, state.pipeCycles do
						local updatesThisCycle  = state.queuedUpdatesPerCycle[cycle]
						local relevantNodeTypes = {}
						local perNodeTypeTexts  = {}

						for nodeType = 1, !(#nodeTypeNames) do
							if updatesThisCycle[nodeType] > 0 then
								table.insert(relevantNodeTypes, nodeType)
							end
						end

						table.sort(relevantNodeTypes, function(a, b)
							return updatesThisCycle[a] > updatesThisCycle[b]
						end)

						for _, nodeType in ipairs(relevantNodeTypes) do
							table.insert(
								perNodeTypeTexts,
								F("%s=%d", AST_NODE_TYPE_NAMES[nodeType]:gsub("^Ast", ""), updatesThisCycle[nodeType])
							)
						end

						printf("Cycle %-4d %-7d - %s", cycle, updatesThisCycle.total, table.concat(perNodeTypeTexts, " "))
					end
				!end
			!end

			print()
		!ifNotDEBUG`end`

		timeDoingSubCompilations = timeDoingSubCompilationsStart+timeCompilation
	end

	for _, path in ipairs(pathsToCompile) do
		compileProgram(path)
	end

	!ifNotDEBUG`if not silent then`
		if pathsToCompile[2] then
			printf("Compiled all %d programs in %.3f sec", #pathsToCompile, os.clock()-timeStartInitial)
		end
		if disableGc then
			printf("Memory usage: %s bytes", formatNumber(collectgarbage"count"*1024))
		end
	!ifNotDEBUG`end`

	!ifDEBUG `profilerPrint()`

	exit()

end, function(err)
	err = tostring(err):gsub("^[%w/.]+:%d+: ", "")

	if gotCriticalError then
		io.stderr:write(debug.traceback("Error: Internal error: Critical Lua error: Error in xpcall() error handler: "..err, 2))
		os.exit(1)
	end

	gotCriticalError = true -- For some reason this function is also the error handler for itself. What the heck, Lua...

	printerr(debug.traceback("Error: Internal error: Critical Lua error: "..err, 2))
	exit(1) -- Don't use exitFailure()! :ExitFailureOverride
end)
