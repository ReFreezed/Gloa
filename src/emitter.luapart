--[[============================================================
--=
--=  Constant and top-scope name emitter
--=
--=-------------------------------------------------------------
--=
--=  Glóa - a language that compiles into Lua
--=  by Marcus 'ReFreezed' Thunström
--=
--==============================================================

	allocateConstant*, allocateTopScopeName
	emitError, emitMessage
	emitNode, emit*
	maybeSetConstantName

--============================================================]]

!-- To prevent large strings from bloating the output file we treat them as
!-- referencable objects instead of literals.
!local STRING_OBJECT_MIN_LENGTH = 1024 -- @Incomplete: Make this an option.



!struct"_Constant"{
	{`name`,       ""},  -- Only used for constants that are objects.  @Incomplete: Separate the name for the metaprogram (which may be limited) and the final name.
	{`nameLocked`, false},

	{`kind`,       CONST_KIND_NORMAL}, -- See allocateConstantIfNew().
	{`valueType`,  nil}, -- TypeInfo
	{`value`,      nil},

	{`isObject`,   false},
	{`isReady`,    false},
}

-- constant, isNew = allocateConstantIfNew( state, CONST_KIND_NORMAL,    simpleTypeInfo,    literalValue,    nodeForError )
-- constant, isNew = allocateConstantIfNew( state, CONST_KIND_NORMAL,    enumTypeInfo,      memberName,      nodeForError ) -- Note: Enums are actually simple types but have special handling in some places.
-- constant, isNew = allocateConstantIfNew( state, CONST_KIND_NORMAL,    functionSignature, lambdaWithBody,  nodeForError )
-- constant, isNew = allocateConstantIfNew( state, CONST_KIND_NORMAL,    tableLikeTypeInfo, tableNode,       nodeForError )
-- constant, isNew = allocateConstantIfNew( state, CONST_KIND_NORMAL,    typeTypeInfo,      representedType, nodeForError )
-- constant, isNew = allocateConstantIfNew( state, CONST_KIND_FOREIGN,   dummyTypeInfo,     foreign,         nodeForError ) -- @Cleanup: Can we allow dummyTypeInfo to be nil?
-- constant, isNew = allocateConstantIfNew( state, CONST_KIND_TYPE_INFO, dummyTypeInfo,     typeInfo,        nodeForError )
-- constant, isNew = allocateConstantIfNew( state, CONST_KIND_LOCATION,  dummyTypeInfo,     targetNode,      nodeForError )
-- constant, isNew = allocateConstantIfNew( state, CONST_KIND_VIEW,      dummyTypeInfo,     access,          nodeForError )
-- constant, isNew = allocateConstantIfNew( state, CONST_KIND_NULL,      dummyTypeInfo,     nil,             nodeForError )
function _G.allocateConstantIfNew(state, kind, typeInfo, v, nodeForError)
	local tag          = typeInfo.tag
	local kindIsNormal = kind == !(CONST_KIND_NORMAL)

	local isSimple
		=  (kindIsNormal and isTypeSimple(typeInfo))
		or kind == !(CONST_KIND_NULL)

	if not isSimple and !!(CONST_SET{ TYPE_ANY, TYPE_NAMESPACE, TYPE_COMPOUND, TYPE_LIST, TYPE_PLACEHOLDER })[tag] then
		errorInternal(state, nodeForError, "Invalid type '%s' for constant.", (TYPE_NAMES[tag] or "?"))
	end

	--
	-- Look for existing contant
	--

	local valueForByValue = nil

	if kindIsNormal then
		local byTypeAndValue = state.constantsByTypeAndValue[typeInfo]

		if not byTypeAndValue then
			byTypeAndValue                          = {}
			state.constantsByTypeAndValue[typeInfo] = byTypeAndValue
		end

		if isSimple then
			valueForByValue = v

		elseif tag == !(TYPE_FUNCTION) then
			-- All functions are unique for now (except foreign functions, which are identified by source).
			-- We may detect duplicate non-foreign functions at some point.
			valueForByValue = v.bodyIsForeign and v.foreignSourceId or v

		elseif !!(CONST_SET{ TYPE_STRUCT, TYPE_ARRAY, TYPE_TABLE })[tag] then
			-- All table-likes are always unique.
			valueForByValue = v

		else
			errorInternal(state, nodeForError, "Incomplete: Unhandled constant value type '%s'.", (TYPE_NAMES[tag] or "?"))
		end

		local const = byTypeAndValue[valueForByValue]
		if const then  return const, false  end

	elseif kind == !(CONST_KIND_FOREIGN) then
		valueForByValue = v.foreignSourceId
		local const     = state.constantsByKindAndValue[!(CONST_KIND_FOREIGN)][valueForByValue]
		if const then  return const, false  end

	elseif kind == !(CONST_KIND_NULL) then
		local const = state.constantsByKind[!(CONST_KIND_NULL)][1] -- NULL is always the same value (nil).
		if const then  return const, false  end

	elseif !!(CONST_SET{ CONST_KIND_TYPE_INFO, CONST_KIND_LOCATION, CONST_KIND_VIEW })[kind] then
		valueForByValue = v
		local const     = state.constantsByKindAndValue[kind][valueForByValue]
		if const then  return const, false  end

	else
		errorInternal(state, nodeForError, "Incomplete: Unhandled constant kind %d (%s).", kind, (CONST_KIND_TITLES[kind] or "?"))
	end

	--
	-- Allocate new constant
	--

	local const = !new"_Constant"{
		`kind`,      "kind",
		`valueType`, "typeInfo",
		`value`,     "v",
		`isObject`,  "not isSimple or (kindIsNormal and tag == "..TYPE_STRING.." and #v >= "..STRING_OBJECT_MIN_LENGTH..")",
		`isReady`,   "not (kindIsNormal and tag == "..TYPE_FUNCTION..")",
	}

	-- Note: Simple constants (like ints) don't need a referencable name as we write those values directly everywhere.
	if const.isObject then
		if kindIsNormal and tag == !(TYPE_FUNCTION) then
			assert(not v.isPolymorphic)
			state.functionN = state.functionN+1
			const.name      = "_F"..state.functionN
		else
			state.constantN = state.constantN+1
			const.name      = "_C"..state.constantN
		end
		while state.topScopeNames[const.name] do
			const.name = const.name.."_" -- Not pretty, but ensures unique names.
		end
		state.topScopeNames[const.name] = true -- Note: The name may get tampered with later leaving the original name reserved but unused, but that's fine!
	end

	table.insert(state.constants,             const)
	table.insert(state.constantsByKind[kind], const)

	valueForByValue
		=  valueForByValue == nil             and !!(STATIC"NIL_SUBSTITUTE"{})
		or valueForByValue ~= valueForByValue and !!(STATIC"NAN_SUBSTITUTE"{})
		or valueForByValue

	state.constantsByKindAndValue[kind][valueForByValue] = const

	if kindIsNormal --[[and typeInfo]] then
		state.constantsByTypeAndValue[typeInfo][valueForByValue] = const
	end

	return const, true
end

-- constant, isNew = allocateConstantForExpressionIfNew( state, expression, dependent )
-- Returns nil on failure and the dependent is now waiting.
function _G.allocateConstantForExpressionIfNew(state, expr, dependent)
	local nodeType = expr.nodeType
	local typeInfo = expr.inferredType

	if nodeType == !(AST_LITERAL) then
		local literal = expr
		local const   = literal.valueConstant

		if not const then
			!DEPEND_AND_RETURN(`dependent`, DEPEND_NODE_PASSED_EMIT, `literal`, nil, `nil`)
		end

		return const, false

	elseif nodeType == !(AST_LAMBDA) then
		local lambda = expr
		assert(lambda.body) -- We should never get here for lambdas without bodies as those would have been AstTypes.
		if lambda.isPolymorphic then  errorInternal(state, lambda, "Cannot allocate constant for polymorphic function.")  end

		local isNew
		lambda.valueConstant, isNew = allocateConstantIfNew(state, !(CONST_KIND_NORMAL), typeInfo, lambda, dependent)

		return lambda.valueConstant, isNew

	elseif nodeType == !(AST_TYPE) then
		local typeNode = expr
		typeInfo       = state.builtinTypeInfos.Type
		return allocateConstantIfNew(state, !(CONST_KIND_NORMAL), typeInfo, typeNode.representedType, dependent)

	elseif nodeType == !(AST_STRUCT) then
		local struct     = expr
		local structInfo = struct.representedType

		-- @Incomplete: Wait for statements to get inferred (when we got struct self-referencing working).
		-- (Or maybe they're always already inferred at this point? 2020-03-22)

		local const, isNew = allocateConstantIfNew(state, !(CONST_KIND_NORMAL), typeInfo, structInfo, dependent)

		if isNew and outputDebugInfo and structInfo.name ~= "" then
			maybeSetConstantName(state, const, structInfo.name)
		end

		return const, isNew

	elseif nodeType == !(AST_ENUM) then
		local enum         = expr
		local enumInfo     = enum.representedType
		local const, isNew = allocateConstantIfNew(state, !(CONST_KIND_NORMAL), typeInfo, enumInfo, dependent)

		if isNew and outputDebugInfo and enumInfo.name ~= "" then
			maybeSetConstantName(state, const, enumInfo.name)
		end

		return const, isNew

	elseif nodeType == !(AST_IDENTIFIER) then
		local ident = expr

		if typeInfo.tag == !(TYPE_ENUM) then
			local enumInfo = typeInfo
			return allocateConstantIfNew(state, !(CONST_KIND_NORMAL), enumInfo, ident.name, dependent)

		else
			local decl = ident.declaration
			if decl.queued.pipe <= !(PIPE_EMIT) then
				!DEPEND_AND_RETURN(`dependent`, DEPEND_NODE_PASSED_EMIT, `decl`, nil, `nil`)
			end
			return allocateConstantForExpressionIfNew(state, decl.value, dependent)
		end

	elseif nodeType == !(AST_CAST) then
		-- The cast is probably from/to 'any'.
		local cast = expr
		return allocateConstantForExpressionIfNew(state, cast.expression, dependent)

	elseif nodeType == !(AST_FOREIGN) then
		local foreign = expr
		return allocateConstantIfNew(state, !(CONST_KIND_FOREIGN), typeInfo, foreign, dependent) -- Note: What typeInfo is doesn't matter here.

	elseif nodeType == !(AST_TABLE) then
		local tableNode    = expr
		local const, isNew = allocateConstantIfNew(state, !(CONST_KIND_NORMAL), typeInfo, tableNode, dependent)

		if not (isNew and outputDebugInfo) then
			-- void

		elseif tableNode.parent.nodeType == !(AST_DECLARATION) then
			local decl = tableNode.parent
			maybeSetConstantName(state, const, decl.name.name)

		elseif tableNode.parent.nodeType == !(AST_ASSIGNMENT) and tableNode.parent.forDeclaration then
			local assignment = tableNode.parent
			local i          = indexOf(assignment.values, tableNode) or errorInternal()
			local decl       = assignment.declarations[i]
			if decl then
				maybeSetConstantName(state, const, decl.name.name)
			end
		end

		return const, isNew

	elseif nodeType == !(AST_NULL) then
		return allocateConstantIfNew(state, !(CONST_KIND_NULL), typeInfo, nil, dependent) -- Note: What typeInfo is doesn't matter here.

	elseif nodeType == !(AST_ACCESS) then
		return allocateConstantIfNew(state, !(CONST_KIND_VIEW), typeInfo, expr, dependent) -- Note: What typeInfo is doesn't matter here.

	else
		errorUnhandledNodeType(state, expr)
	end
	errorInternal(state, expr)
end

function _G.allocateTopScopeName(state, name)
	local i = #state.topScopeNames+1
	local topScopeName

	if outputDebugInfo then
		topScopeName = unicodeToLuaIdentifier(name)
		if state.topScopeNames[topScopeName] then
			topScopeName = topScopeName.."_G"..i
		end
	else
		topScopeName = "G"..i
	end

	state.topScopeNames[i]            = topScopeName
	state.topScopeNames[topScopeName] = true

	return topScopeName
end

function _G.maybeSetConstantName(state, const, name)
	if const.nameLocked then  return  end

	local constName = unicodeToLuaIdentifier(name)
	if state.topScopeNames[constName] then
		constName = constName..const.name
	end

	const.name       = constName
	const.nameLocked = true

	state.topScopeNames[constName] = true
end



local function doesLoopBreak(state, loop)
	local doesBreak = false

	local function doesLoopBreak_onVisit(node)
		if node.nodeType == !(AST_BREAK) then
			doesBreak = true -- @Incomplete: Check what loop this breaks.
			return !(VISIT_BREAK)
		end
	end

	astVisitAllNodesInUnit(loop.body, false, doesLoopBreak_onVisit)
	return doesBreak
end

local function doesScopeReturn(state, scope)
	local statement = getLast(scope.statementsDynamic)

	if not statement then
		return false

	elseif statement.nodeType == !(AST_RETURN) then
		return true

	elseif statement.nodeType == !(AST_IF) then
		local ifBranch = statement
		return ifBranch.branchFalse ~= nil
			and doesScopeReturn(state, ifBranch.branchTrue)
			and doesScopeReturn(state, ifBranch.branchFalse)

	elseif statement.nodeType == !(AST_BLOCK) then
		local block = statement
		return doesScopeReturn(state, block)

	elseif statement.nodeType == !(AST_WHILE) then
		local loop      = statement
		local condition = loop.condition
		return
			(condition.nodeType == !(AST_LITERAL) and condition.literalType == !(LITERAL_BOOLEAN) and condition.value and not doesLoopBreak(state, loop)) -- Infinite loops don't have to return.
			or doesScopeReturn(state, loop.body)

	elseif statement.nodeType == !(AST_FOR) then
		local loop = statement
		return doesScopeReturn(state, loop.body)

	elseif statement.nodeType == !(AST_SWITCH) then
		local switch = statement
		for _, case in ipairs(switch.cases) do
			if not (case.fallThrough or doesScopeReturn(state, case.body)) then  return false  end
		end
		return true

	else
		return false
	end
	errorInternal(state, statement)
end

function _G.emitLambda(state, lambda)
	lambda.valueConstant = allocateConstantIfNew(state, !(CONST_KIND_NORMAL), lambda.inferredType, lambda, lambda)

	if lambda.bodyIsForeign then
		lambda.valueConstant.isReady = true -- @Cleanup: We can probably set this in allocateConstantIfNew(). (Should we though? Maybe.)
		lambda.queued.pipe = !(PIPE_DONE)
		return
	end

	local function emitLambda_onVisit(node)
		if not node.queued                  then  return !(VISIT_IGNORE_CHILDREN)  end
		if node.queued.pipe > !(PIPE_INFER) then  return                           end
		!DEPEND_AND_RETURN(`lambda`, DEPEND_NODE_PASSED_EMIT, `node`, nil, toLua(VISIT_BREAK))
	end

	astVisitAllNodesInUnit(lambda, false, emitLambda_onVisit)
	if lambda.queued.waitingOn then  return  end

	if lambda.inferredType.argumentTypesOut[1] and not doesScopeReturn(state, lambda.body) then
		nodeError(state, lambda.bodyEndDummy, "Emitter", "Expected a return statement at the end of the function body.")
	end

	lambda.valueConstant.isReady = true
	lambda.queued.pipe           = !(PIPE_DONE)
end

function _G.emitDeclaration(state, decl)
	-- @Robustness: We should probably use shouldDeclarationValueDefinitivelyBeConstant() here somewhere.

	if isDeclarationConstant(decl) then
		local typeInfo = decl.inferredType
		if typeInfo.tag == !(TYPE_FUNCTION) and typeInfo.isPolymorphic then
			-- @Cleanup: moveToNextRelevantPipe() should prevent us from getting here.
			decl.queued.pipe = !(PIPE_DONE)
			return
		end

		local valueExpr = decl.value or errorInternal(state, decl) -- Note: We don't call followIdentifiersToConstantValue() here! (Because of enums, I think. 2020-06-11)

		local const
		if typeInfo.tag == !(TYPE_ENUM) then
			local enumInfo = typeInfo
			local name     = valueExpr.nodeType == !(AST_IDENTIFIER) and valueExpr.name or decl.name.name
			const          = allocateConstantIfNew(state, !(CONST_KIND_NORMAL), enumInfo, name, decl)
		else
			const          = allocateConstantForExpressionIfNew(state, valueExpr, decl)
		end
		if not const then  return  end -- A dependency was added and we're now waiting.

		decl.valueConstant = const

		if outputDebugInfo then
			local name = decl.name.name

			if name:byte(1) == @@BYTE"!" then
				if name:find"^!call" or name:find"^!iterator" then -- @Ugly detection.
					local struct = decl.parent

					if decl.addedByPolymorph then
						!ASSERT("struct.nodeType == "..AST_LAMBDA)
						!ASSERT("struct.parent.nodeType == "..AST_DECLARATION)
						struct = struct.parent.parent
					end

					if struct.nodeType ~= !(AST_STRUCT) then
						-- Only structs can have !call/iterator declarations at the moment. 2020-03-22
						!ifDEBUG `astPrint(struct)`
						errorInternal(state, decl)
					end

					name = struct.representedType.name
					if name ~= "" then
						maybeSetConstantName(state, const, name.."_"..decl.name.name:sub(2))
					end

				else
					maybeSetConstantName(state, const, name:sub(2))
				end

			else
				maybeSetConstantName(state, const, name)
			end
		end

	elseif decl.kind == !(DECL_KIND_STATIC) then
		local valueExpr = decl.value

		if valueExpr then
			local const = allocateConstantForExpressionIfNew(state, valueExpr, decl)
			if not const then  return  end -- A dependency was added and we're now waiting.

			decl.valueConstant = const
		end

		decl.topScopeName = allocateTopScopeName(state, decl.name.name)

	else
		local scope = astFindParentScope(decl)

		if isScopeDeclarative(scope) then
			local valueExpr = getDeclarationValue(decl)

			if valueExpr then
				local const = allocateConstantForExpressionIfNew(state, valueExpr, decl)
				if not const then  return  end -- A dependency was added and we're now waiting.

				decl.valueConstant = const
			end

			if !!(CONST_SET{ AST_FILE_SCOPE, AST_GLOBAL_SCOPE, AST_NAMESPACE })[scope.nodeType] then
				decl.topScopeName = allocateTopScopeName(state, decl.name.name)
			end
		end
	end

	decl.queued.pipe = !(PIPE_DONE)
end

function _G.emitNode(state, node)
	local nodeType = node.nodeType

	if nodeType == !(AST_LITERAL) then
		local literal              = node
		literal.valueConstant      = allocateConstantIfNew(state, !(CONST_KIND_NORMAL), literal.inferredType, literal.value, literal)
		literal.queued.pipe        = !(PIPE_DONE)

	elseif nodeType == !(AST_DECLARATION) then
		local decl = node
		emitDeclaration(state, decl) -- Updates pipe.

	elseif nodeType == !(AST_LAMBDA) then
		local lambda = node
		assert(lambda.body)
		if lambda.isPolymorphic then  errorInternal(state, lambda, "Cannot allocate constant for polymorphic function.")  end
		emitLambda(state, lambda) -- Updates pipe.

	elseif nodeType == !(AST_NULL) then
		local null                 = node
		null.valueConstant         = allocateConstantIfNew(state, !(CONST_KIND_NULL), state.builtinTypeInfos.void, nil, null)
		null.queued.pipe           = !(PIPE_DONE)

	elseif nodeType == !(AST_FOREIGN) then
		local foreign              = node
		foreign.valueConstant      = allocateConstantIfNew(state, !(CONST_KIND_FOREIGN), state.builtinTypeInfos.void, foreign, foreign)
		foreign.queued.pipe        = !(PIPE_DONE)

	elseif nodeType == !(AST_TYPE_INFO) then
		local typeInfoNode         = node
		typeInfoNode.valueConstant = allocateConstantIfNew(state, !(CONST_KIND_TYPE_INFO), state.builtinTypeInfos.void, typeInfoNode.valueTypeInfo, typeInfoNode)
		typeInfoNode.queued.pipe   = !(PIPE_DONE)

	elseif nodeType == !(AST_LOCATION) then
		local loc                  = node
		loc.valueConstant          = allocateConstantIfNew(state, !(CONST_KIND_LOCATION), state.builtinTypeInfos.void, loc.target, loc)
		loc.queued.pipe            = !(PIPE_DONE)

	elseif nodeType == !(AST_CALL) then -- The called function should have a !caller_location.
		local call                 = node
		call.locationConstant      = allocateConstantIfNew(state, !(CONST_KIND_LOCATION), state.builtinTypeInfos.void, call.callee, call)
		call.queued.pipe           = !(PIPE_DONE)

	else
		errorUnhandledNodeType(state, node)
	end
end



function _G.emitError(state, node, s, ...)
	return nodeError(state, node, "Emitter", s, ...)
end

-- emitMessage( [ outputFile=io.stdout, ] compilationState, node, label, formatString, ... )
function _G.emitMessage(file, state, node, label, s, ...)
	if type(file) ~= "userdata" then  return emitMessage(io.stdout, file, state, node, label, s, ...)  end
	return nodeMessage(file, state, node, label, "Emitter", s, ...)
end


