--[[============================================================
--=
--=  Messenger
--=
--=  Structs here are reflected in modules/compiler.gloa and modules/preload.gloa
--=  Relevant enums are in messengerEnums.luapart
--=
--=-------------------------------------------------------------
--=
--=  Glóa - a language that compiles into Lua
--=  by Marcus 'ReFreezed' Thunström
--=
--==============================================================

	...

--============================================================]]
!recordLineNumber(@file, @line)

local !struct"CompilerMessage"{
	{`kind`, 0},
}

local !struct"CompilerMessageFile:CompilerMessage"{
	{`path`, ""},
}

local !struct"CompilerMessageCompilationPhase:CompilerMessage"{
	{`phase`,      0},
	{`outputPath`, ""},
}

local !struct"CompilerMessageCodeTypechecked:CompilerMessage"{
	{`declaration`, nil}, -- CodeDeclaration
}

local MESSAGE_KIND_TO_STRUCT = {
	[!(MESSAGE_CODE_TYPECHECKED)]  = CompilerMessageCodeTypechecked,
	[!(MESSAGE_COMPILATION_PHASE)] = CompilerMessageCompilationPhase,
	[!(MESSAGE_COMPLETE)]          = CompilerMessage,
	[!(MESSAGE_FILE)]              = CompilerMessageFile,
}

function _G.newMessage(messageKind)
	local Message = MESSAGE_KIND_TO_STRUCT[messageKind] or errorInternal("Incomplete: Handle messageKind=%d", messageKind)
	local message = Message()
	message.kind  = messageKind
	return message
end

--
-- Public-facing type info
--

function _G.getPublicType(state, typeInfo)
	local publicType = state.publicTypeInfoById[typeInfo.id]
	if publicType then  return publicType  end

	!ASSERT `typeInfo.isReady`
	!ASSERT `isTypePublic(typeInfo)`

	local tag = typeInfo.tag

	-- Note: These tables must be synced with preload and programWriter!

	if tag == !(TYPE_ARRAY) then
		local arraySig = typeInfo

		publicType = {
			tag      = tag,
			id       = arraySig.id,
			itemType = arraySig.itemType.id,
		}
		state.publicTypeInfoById[typeInfo.id] = publicType

	elseif tag == !(TYPE_VARARG) then
		local varargSig = typeInfo

		publicType = {
			tag      = tag,
			id       = varargSig.id,
			itemType = varargSig.itemType.id,
		}
		state.publicTypeInfoById[typeInfo.id] = publicType

	elseif tag == !(TYPE_FUNCTION) then
		local funcSig = typeInfo

		publicType = {
			tag          = tag,
			id           = funcSig.id,
			argumentsIn  = {},
			argumentsOut = {},
		}
		state.publicTypeInfoById[typeInfo.id] = publicType

		for i, argType in ipairs(funcSig.argumentTypesIn) do
			publicType.argumentsIn[i] = {argumentType=argType.id}
		end
		for i, argType in ipairs(funcSig.argumentTypesOut) do
			publicType.argumentsOut[i] = {argumentType=argType.id}
		end

	elseif tag == !(TYPE_STRUCT) then
		local structInfo = typeInfo

		publicType = {
			tag       = tag,
			id        = structInfo.id,
			name      = structInfo.name,
			kind      = structInfo.kind,
			keyType   = structInfo.keyType   and structInfo.keyType.id   or !(TYPE_VOID),
			valueType = structInfo.valueType and structInfo.valueType.id or !(TYPE_VOID),
			members   = {},
		}
		state.publicTypeInfoById[typeInfo.id] = publicType

		for i, member in ipairs(structInfo.members) do
			publicType.members[i] = {name=member.name, memberType=member.typeInfo.id}
		end

	elseif tag == !(TYPE_ENUM) then
		local enumInfo = typeInfo

		publicType = {
			tag        = tag,
			id         = enumInfo.id,
			name       = enumInfo.name,
			memberType = enumInfo.memberTypeInfo.id,
			members    = {},
		}
		state.publicTypeInfoById[typeInfo.id] = publicType

		for i, member in ipairs(enumInfo.members) do
			publicType.members[i] = {name=member.name}
		end

	elseif tag == !(TYPE_COMPOUND) then
		local compound = typeInfo

		publicType = {
			tag   = tag,
			id    = compound.id,
			types = {},
		}
		state.publicTypeInfoById[typeInfo.id] = publicType

		for i, compoundItem in ipairs(compound) do
			publicType.types[i] = compoundItem.id
		end

	elseif !!(CONST_SET{ -- :SimplePublicTypeInfo
		TYPE_ANY,
		TYPE_BOOL,
		TYPE_FLOAT,
		TYPE_INT,
		TYPE_NONE,
		TYPE_PLACEHOLDER,
		TYPE_STRING,
		TYPE_TABLE,
		TYPE_TYPE,
		TYPE_VOID,
	})[tag] then
		publicType = {
			tag      = tag,
			id       = typeInfo.id,
			-- No extra type-specific information.
		}
		state.publicTypeInfoById[typeInfo.id] = publicType

	else
		errorInternal("Incomplete: Generate PublicTypeInfo for type group '%s'.", TYPE_TAG_NAMES[tag])
	end

	table.insert(state.publicTypeInfoIds, typeInfo.id)
	return publicType
end

--
-- Code nodes
--

!struct"_CodeNode"{
	{`kind`,         0}, -- CODE_*
	{`serial`,       0},

	{`typeInfo`,     nil}, -- PublicTypeInfo

	{`filepath`,     ""},
	{`lineNumber`,   0},
	{`filePosition`, 0},
}

_G.!struct"CodeDeclaration:_CodeNode"{
	_overrides={{`kind`,CODE_DECLARATION}},
	{`name`,           ""},
	{`expressions`,    {}},  -- []CodeNode
	{`rootExpression`, nil}, -- CodeNode
	{`isConstant`,     false},
	{`notes`,          {}},  -- []typeId
}

_G.!struct"CodeIdentifier:_CodeNode"{
	_overrides={{`kind`,CODE_IDENTIFIER}},
	{`name`,        ""},
	{`declaration`, nil}, -- CodeDeclaration
}

_G.!struct"CodeLiteral:_CodeNode"{
	_overrides={{`kind`,CODE_LITERAL}},
	{`value`, nil},
}

_G.!struct"CodeOperator:_CodeNode"{
	_overrides={{`kind`,CODE_OPERATOR_EXPRESSION}},
	{`operator`, ""},
	{`left`,     nil}, -- CodeNode
	{`middle`,   nil}, -- CodeNode
	{`right`,    nil}, -- CodeNode
}

-- @Incomplete...
