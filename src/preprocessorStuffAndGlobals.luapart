--[[============================================================
--=
--=  Preprocessor stuff and globals
--=
--=-------------------------------------------------------------
--=
--=  Glóa - a language that compiles into Lua
--=  by Marcus 'ReFreezed' Thunström
--=
--============================================================]]
!recordLineNumber(@file, @line)

!(
-- CONST, CONST_SET
-- F, getByte, BYTE
-- ifDEBUG, ifNotDEBUG, ASSERT, TRACE, debugger
-- incN, N
-- indexOf, itemWith1
-- outputCommaSeparatedValues
-- preprocessorOutputAtTopOfFile, preprocessorOutputAtDuringPost
-- Set
-- STATIC
-- struct, new
-- trimTemplate, templateToLua
-- UNINDENT



local n = 0
function _G.incN() n = n + 1   ; return n  end
function _G.N(_n)  n = _n or n ; return n  end

_G.UTF8_CHARACTER_PATTERN = "[%z\1-\127\194-\244][\128-\191]*"

_G.TOKEN_KEYWORD     = 1
_G.TOKEN_IDENTIFIER  = 2
_G.TOKEN_DIRECTIVE   = 3
_G.TOKEN_FLOAT       = 4
_G.TOKEN_INTEGER     = 5
_G.TOKEN_STRING      = 6
_G.TOKEN_PUNCTUATION = 7
_G.TOKEN_DUMMY       = 8 -- Used e.g. to indicate the beginning of a file.

local TOKEN_TITLES = {
	[TOKEN_KEYWORD]     = "keyword",
	[TOKEN_IDENTIFIER]  = "identifier",
	[TOKEN_DIRECTIVE]   = "directive",
	[TOKEN_FLOAT]       = "float",
	[TOKEN_INTEGER]     = "integer",
	[TOKEN_STRING]      = "string",
	[TOKEN_PUNCTUATION] = "punctuation",
	[TOKEN_DUMMY]       = "dummy",
}

_G.LITERAL_FLOAT   = 1
_G.LITERAL_INTEGER = 2
_G.LITERAL_STRING  = 3
_G.LITERAL_BOOLEAN = 4
_G.LITERAL_NIL     = 5

local LITERAL_TITLES = {
	[LITERAL_FLOAT]   = "float",
	[LITERAL_INTEGER] = "int",
	[LITERAL_STRING]  = "string",
	[LITERAL_BOOLEAN] = "bool",
	[LITERAL_NIL]     = "nil",
}

_G.FOR_NUMERIC  = 1 -- for [ i = ] start, end [, step ]
_G.FOR_SHORT    = 2 -- for [ v1, ... : ] obj
_G.FOR_ITERATOR = 3 -- for v1, ... in iter [, state [, init ] ]

local FOR_TITLES = {
	[FOR_NUMERIC]  = "numeric",
	[FOR_SHORT]    = "short",
	[FOR_ITERATOR] = "iterator",
}

_G.DECLARATION_NORMAL = 1
_G.DECLARATION_STRUCT = 2
_G.DECLARATION_ENUM   = 3

_G.VISIT_CONTINUE        = 1
_G.VISIT_BREAK           = 2
_G.VISIT_IGNORE_CHILDREN = 3

_G.PIPE_NONE  = 0
_G.PIPE_INFER = 1
_G.PIPE_READY = 2
_G.PIPE_EMIT  = 3
_G.PIPE_DONE  = 4

local PIPE_TITLES = {
	[PIPE_NONE]  = "none",
	[PIPE_INFER] = "infer",
	[PIPE_READY] = "ready",
	[PIPE_EMIT]  = "emit",
	[PIPE_DONE]  = "done",
}

_G.DEPEND_DECLARATION          = 1
_G.DEPEND_MEMBER_DECLARATION   = 2
_G.DEPEND_HAS_DECLARATION      = 3
_G.DEPEND_NODE_INFERRED        = 4 -- When node has a type, even if the type isn't ready.
_G.DEPEND_NODE_PASSED_INFER    = 5
_G.DEPEND_NODE_PASSED_READY    = 6
_G.DEPEND_NODE_PASSED_EMIT     = 7 -- Any constants have beed allocated.
_G.DEPEND_TYPE_READY           = 8
_G.DEPEND_STRUCT_MEMBERS_READY = 9
_G.DEPEND_CONSTANT_READY       = 10

_G.DEPEND_TITLES = {
	[DEPEND_DECLARATION]          = "declaration",
	[DEPEND_MEMBER_DECLARATION]   = "memberDeclaration",
	[DEPEND_HAS_DECLARATION]      = "hasDeclaration",
	[DEPEND_NODE_INFERRED]        = "nodeInferred",
	[DEPEND_NODE_PASSED_INFER]    = "nodePassedInferPipe",
	[DEPEND_NODE_PASSED_READY]    = "nodePassedReadyPipe",
	[DEPEND_NODE_PASSED_EMIT]     = "nodePassedEmitPipe",
	[DEPEND_TYPE_READY]           = "typeReady",
	[DEPEND_STRUCT_MEMBERS_READY] = "structMembersReady",
	[DEPEND_CONSTANT_READY]       = "constantReady",
}

_G.TYPE_KIND_UNSET          = 0
_G.TYPE_KIND_SIMPLE_BUILTIN = 1
_G.TYPE_KIND_USER           = 2
_G.TYPE_KIND_FUNCTION       = 3 -- Extra data: Function signature.
_G.TYPE_KIND_ARRAY          = 4 -- Extra data: Item type.
_G.TYPE_KIND_COMPOUND       = 5 -- Extra data: Types.

local TYPE_KIND_TITLES = {
	[TYPE_KIND_UNSET]          = "**unset type kind**",
	[TYPE_KIND_SIMPLE_BUILTIN] = "built-in type",
	[TYPE_KIND_USER]           = "user type", -- Struct or enum (I think).
	[TYPE_KIND_FUNCTION]       = "function signature",
	[TYPE_KIND_ARRAY]          = "array type",
	[TYPE_KIND_COMPOUND]       = "compound type",
}

_G.AUTOBAKE_DISABLED = 0
_G.AUTOBAKE_ENABLED  = 1
_G.AUTOBAKE_REQUIRED = 2

_G.CONST_KIND_NORMAL    = 1
_G.CONST_KIND_FOREIGN   = 2
_G.CONST_KIND_TYPE_INFO = 3
_G.CONST_KIND_NULL      = 4
_G.CONST_KIND_VIEW      = 5 -- A view into a table constructor.
_G.CONST_KIND_LOCATION  = 6

_G.CONST_KIND_TITLES = {
	[CONST_KIND_NORMAL]    = "normal",
	[CONST_KIND_FOREIGN]   = "foreign",
	[CONST_KIND_TYPE_INFO] = "type info",
	[CONST_KIND_NULL]      = "null",
	[CONST_KIND_VIEW]      = "view",
	[CONST_KIND_LOCATION]  = "location",
}

_G.STRUCT_KIND_NORMAL = 1
_G.STRUCT_KIND_TABLE  = 2
_G.STRUCT_KIND_ARRAY  = 3

local STRUCT_KIND_TITLES = {
	[STRUCT_KIND_NORMAL] = "normal",
	[STRUCT_KIND_TABLE]  = "table",
	[STRUCT_KIND_ARRAY]  = "array",
}

_G.DECL_KIND_LOCAL_VAR    = 1
_G.DECL_KIND_LOCAL_CONST  = 2
_G.DECL_KIND_EXPORT_VAR   = 3
_G.DECL_KIND_EXPORT_CONST = 4
_G.DECL_KIND_STATIC       = 5
_G.DECL_KIND_READ_ONLY    = 6 -- @Incomplete: Read-only names.

local DECL_KIND_TITLES = {
	[DECL_KIND_LOCAL_VAR]    = "local variable",
	[DECL_KIND_LOCAL_CONST]  = "local constant",
	[DECL_KIND_EXPORT_VAR]   = "exported variable",
	[DECL_KIND_EXPORT_CONST] = "exported constant",
	[DECL_KIND_STATIC]       = "static variable",
	[DECL_KIND_READ_ONLY]    = "read-only variable",
}

_G.IDENT_KIND_IGNORE                 = 0 -- E.g. function output arguments.
_G.IDENT_KIND_LOOSE                  = 1
_G.IDENT_KIND_RELATIVE               = 2
_G.IDENT_KIND_ASSIGNMENT             = 3 -- @Cleanup: Maybe just use IDENT_KIND_LOOSE instead of this.
_G.IDENT_KIND_DECLARATION            = 4
_G.IDENT_KIND_DECLARATION_ASSIGNMENT = 5 -- @Cleanup: Maybe just use IDENT_KIND_DECLARATION, even in assignments.

local IDENT_KIND_TITLES = {
	[IDENT_KIND_IGNORE]                 = "ignore",
	[IDENT_KIND_LOOSE]                  = "loose",
	[IDENT_KIND_RELATIVE]               = "relative",
	[IDENT_KIND_ASSIGNMENT]             = "assignment",
	[IDENT_KIND_DECLARATION]            = "declaration",
	[IDENT_KIND_DECLARATION_ASSIGNMENT] = "declaration assignment",
}

_G.OUTPUT_TYPE_NONE       = 0
_G.OUTPUT_TYPE_LUA_APP    = 1
_G.OUTPUT_TYPE_LUA_MODULE = 2

_G.TYPE_VOID        = 1
_G.TYPE_ANY         = 2
_G.TYPE_ARRAY       = 3
_G.TYPE_BOOL        = 4
_G.TYPE_COMPOUND    = 5
_G.TYPE_ENUM        = 6
_G.TYPE_FLOAT       = 7
_G.TYPE_FUNCTION    = 8
_G.TYPE_INT         = 9
_G.TYPE_LIST        = 10
_G.TYPE_NAMESPACE   = 11
_G.TYPE_NONE        = 12
_G.TYPE_PLACEHOLDER = 13
_G.TYPE_STRING      = 14
_G.TYPE_STRUCT      = 15
_G.TYPE_TABLE       = 16
_G.TYPE_TYPE        = 17
_G.TYPE_VARARG      = 18

_G.TYPE_NAMES = {
	[TYPE_VOID]        = "void",
	[TYPE_ANY]         = "any",
	[TYPE_ARRAY]       = "array",
	[TYPE_BOOL]        = "bool",
	[TYPE_COMPOUND]    = "compound",
	[TYPE_ENUM]        = "enum",
	[TYPE_FLOAT]       = "float",
	[TYPE_FUNCTION]    = "function",
	[TYPE_INT]         = "int",
	[TYPE_LIST]        = "list",
	[TYPE_NAMESPACE]   = "namespace",
	[TYPE_NONE]        = "none",
	[TYPE_PLACEHOLDER] = "placeholder",
	[TYPE_STRING]      = "string",
	[TYPE_STRUCT]      = "struct",
	[TYPE_TABLE]       = "table",
	[TYPE_TYPE]        = "Type",
	[TYPE_VARARG]      = "vararg",
}

_G.AST_ACCESS       = 1
_G.AST_ARGUMENT     = 2
_G.AST_ARGUMENTS    = 3
_G.AST_ASSIGNMENT   = 4
_G.AST_BAKE         = 5
_G.AST_BINARY       = 6
_G.AST_BLANK        = 7
_G.AST_BLOCK        = 8
_G.AST_BREAK        = 9
_G.AST_CALL         = 10
_G.AST_CAST         = 11
_G.AST_CONDITIONAL  = 12
_G.AST_CONTINUE     = 13
_G.AST_DEBUG        = 14
_G.AST_DECLARATION  = 15
_G.AST_DEFER        = 16
_G.AST_DUMMY        = 17
_G.AST_ENUM         = 18
_G.AST_FILE_SCOPE   = 19
_G.AST_FOR          = 20
_G.AST_FOREIGN      = 21
_G.AST_GLOBAL_SCOPE = 22
_G.AST_IDENTIFIER   = 23
_G.AST_IF           = 24
_G.AST_IMPORT       = 25
_G.AST_LAMBDA       = 26
_G.AST_LITERAL      = 27
_G.AST_LOCATION     = 28
_G.AST_NAMESPACE    = 29
_G.AST_NULL         = 30
_G.AST_RETURN       = 31
_G.AST_RUN          = 32
_G.AST_STATIC_IF    = 33
_G.AST_STRUCT       = 34
_G.AST_SWITCH       = 35
_G.AST_TABLE        = 36
_G.AST_TYPE         = 37
_G.AST_TYPE_INFO    = 38
_G.AST_TYPE_OF      = 39
_G.AST_UNARY        = 40
_G.AST_USING        = 41
_G.AST_VARARG       = 42
_G.AST_VARIANT_OF   = 43
_G.AST_WHILE        = 44

_G.AST_NAMES = {
	[AST_ACCESS]       = "access",
	[AST_ARGUMENT]     = "argument",
	[AST_ARGUMENTS]    = "arguments",
	[AST_ASSIGNMENT]   = "assignment",
	[AST_BAKE]         = "bake",
	[AST_BINARY]       = "binary",
	[AST_BLANK]        = "blank",
	[AST_BLOCK]        = "block",
	[AST_BREAK]        = "break",
	[AST_CALL]         = "call",
	[AST_CAST]         = "cast",
	[AST_CONDITIONAL]  = "conditional",
	[AST_CONTINUE]     = "continue",
	[AST_DEBUG]        = "debug",
	[AST_DECLARATION]  = "declaration",
	[AST_DEFER]        = "defer",
	[AST_DUMMY]        = "dummy",
	[AST_ENUM]         = "enum",
	[AST_FILE_SCOPE]   = "fileScope",
	[AST_FOR]          = "for",
	[AST_FOREIGN]      = "foreign",
	[AST_GLOBAL_SCOPE] = "globalScope",
	[AST_IDENTIFIER]   = "identifier",
	[AST_IF]           = "if",
	[AST_IMPORT]       = "import",
	[AST_LAMBDA]       = "lambda",
	[AST_LITERAL]      = "literal",
	[AST_LOCATION]     = "location",
	[AST_NAMESPACE]    = "namespace",
	[AST_NULL]         = "null",
	[AST_RETURN]       = "return",
	[AST_RUN]          = "run",
	[AST_STATIC_IF]    = "staticIf",
	[AST_STRUCT]       = "struct",
	[AST_SWITCH]       = "switch",
	[AST_TABLE]        = "table",
	[AST_TYPE]         = "type",
	[AST_TYPE_INFO]    = "typeInfo",
	[AST_TYPE_OF]      = "typeOf",
	[AST_UNARY]        = "unary",
	[AST_USING]        = "using",
	[AST_VARARG]       = "vararg",
	[AST_VARIANT_OF]   = "variantOf",
	[AST_WHILE]        = "while",
}

_G.CRAWL_NODE     = 1
_G.CRAWL_CONSTANT = 2

_G.OPERATOR_PRECEDENCE = {
	-- From lower to higher priority.
	conditional = N(1),
	["or"]      = incN(),
	["and"]     = incN(),
	["=="]      = incN(), ["~="] = N(),
	["<"]       = incN(), [">"]  = N(), ["<="] = N(), [">="] = N(),
	[".."]      = incN(),
	["+"]       = incN(), ["-"]  = N(),
	["*"]       = incN(), ["/"]  = N(), ["//"] = N(), ["%"] = N(),
	unary       = incN(),-- not, #, +(unary), -(unary)
	["^"]       = incN(),
	cast        = incN(),-- cast()
	call        = incN(),
	dotCast     = incN(),-- .{}, .NULL
	compound    = incN(),-- |
	access      = incN(),-- .ident, [...]
}
--[[
	The concatenation (..) and exponentiation (^) operators are right associative.
	All other binary operators are left associative.

	a+i < b/2+1       <-->  (a+i) < ((b/2)+1)
	5+x^2*8           <-->  5+((x^2)*8)
	a < y and y <= z  <-->  (a < y) and (y <= z)
	-x^2              <-->  -(x^2)
	x^y^z             <-->  x^(y^z)
]]

_G.BUILTIN_TYPE_KEYWORDS = {"float","int","string","table","bool","Type","any","none"}



_G.F       = string.format
_G.getByte = string.byte

-- byte = BYTE(char)
-- @@BYTE "char"
function _G.BYTE(c)
	if #c == 1 then
		return c:byte()
	end
	c = loadstring("return "..c)()
	return F("%d", c:byte())
end



-- Defined in build.lua:
-- function _G.preprocessorOutputAtTopOfFile(lua) end
-- function _G.preprocessorOutputAtDuringPost(label, lua) end



do
	_G.STRUCT_FIELD_IGNORE = {} -- Fields with a value of this are ignored.
	_G.structs             = {}

	-- !struct       "_Name[:Parent]" { {[1]=field1, [2]=fieldValue, option1=optionValue, ...}, ... }
	-- local !struct "Name[:Parent]"  { {[1]=field1, [2]=fieldValue, option1=optionValue, ...}, ... }
	-- _G.!struct    "Name[:Parent]"  { {[1]=field1, [2]=fieldValue, option1=optionValue, ...}, ... }
	function _G.struct(nameAndMaybeParent) return function(fields)
		local name, nameParent = nameAndMaybeParent:match"^([%w_]+):([%w_]+)()$"
		name                   = name or nameAndMaybeParent

		if structs[name] then
			error(F("Duplicate struct '%s'.", name), 2)
		end

		for i, field in ipairsr(fields) do
			if field[2] == STRUCT_FIELD_IGNORE then
				table.remove(fields, i)
			end
		end

		local overrides   = fields._overrides
		fields._overrides = nil

		if nameParent then
			local fieldsParent = structs[nameParent] or error(F("No struct '%s'.", nameParent), 2)

			for i, fieldParent in ipairs(fieldsParent) do
				local k = fieldParent[1]
				if itemWith1(fields, 1, k) then
					error(F("Existing field in parent: %s.%s", nameParent, k), 2)
				end
				table.insert(fields, i, fieldParent)
			end

			if overrides then
				for _, field in ipairs(overrides) do
					assert(type(field) == "table")
					assert((field[2] ~= nil), k)

					local k           = field[1]
					local fieldParent = itemWith1(fieldsParent, 1, k)

					if not fieldParent then
						error(F("Non-existing field in parent: %s.%s", nameParent, k), 2)
					end

					assert((type(fieldParent[2]) == type(field[2])), k)

					local i = indexOf(fields, fieldParent) or assert(false)
					fields[i] = field
				end
			end

		elseif overrides then
			error(F("No parent whose fields to override."), 2)
		end

		structs[name] = fields
		-- table.insert(structs, fields)

		if not name:find"^_" then
			local fieldsToOutput = {}

			for _, field in ipairs(fields) do
				assert(type(field) == "table")

				local k           = field[1]
				fieldsToOutput[k] = field[2] -- May be nil.
			end

			__LUA(name,"=function()")
				__LUA("return")__VAL(fieldsToOutput)
			__LUA("end")
		end
	end end

	-- local t = !new "Name" { field1, valueCode1, ... }
	function _G.new(name) return function(kvPairs)
		local fields      = structs[name] or error(F("No struct '%s'.", name))
		local writtenKeys = {}
		local first       = true

		__LUA("{")

		for i = 1, #kvPairs, 2 do
			assert(not writtenKeys[kvPairs[i]])
			writtenKeys[kvPairs[i]] = true

			if kvPairs[i+1] ~= "nil" then
				if not first then  __LUA(",")  end
				first = false

				__LUA(kvPairs[i], "=", kvPairs[i+1])
			end
		end

		for _, field in ipairs(fields) do
			if field[2] ~= nil and not writtenKeys[field[1]] then
				if not first then  __LUA(",")  end
				first = false

				__LUA(field[1], "=")
				__VAL(field[2])
			end
		end

		__LUA("}")
	end end
end



function _G.ifDEBUG(lua)
	if DEBUG then  __LUA(lua)  end
end

function _G.ifNotDEBUG(lua)
	if not DEBUG then  __LUA(lua)  end
end

-- Output an assert only in DEBUG mode.
-- ASSERT( valueCode [, messageCode, errorNodeCode ] )
function _G.ASSERT(valueCode, messageCode, errorNodeCode)
	if not DEBUG then  return  end

	__LUA("if not (", valueCode, ") then errorInternal(")

	if errorNodeCode then
		__LUA("state, ", errorNodeCode)
		if messageCode then  __LUA(", '%s', ", messageCode)  end
	else
		if messageCode then  __LUA("'%s', ", messageCode)  end
	end

	__LUA(") end")
end

-- TRACE( [ level=1 ] )
function _G.TRACE(level)
	if not DEBUG then  return  end
	__LUA"if not debugPrintedTraceback then "
		__LUA"_G.debugPrintedTraceback = true "
		__LUA"printerr() "
		__LUA"printTraceback(io.stderr, "__VAL(level or 1)__LUA") "
	__LUA"end\n"
end

function _G.debugger()
	if DEBUGGER then
		local lua = @insert "debugger.luapart"
		lua = "--[[ Debugger: ]]"..lua:gsub("%-%-%[%[.-%]%]", ""):gsub("%-%-[^\n]+", ""):gsub("[\n\t]+", " "):gsub("   +", "  ")
		__LUA(lua)
	end
end



function _G.trimTemplate(lua)
	return (lua:gsub("%s+", " "):gsub("^ ", ""):gsub(" $", ""))
end

-- templateToLua( template, values [, indentFirstLine=0, indentRest=0 ] )
function _G.templateToLua(template, values, indentFirst, indentRest)
	local lua = template:gsub("$(%a[%w_]*)", values)
	lua       = lua:gsub("^%s*\n", ""):gsub("[^%S\n]+$", "")

	if not indentFirst then
		-- void
	elseif indentFirst < 0 then
		lua = lua:sub(1-indentFirst)
	elseif indentRest > 0 then
		lua = ("\t"):rep(indentFirst)..lua
	end

	if not indentRest then
		-- void
	elseif indentRest < 0 then
		lua = lua:gsub("()([^\n]+)", function(ptr, line)
			if ptr > 1 then  return line:sub(1-indentRest)  end
		end)
	elseif indentRest > 0 then
		local indentStr = ("\t"):rep(indentRest)
		lua = lua:gsub("()([^\n]+)", function(ptr, line)
			if ptr > 1 then  return indentStr..line  end
		end)
	end

	return lua
end



function _G.outputCommaSeparatedValues(...)
	for i = 1, select("#", ...) do
		if i > 1 then  __LUA(",")  end
		__VAL((select(i, ...)))
	end
end



-- Convert an array of values to a set (where the table keys are the values and the table values are 'true').
function _G.Set(values)
	local set = {}
	for _, v in ipairs(values) do
		set[v] = true
	end
	return set
end



function _G.indexOf(t, v)
	for i = 1, #t do
		if t[i] == v then  return i  end
	end
	return nil
end

function _G.itemWith1(t, k, v)
	for i = 1, #t do
		if t[i][k] == v then  return t[i], i  end
	end
	return nil, nil
end



local constCount          = 0
local constNames          = {}
local constSets           = {}
local constSetValueArrays = {}

-- constName = CONST( table )
-- constName = CONST "constName" ( table )
function _G.CONST(t, constName)
	if type(t) == "string" then
		constName = t
		return function(t)  return CONST(t, constName)  end
	end

	if constName then
		assert(not constNames[constName], constName)

	else
		constName = constNames[t] -- @Incomplete: We should look through all existing constants to see if any are effectively the same. (Very low prio.)
		if constName then  return constName  end

		constCount = constCount + 1
		constName  = "CONST" .. constCount
	end

	constNames[t]         = constName
	constNames[constName] = true

	preprocessorOutputAtTopOfFile("local "..constName.." = "..toLua(t))
	return constName
end

function _G.CONST_SET(values)
	local set = constSets[values]

	if not set then
		local itemType = type(values[1])
		if itemType == "number" or itemType == "string" then
			table.sort(values)
		end

		for _, valuesExisting in ipairs(constSetValueArrays) do
			local matching = true

			for i = 1, math.max(#values, #valuesExisting) do
				if values[i] ~= valuesExisting[i] then
					matching = false
					break
				end
			end

			if matching then
				set = constSets[valuesExisting] or error()
				break
			end
		end

		if not set then
			set = Set(values)
			table.insert(constSetValueArrays, values)
		end

		constSets[values] = set
	end

	return CONST(set)
end



-- for index, item in ipairsr( array ) do
do
	local function iprev(t, i)
		i = i-1
		local v = t[i]
		if v ~= nil then  return i, v  end
	end
	function _G.ipairsr(t)
		return iprev, t, #t+1
	end
end



local staticCount   = 0
local staticNameSet = {}

local function defineStaticTable(t, staticName)
	if type(t) == "string" then
		staticName = t
		return function(t)  return defineStaticTable(t, staticName)  end
	end

	if staticName then
		assert(not staticNameSet[staticName], staticName)
	else
		staticCount = staticCount + 1
		staticName  = "STATIC" .. staticCount
	end

	staticNameSet[staticName] = true

	preprocessorOutputAtTopOfFile("local "..staticName.." = "..toLua(t))
	return staticName
end

-- Static declaration:
--   !STATIC `name = value`
-- Static table:
--   staticName = STATIC( table )
--   staticName = STATIC "staticName" ( table )
function _G.STATIC(assignmentCodeOrTableOrStaticName)
	if type(assignmentCodeOrTableOrStaticName) == "string" and not assignmentCodeOrTableOrStaticName:find"^[%a_][%w_]*$" then
		local assignmentCode = assignmentCodeOrTableOrStaticName
		preprocessorOutputAtTopOfFile("local "..assignmentCode)
	else
		local tOrStaticName = assignmentCodeOrTableOrStaticName
		return defineStaticTable(tOrStaticName)
	end
end



function _G.UNINDENT(s)
	local tabs = s:match"^\t*()" - 1
	local pat  = "%f[^%z\n]" .. ("\t?"):rep(tabs)
	return (s:gsub(pat, ""))
end
)



_G.COMPILER_PATH = (debug.getinfo(1, "S").source:match"^@(.+)" or error("Could not get compiler path.")) :gsub("\\", "/")

_G.COMPILER_DIRECTORY = !!(
	GLOA_DIR ~= ""
	and toLua(GLOA_DIR)
	or  `((debug.getinfo(1, "S").source:match"^@(.+)" or error("Could not get compiler path.")) :gsub("\\", "/"):gsub("/?[^/]+$", ""):gsub("^$", "."))`
)

_G.EMPTY_TABLE         = {}
_G.NOOP                = function()end

_G.OPERATOR_PRECEDENCE = !(OPERATOR_PRECEDENCE)

_G.TOKEN_TITLES        = !(TOKEN_TITLES)
_G.LITERAL_TITLES      = !(LITERAL_TITLES)
_G.FOR_TITLES          = !(FOR_TITLES)
_G.PIPE_TITLES         = !(PIPE_TITLES)
_G.DEPEND_TITLES       = !(DEPEND_TITLES)
_G.TYPE_KIND_TITLES    = !(TYPE_KIND_TITLES)
_G.CONST_KIND_TITLES   = !(CONST_KIND_TITLES)
_G.STRUCT_KIND_TITLES  = !(STRUCT_KIND_TITLES)
_G.DECL_KIND_TITLES    = !(DECL_KIND_TITLES)
_G.IDENT_KIND_TITLES   = !(IDENT_KIND_TITLES)
_G.TYPE_NAMES          = !(TYPE_NAMES)
_G.AST_NAMES           = !(AST_NAMES)


