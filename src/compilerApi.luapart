--[[============================================================
--=
--=  Compiler API
--=
--=  Everything here is reflected in modules/compiler.gloa
--=
--=-------------------------------------------------------------
--=
--=  Glóa - a language that compiles into Lua
--=  by Marcus 'ReFreezed' Thunström
--=
--==============================================================

	compile
	getBuildOptions, setBuildOptions
	getCompilerArguments
	getProjectDirectory

--============================================================]]

local function getCurrentCompilationState()
	return getfenv(3)._STATE or errorInternal()
end

_G.compilerApi = {}



function compilerApi.compile(path)
	local state = getCurrentCompilationState()
	path        = isPathAbsolute(path) and path or state.projectDirectory.."/"..path

	compileProgram(path)
end



function compilerApi.getBuildOptions()
	local state = getCurrentCompilationState()

	local options = {
		-- See BuildOptions in modules/compiler.gloa
		outputType     = state.settings.outputType,
		outputFilePath = state.settings.outputFilePath,
		entryPointName = state.settings.entryPointName,
	}

	return options
end

function compilerApi.setBuildOptions(options)
	if options.outputType ~= !(OUTPUT_TYPE_NONE) and options.outputFilePath == "" then
		error("options.outputFilePath is empty.", 2)
	elseif options.outputType == !(OUTPUT_TYPE_LUA_APP) and options.entryPointName == "" then
		error("options.entryPointName is empty.", 2)
	end

	local state = getCurrentCompilationState()

	state.settings.outputType     = options.outputType
	state.settings.outputFilePath = options.outputFilePath
	state.settings.entryPointName = options.entryPointName
end



function compilerApi.getProjectDirectory()
	return getCurrentCompilationState().projectDirectory
end



function compilerApi.getCompilerArguments()
	return {unpack(compilerArguments)}
end


