--[[============================================================
--=
--=  Parser
--=
--=-------------------------------------------------------------
--=
--=  Glóa - a language that compiles into Lua
--=  by Marcus 'ReFreezed' Thunström
--=
--==============================================================

	astCopy
	astFindParent*, astFindParentScope, astFindCommonParent, astHasParent, astFindInTree
	astGetDepth
	astGetExpressionVisuallyFurthestToThe*, astGetCalleeVisuallyFurthestToTheLeft
	astGetOriginal, astGetReplacement
	astIsOrIsInModule
	astMoveRelevantThingsFromFileScopeToGlobalScope
	astNewNode
	astPrint, astPrintTree
	astVisitAllNodes, astVisitAllNodesLeavesFirst
	eatNextToken, peekNextToken, peekLastToken, putBackLastToken, eatTrailingSemicolon
	errorParsing*, parserMessage*
	errorUnhandledNodeType, errorUnhandledType
	isNodeAt
	newLiteral, newIdentifier
	nodeError, nodeErrorAfter, nodeMessage, where
	parse*

--============================================================]]

!(
local PRINT_NODE_BRACKETS = false

local function errorOrReturn(errCode, returnValueCode)
	__LUA("if state.soft then return ",returnValueCode," end ")
	__LUA(errCode)
end
local function ERROR_OR_RETURN      (errCode)              errorOrReturn(errCode, "nil")       end
local function ERROR_OR_RETURN_FALSE(errCode)              errorOrReturn(errCode, "false")     end
local function ERROR_OR_RETURN_VALUE(errCode, returnCode)  errorOrReturn(errCode, returnCode)  end

local function setOrReturn(assignmentCode, returnValueCode)
	local preCode, sufCode = assignmentCode:match"^([^=]+)=(.*)$"
	if not preCode then  error(assignmentCode)  end

	-- local x = ...
	if preCode:find"^%s*local%s" then
		local var = preCode:match"^%s*local%s+([%w_]+)" or error(preCode)
		__LUA(assignmentCode)
		__LUA(" if not ",var," then return ",returnValueCode," end ")

	-- x = ...
	elseif preCode:find"^%s*[%w_]+%s*$" then
		local var = preCode:match"[%w_]+" or error(preCode)
		__LUA(assignmentCode)
		__LUA(" if not ",var," then return ",returnValueCode," end ")

	-- x.y = ...
	else
		__LUA("local __value__ =",sufCode)
		__LUA(" if not __value__ then return ",returnValueCode," end ")
		__LUA(preCode,"= __value__")
	end
end
local function SET_OR_RETURN      (assignmentCode)  setOrReturn(assignmentCode, "nil"  )  end
local function SET_OR_RETURN_FALSE(assignmentCode)  setOrReturn(assignmentCode, "false")  end

local function doOrReturn(exprCode, returnValueCode)
	__LUA("if not (",exprCode,") then return ",returnValueCode," end")
end
local function DO_OR_RETURN      (exprCode)  doOrReturn(exprCode, "nil"  )  end
local function DO_OR_RETURN_FALSE(exprCode)  doOrReturn(exprCode, "false")  end
)



!(
local astTypeToStructName    = {}
_G.astStructNameToType       = {}
_G.scopeNodeTypes            = {}
_G.scopeNodeTypesDeclarative = {}
_G.scopeNodeTypesImperative  = {}

local function structAst(nameAndParent) return function(fields)
	local name        = nameAndParent:match"^[%w_]+"
	local scopeType   = fields._scopeType
	fields._scopeType = nil

	if not name:find"^_" then
		local nodeTypeField           = itemWith1(fields._overrides, 1, `nodeType`) or error(name)
		local nodeType                = nodeTypeField[2] or error(name)
		astTypeToStructName[nodeType] = name
		astStructNameToType[name]     = nodeType

		if scopeType then
			local scopesOfType
				=  scopeType == "declarative" and scopeNodeTypesDeclarative
				or scopeType == "imperative"  and scopeNodeTypesImperative
				or error(scopeType)

			table.insert(scopeNodeTypes, nodeType)
			table.insert(scopesOfType,   nodeType)
		end
	end

	struct(nameAndParent)(fields)
end end
)

!struct"_AstNode"{
	{`nodeType`,   0},
	{`s`,          0},   -- Serial number.
	{`parent`,     nil}, -- AstNode
	{`token`,      1},
	{`replacedBy`, nil}, -- AstNode
	{`replacing`,  nil}, -- AstNode
	-- Pipe phases:
	{`queued`,     nil}, -- Queued
}

!structAst"_AstExpression:_AstNode"{
	-- Type phase:
	{`inferredType`, nil}, -- TypeInfo
}
_G.!structAst"AstIdentifier:_AstExpression"{
	_overrides = {{`nodeType`,AST_IDENTIFIER}},
	{`name`,        ""},
	-- Type phase:
	{`declaration`, nil, astRef="node"}, -- AstDeclaration
	{`fromUsing`,   nil, astRef="node"}, -- AstUsing
}
_G.!structAst"AstVararg:AstIdentifier"{
	_overrides = {{`nodeType`,AST_VARARG}, {`name`,"..."}},
	{`surroundedByParentheses`, false},
}
_G.!structAst"AstBlank:AstIdentifier"{
	_overrides = {{`nodeType`,AST_BLANK}, {`name`,"_"}},
}
_G.!structAst"AstLiteral:_AstExpression"{
	_overrides = {{`nodeType`,AST_LITERAL}},
	{`literalType`,   0},
	{`value`,         nil}, -- The value depends on what literalType is. Could be a number, string or whatever.
	-- Emit phase:
	{`valueConstant`, nil}, -- Constant
}
_G.!structAst"AstType:_AstExpression"{
	_overrides = {{`nodeType`,AST_TYPE}},
	{`functionHeader`,  nil, ast="node"},    -- AstLambda without a body. This is used to create the actual function type.
	{`arrayItemType`,   nil, ast="node"},    -- AstType
	{`arguments`,       nil, ast="array"},   -- []AstExpression  (Is set for parameterized structs.)
	{`components`,      {},  ast="array"},   -- []AstExpression  (Used if kind is TYPE_KIND_COMPOUND.)
	{`kind`,            TYPE_KIND_UNSET},    -- TYPE_KIND_SIMPLE_BUILTIN|TYPE_KIND_SIMPLE_USER|TYPE_KIND_FUNCTION|TYPE_KIND_ARRAY|TYPE_KIND_POLY_STRUCT|TYPE_KIND_COMPOUND
	{`typeName`,        ""},
	-- Type phase:
	{`representedType`, nil},                -- TypeInfo
	{`declaration`,     nil, astRef="node"}, -- AstDeclaration
}
_G.!structAst"AstUnary:_AstExpression"{
	_overrides = {{`nodeType`,AST_UNARY}},
	{`expression`, nil, ast="node"}, -- AstExpression
	{`operation`,  ""},              -- "-" or "not" etc.
}
_G.!structAst"AstBinary:_AstExpression"{
	_overrides = {{`nodeType`,AST_BINARY}},
	{`left`,      nil, ast="node"}, -- AstExpression
	{`right`,     nil, ast="node"}, -- AstExpression
	{`operation`, ""},  -- "+" or "-" etc.
}
_G.!structAst"AstAccess:_AstExpression"{
	_overrides = {{`nodeType`,AST_ACCESS}},
	{`object`,          nil, ast="node"}, -- AstExpression
	{`member`,          nil, ast="node"}, -- AstExpression
	-- Type phase:
	{`representedType`, nil}, -- TypeInfo  (Not used anywhere. 2020-01-02)
}
_G.!struct"TableField"{
	{`key`,            nil}, -- AstExpression
	{`value`,          nil}, -- AstExpression
	{`keyIsGenerated`, false},
	-- Type phase:
	{`argumentIndex`,  0},   -- Used for AstCall.argumentsNamed.
}
_G.!structAst"AstTable:_AstExpression"{
	_overrides = {{`nodeType`,AST_TABLE}},
	{`fields`,                {},  ast="fields"}, -- []TableField
	{`trailingExpression`,    nil, ast="node"},   -- AstVararg|AstCall  This expression potentially expands to multiple values in any resulting Lua table.
	{`highestGeneratedIndex`, 0},
}
_G.!structAst"AstCall:_AstExpression"{
	_overrides = {{`nodeType`,AST_CALL}},
	{`callee`,                  nil, ast="node"},   -- AstExpression
	{`arguments`,               {},  ast="array"},  -- []AstExpression
	{`argumentsNamed`,          {},  ast="fields"}, -- []TableField  @Cleanup: Rename TableField struct to something more fitting.
	{`isMethod`,                false},
	{`surroundedByParentheses`, false},
	-- Type phase:
	{`wantLocation`,            false}, -- Set if the called function has wantCallerLocation set (i.e. !caller_location is used somewhere).
	-- Emit phase:
	{`locationConstant`,        nil},   -- Constant  Optimization: Instead of generating this for every call we only do it if the callee may require it.
}
_G.!structAst"AstTypeOf:_AstExpression"{
	_overrides = {{`nodeType`,AST_TYPE_OF}},
	{`expression`,      nil, ast="node"}, -- AstExpression
	-- Type phase:
	{`representedType`, nil}, -- TypeInfo
}
_G.!structAst"AstVariantOf:_AstExpression"{
	_overrides = {{`nodeType`,AST_VARIANT_OF}},
	{`call`, nil, ast="node"}, -- AstCall  This may end up being AstType which is a type error.
}
_G.!structAst"AstTypeInfo:_AstExpression"{
	_overrides = {{`nodeType`,AST_TYPE_INFO}},
	{`expression`,    nil, ast="node"}, -- AstExpression
	-- Type phase:
	{`valueTypeInfo`, nil}, -- TypeInfo
	-- Emit phase:
	{`valueConstant`, nil}, -- Constant
}
_G.!structAst"AstLocation:_AstExpression"{
	_overrides = {{`nodeType`,AST_LOCATION}},
	{`expression`,    nil, ast="node"}, -- AstExpression  If this is empty then the target is the location node itself.
	{`ofCaller`,      false},           -- Used as default values for function arguments.
	-- Type phase:
	{`target`,        nil}, -- AstNode
	-- Emit phase:
	{`valueConstant`, nil}, -- Constant
}
_G.!structAst"AstCast:_AstExpression"{
	_overrides = {{`nodeType`,AST_CAST}},
	{`targetType`, nil, ast="node"}, -- AstType
	{`expression`, nil, ast="node"}, -- AstExpression
	{`isImplicit`, false},           -- Implicit casts include e.g. 'if "foo" {...}'
}
_G.!structAst"AstImport:_AstExpression"{
	_overrides = {{`nodeType`,AST_IMPORT}},
	{`isLoad`,     false},
	{`importName`, ""},
	{`exported`,   false},
	-- Type phase:
	{`fileScope`,  nil, astRef="node"}, -- AstFileScope
}
_G.!structAst"AstForeign:_AstExpression"{
	_overrides = {{`nodeType`,AST_FOREIGN}},
	{`source`,        ""},           -- "compiler"|"lua"|"method"
	{`sourceName`,    nil, ast=nil}, -- AstLiteral (string)  Never inferred. The name may be inferred from a declaration.
	-- Type phase:
	{`sourceId`,      ""}, -- Is source and sourceName combined.
	-- Emit phase:
	{`valueConstant`, nil}, -- Constant
}
_G.!structAst"AstConditional:_AstExpression"{
	_overrides = {{`nodeType`,AST_CONDITIONAL}},
	{`condition`,              nil, ast="node"},    -- AstExpression
	{`branchTrue`,             nil, ast="node"},    -- AstExpression  (If this is nil then condition (or rather conditionAndBranchTrue) is used for this branch.)
	{`branchFalse`,            nil, ast="node"},    -- AstExpression
	{`conditionAndBranchTrue`, nil, astRef="node"}, -- AstExpression
}
_G.!structAst"AstBake:_AstExpression"{
	_overrides = {{`nodeType`,AST_BAKE}},
	{`name`, nil, ast="node"}, -- AstIdentifier
}
_G.!structAst"AstRun:_AstExpression"{
	_overrides = {{`nodeType`,AST_RUN}},
	{`lambda`, nil, ast="node"}, -- AstLambda
}
_G.!structAst"AstNull:_AstExpression"{
	_overrides = {{`nodeType`,AST_NULL}},
}

_G.!structAst"AstUsing:_AstNode"{
	_overrides = {{`nodeType`,AST_USING}},
	{`expression`,          nil, ast="node"},    -- AstExpression
	-- Type phase:
	{`scope`,               nil, astRef="node"}, -- AstScope
	{`variableDeclaration`, nil, astRef="node"}, -- AstDeclaration
}

_G.!structAst"AstDebug:_AstNode"{
	_overrides = {{`nodeType`,AST_DEBUG}},
	{`expression`, nil, ast="node"}, -- AstExpression
	{`action`,     ""},              -- "assert"|"print"
}

_G.!structAst"AstArgument:_AstNode"{
	_overrides = {{`nodeType`,AST_ARGUMENT}},
	{`declaration`,     nil, ast="node"}, -- AstDeclaration
	{`assignment`,      nil, ast="node"}, -- AstAssignment
	{`group`,           1}, -- Arguments in the same group have the same type. This is a small optimization for the typer.
	{`autobake`,        AUTOBAKE_DISABLED},
	{`hasPlaceholders`, false},
	{`isUsing`,         false}, -- Is it better to store this on declarations?

	-- For an input argument, this indicates optionality.
	-- For an output argument, if there's a !must then it must not be adjusted away by the caller.
	{`isRequired`,      false},
}
_G.!structAst"AstArguments:_AstNode"{
	_overrides = {{`nodeType`,AST_ARGUMENTS}},
	{`arguments`, {}, ast="array"}, -- []AstArgument
}

_G.!structAst"AstDeclaration:_AstNode"{
	_overrides = {{`nodeType`,AST_DECLARATION}},
	{`type`,                 nil, ast="node"},  -- AstType  If this is nil then the type is inferred from the value.
	{`value`,                nil, ast="node"},  -- AstExpression  Either this or assignment should be set, or neither for getting the default value for the type.
	{`name`,                 nil, ast="node"},  -- AstIdentifier|AstVararg|AstBlank
	{`notes`,                {},  ast="array"}, -- []AstExpression

	{`kind`,                 DECL_KIND_LOCAL_VAR}, -- DECL_KIND_LOCAL_VAR|DECL_KIND_LOCAL_CONST|DECL_KIND_EXPORT_VAR|DECL_KIND_EXPORT_CONST|DECL_KIND_STATIC  @Incomplete: DECL_KIND_READ_ONLY  Note: Globals are exports.
	{`canShadow`,            false},
	{`addedByPolymorph`,     false},

	{`assignment`,           nil, astRef="node"}, -- AstAssignment
	{`assignmentIndex`,      1},

	-- Type phase:
	{`valueTypeInfo`,        nil}, -- TypeInfo  Type represented by the assigned value if the declaration is constant. If this is set then the declared identifier can be used in places where a type is expected. Can be nil.
	{`checkedRedeclaration`, false},
	{`overloads`,            {}},
	{`overloadOf`,           nil, astRef="node"}, -- AstDeclaration  (If this is self then we're the base declaration for the overloads and the overloads array should be filled.)
	{`overloadsLocked`,      false},

	-- Emit phase:
	{`valueConstant`,        nil}, -- Constant
	{`topScopeName`,         ""},
	{`localName`,            ""},
}

_G.!structAst"AstAssignment:_AstNode"{
	_overrides = {{`nodeType`,AST_ASSIGNMENT}},
	{`targets`,         {},  ast="array"},    -- []AstExpression
	{`values`,          {},  ast="array"},    -- []AstExpression

	{`forDeclaration`,  false},
	{`declarations`,    nil, astRef="array"}, -- []AstDeclaration  (Is set if forDeclaration is set.)

	{`binaryOperation`, ""}, -- Empty means plain assignment.
}

!structAst"_AstJump:_AstNode"{}
_G.!structAst"AstReturn:_AstJump"{
	_overrides = {{`nodeType`,AST_RETURN}},
	{`values`,       {},  ast="array"},   -- []AstExpression
	{`runDirective`, nil, astRef="node"}, -- AstRun
}
_G.!structAst"AstBreak:_AstJump"{
	_overrides = {{`nodeType`,AST_BREAK}},
	{`loopName`, nil, ast=nil      }, -- AstIdentifier  Never inferred. Just for debugging.
	{`loop`,     nil, astRef="node"}, -- AstFor|AstWhile
}
_G.!structAst"AstContinue:_AstJump"{
	_overrides = {{`nodeType`,AST_CONTINUE}},
	{`loopName`, nil, ast=nil      }, -- AstIdentifier  Never inferred. Just for debugging.
	{`loop`,     nil, astRef="node"}, -- AstFor|AstWhile
}

_G.!structAst"AstDefer:_AstNode"{
	_overrides = {{`nodeType`,AST_DEFER}},
	{`body`, nil, ast="node"}, -- AstBlock
}

!structAst"_AstScope:_AstNode"{
	{`statementsStatic`,   {}, ast="array"},    -- []AstNode
	{`statementsDynamic`,  {}, ast="array"},    -- []AstNode
	{`declarations`,       {}, astRef="array"}, -- []AstDeclaration  (Note that inner blocks have their own declarations.)
	{`imports`,            {}, astRef="array"}, -- []AstImport
	{`usings`,             {}, astRef="array"}, -- []AstUsing
	-- Type phase:
	{`declarationsInTree`, {}, doNotCopy=true}, -- Includes all child scopes. Does not include shadows.
}
_G.!structAst"AstBlock:_AstScope"{
	_overrides = {{`nodeType`,AST_BLOCK}},
	_scopeType = "imperative",
}
_G.!structAst"AstFileScope:_AstScope"{
	_overrides = {{`nodeType`,AST_FILE_SCOPE}},
	_scopeType = "declarative",
	{`valueToExport`, nil, ast="node"}, -- Used when outputting a Lua module.
	{`path`,          ""},
	{`isModule`,      false},
	{`moduleName`,    ""},
}
_G.!structAst"AstGlobalScope:_AstScope"{
	_overrides = {{`nodeType`,AST_GLOBAL_SCOPE}},
	_scopeType = "declarative",
	{`fileScopes`,                 {},  astRef="array"}, -- []AstFileScope
	{`fileScopeWithValueToExport`, nil, astRef="node"},  -- See AstFileScope.valueToExport
}
_G.!structAst"AstFor:_AstScope"{
	_overrides = {{`nodeType`,AST_FOR}},
	_scopeType = "imperative",
	{`expressions`,   {},  ast="array"},   -- []AstExpression  @Cleanup: Move these into AstFor.statementsDynamic?
	{`names`,         {},  ast=nil    },   -- []AstIdentifier  These are never inferred, but instead copied to declarations. @Cleanup: Can we get rid of this in favor of the copy we currently make?
	{`forType`,       FOR_NUMERIC},        -- @Cleanup: Rename to "kind"?
	{`body`,          nil, astRef="node"}, -- AstBlock
	{`reverse`,       false},
	{`hasNamedJumps`, false},
}
!structAst"_AstScopeExpression:_AstScope"{
	-- Type phase:
	{`inferredType`,    nil}, -- TypeInfo
	{`representedType`, nil}, -- TypeInfoStruct|TypeInfoEnum  (Used for AstEnum and AstStruct. Is nil otherwise.)
}
_G.!structAst"AstStruct:_AstScopeExpression"{
	_overrides = {{`nodeType`,AST_STRUCT}},
	_scopeType = "declarative",

	{`inherits`,              {},  astRef="array"}, -- []AstExpression

	{`keyType`,               nil, ast="node"},     -- AstExpression
	{`valueType`,             nil, ast="node"},     -- AstExpression

	{`isPolymorphic`,         false},
	{`polymorphs`,            {},  astRef="array"}, -- []AstDeclaration
	{`polymorphSourceStruct`, nil, astRef="node"},  -- AstStruct
	{`bakeDeclarations`,      {},  astRef="array"}, -- []AstDeclaration

	{`isForeign`,             false},               -- Foreign structs cannot be instantiated.
	{`foreignThroughNode`,    nil, astRef="node"},  -- AstNode
}
_G.!structAst"AstEnum:_AstScopeExpression"{
	_overrides = {{`nodeType`,AST_ENUM}},
	_scopeType = "declarative",
	{`memberType`, nil, ast="node"}, -- AstType
	{`autoValue`,  0},
}
_G.!structAst"AstLambda:_AstScopeExpression"{
	_overrides = {{`nodeType`,AST_LAMBDA}},
	_scopeType = "imperative",

	{`captures`,          {},  ast="array"},    -- []AstIdentifier
	{`argumentsIn`,       nil, astRef="node"},  -- AstArguments
	{`argumentsOut`,      nil, astRef="node"},  -- AstArguments
	{`takingVararg`,      false},

	{`body`,              nil, astRef="node"},  -- AstBlock  (If this is nil then the lambda is a function signature. If bodyIsForeign is set then this is a dummy block.)
	{`bodyIsForeign`,     false},               -- @Cleanup: Use AstForeign instead of all this stuff.
	{`foreignSource`,     ""},
	{`foreignSourceName`, nil, ast=nil},        -- AstLiteral (string)  Never inferred. The name may be inferred from a declaration.

	{`bodyEndToken`,      1},                   -- For better error messages.

	{`isPolymorphic`,     false},
	{`polymorphs`,        {},  astRef="array"}, -- []AstDeclaration
	{`bakeDeclarations`,  {},  astRef="array"}, -- []AstDeclaration
	{`bakeValues`,        {},  astRef="array"}, -- []AstExpression

	{`bodyTextLambda`,    nil, astRef="node"},  -- AstLambda

	{`metaOnly`,          false},               -- If this is set then this won't get written to the final output - only to the metaprogram.
	{`wantCallerLocation`,false},

	-- Type phase:
	{`foreignSourceId`,   ""}, -- Is foreignSource and foreignSourceName combined.

	-- Emit phase:
	{`valueConstant`,     nil}, -- Constant
}
_G.!structAst"AstNamespace:_AstScopeExpression"{
	_overrides = {{`nodeType`,AST_NAMESPACE}},
	_scopeType="declarative",
}

_G.!structAst"AstIf:_AstNode"{
	_overrides = {{`nodeType`,AST_IF}},
	{`condition`,   nil, ast="node"}, -- AstExpression
	{`branchTrue`,  nil, ast="node"}, -- AstBlock
	{`branchFalse`, nil, ast="node"}, -- AstBlock  May be nil.
}
_G.!structAst"AstStaticIf:AstIf"{
	_overrides = {{`nodeType`,AST_STATIC_IF}},
}
_G.!structAst"AstWhile:_AstNode"{
	_overrides = {{`nodeType`,AST_WHILE}},
	{`condition`,     nil, ast="node"}, -- AstExpression
	{`body`,          nil, ast="node"}, -- AstBlock
	{`hasNamedJumps`, false},
}
_G.!struct"SwitchCase"{
	{`value`,       nil}, -- AstExpression
	{`body`,        nil}, -- AstBlock
	{`fallThrough`, false},
}
_G.!structAst"AstSwitch:_AstNode"{
	_overrides = {{`nodeType`,AST_SWITCH}},
	{`value`,    nil, ast="node"},  -- AstExpression
	{`cases`,    {},  ast="cases"}, -- []SwitchCase
	{`complete`, false},
}

_G.SCOPES                = !(scopeNodeTypes)
_G.SCOPES_DECLARATIVE    = !(scopeNodeTypesDeclarative)
_G.SCOPES_IMPERATIVE     = !(scopeNodeTypesImperative)
_G.SCOPE_SET             = !(Set(scopeNodeTypes))
_G.SCOPE_SET_DECLARATIVE = !(Set(scopeNodeTypesDeclarative))
_G.SCOPE_SET_IMPERATIVE  = !(Set(scopeNodeTypesImperative))



local TOKEN_TYPE_TO_LITERAL_TYPE = !({
	[TOKEN_FLOAT]   = LITERAL_FLOAT,
	[TOKEN_INTEGER] = LITERAL_INTEGER,
	[TOKEN_STRING]  = LITERAL_STRING,
})



-- node:AstNodeType = astNewNode( AstNodeType, token [, parent ] )
do
	local serialN = 0

	function _G.astNewNode(AstNodeType, token, parent)
		if not AstNodeType then  errorInternal(2, "No AstNodeType specified.")  end
		!ifDEBUG`assert(token)`

		if not parent and AstNodeType ~= AstGlobalScope then
			errorInternal(2, "No parent.")
		end

		serialN = serialN+1

		local node  = AstNodeType()
		node.s      = serialN
		node.parent = parent
		node.token  = token

		--[[
		if
			false
			-- or serialN == 22
			or parent and parent.s == 21
		then
			errorInternal("DEBUG")
		end
		--]]

		return node
	end
end



function _G.parseIdentifier(state, parent)
	local tokType, tokValue, token = eatNextToken(state)
	if tokType ~= !(TOKEN_IDENTIFIER) then
		!ERROR_OR_RETURN `errorParsingLast(state, "Expected an identifier.")`
	end

	local ident = astNewNode(AstIdentifier, token, parent)
	ident.name  = tokValue

	return ident
end

function _G.parseUsing(state, parent)
	local tokType, tokValue, token = eatNextToken(state)
	if not isToken(tokType,tokValue, !(TOKEN_KEYWORD),"using") then
		!ERROR_OR_RETURN `errorParsingLast(state, "Expected 'using'.")`
	end

	local using                      = astNewNode(AstUsing, token, parent)
	!SET_OR_RETURN `using.expression = parseExpression(state, using)`

	return using
end

function _G.parseForeign(state, parent)
	-- Note: We assume the '!foreign' has been eaten already.

	local foreign = astNewNode(AstForeign, state.nextToken-1, parent)

	local tokType, tokValue = eatNextToken(state)
	if not isToken(tokType,tokValue, !(TOKEN_IDENTIFIER)) then
		!ERROR_OR_RETURN `errorParsingLast(state, "Expected foreign source. (Valid values: lua, method, compiler)")`
	elseif not !!(CONST_SET{"lua","method","compiler"})[tokValue] then
		!ERROR_OR_RETURN `errorParsingLast(state, "Invalid source '%s'. (Valid values: lua, method, compiler)", tokValue)`
	end
	foreign.source = tokValue

	tokType, tokValue = peekNextToken(state)
	if isToken(tokType,tokValue, !(TOKEN_STRING)) then
		eatNextToken(state)
		foreign.sourceName = newLiteral(foreign, state.nextToken-1, !(LITERAL_STRING), tokValue)
	else
		-- void  (foreign.sourceName will be the name of whatever declared constant the foreign is attached to.)
		!ERROR_OR_RETURN `errorParsingAfterLast(state, "@Incomplete: Infer foreign.sourceName")` -- TEMP
	end

	return foreign
end

function _G.parseTable(state, parent)
	-- Note: We assume the '{' has been eaten already.

	local tableNode      = astNewNode(AstTable, state.nextToken-1, parent)
	local fields         = tableNode.fields
	local generatedIndex = 0

	while true do
		local tokType, tokValue, token = peekNextToken(state)

		if not tokType then
			!ERROR_OR_RETURN `errorParsing(state, tableNode.token, "Unfinished table.")`
		elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"}") then
			eatNextToken(state)
			break
		end

		local tokType2, tokValue2 = peekNextToken(state, 2)
		local tableField          = TableField()
		local tableKey

		-- [k]=v
		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"[") then
			eatNextToken(state)

			!SET_OR_RETURN `tableKey = parseExpression(state, tableNode)`

			tokType, tokValue = eatNextToken(state)
			if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"]") then
				!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ']'.")`
			end

			tokType, tokValue = eatNextToken(state)
			if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"=") then
				!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '='.")`
			end

		-- k=v
		elseif
			tokType == !(TOKEN_IDENTIFIER)
			and isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),"=")
		then
			eatNextToken(state)
			local literal       = astNewNode(AstLiteral, token, tableNode)
			literal.literalType = !(LITERAL_STRING)
			literal.value       = tokValue
			tableKey            = literal
			eatNextToken(state) -- '='

		-- v
		else
			generatedIndex      = generatedIndex+1
			local literal       = astNewNode(AstLiteral, token, tableNode) -- Note: The token position of the key and value will be the same.
			literal.literalType = !(LITERAL_INTEGER)
			literal.value       = generatedIndex
			tableKey            = literal

			tableField.keyIsGenerated = true
		end

		assert(tableKey)

		tableField.key                   = tableKey
		!SET_OR_RETURN `tableField.value = parseExpression(state, tableNode)`

		table.insert(fields, tableField)

		tokType, tokValue = eatNextToken(state)
		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"}") then
			break
		elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),",",";") then
			-- void  (Note: A trailing comma or semicolon at the end of the argument list is permitted.)
		else
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ','.")`
		end
	end

	local lastField = fields[#fields]

	if lastField and lastField.keyIsGenerated and lastField.value.nodeType == !(AST_VARARG) and not lastField.value.surroundedByParentheses then
		local vararg    = lastField.value
		vararg.parent   = tableNode
		fields[#fields] = nil
		generatedIndex  = generatedIndex-1
		tableNode.trailingExpression = vararg
	end

	tableNode.highestGeneratedIndex = generatedIndex
	return tableNode
end

-- Parse comma-separated expressions. Used for function calls, struct parameters, assignments etc.
-- success = parseExpressionList( compilationState, parent, expressions, expressionsNamed=nil, expectLvalues )
function _G.parseExpressionList(state, parent, expressions, expressionsNamed, expectLvalues)
	local takenNames = expressionsNamed and {}

	while true do
		local tokType,  tokValue  = peekNextToken(state, 1)
		local tokType2, tokValue2 = peekNextToken(state, 2)

		if expectLvalues and isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"_") then
			local expr = astNewNode(AstBlank, state.nextToken, parent)
			eatNextToken(state) -- '_'
			table.insert(expressions, expr)

		elseif expressionsNamed and tokType == !(TOKEN_IDENTIFIER) and isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),"=") then
			local exprNamed                     = TableField()
			!SET_OR_RETURN_FALSE `exprNamed.key = parseIdentifier(state, parent)`

			local name = exprNamed.key.name
			if takenNames[name] then
				!ERROR_OR_RETURN `
					printerr()
					parserMessage(io.stderr, state, state.nextToken-1,      "Error", "Duplicate name '%s'.", name)
					parserMessage(io.stderr, state, takenNames[name].token, "Info",  "...name was previously used here.")
					exitFailure()
				`
			end
			takenNames[name] = exprNamed.key

			eatNextToken(state) -- '='

			!SET_OR_RETURN_FALSE `exprNamed.value = parseExpression(state, parent, nil, expectLvalues)`
			table.insert(expressionsNamed, exprNamed)

		else
			!SET_OR_RETURN_FALSE `local expr = parseExpression(state, parent, nil, expectLvalues)`
			table.insert(expressions, expr)
		end

		tokType, tokValue = peekNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),",") then
			eatNextToken(state)
			-- Continue the loop.
		else
			break
		end
	end

	return true
end

local function concatNamesInArgumentGroupForError(argsInGroup)
	if not argsInGroup[2] then  return argsInGroup[1].declaration.name.name  end

	local names = {}

	for i, arg in ipairs(argsInGroup) do
		names[i] = arg.declaration.name.name
	end

	return table.concat(names, "', '", 1, #names-1) .. "' and '" .. names[#names]
end

function _G.parseArguments(state, parent, isInput)
	local args            = astNewNode(AstArguments, state.nextToken, parent)
	local takenNames      = {}
	local gotVararg       = false
	local gotDefaultValue = false
	local tokType, tokValue, token

	for groupN = 1, math.huge do
		-- Argument name(s).
		local argsInGroup = {}
		local isUsing     = false

		local tokType, tokValue, token = peekNextToken(state)
		local argStartToken            = token

		if isToken(tokType,tokValue, !(TOKEN_KEYWORD),"using") then
			eatNextToken(state)
			isUsing = true

			if not isInput then
				-- Maybe we should allow 'using' here, but apply it the types instead of the names in the declarations?
				!ERROR_OR_RETURN `errorParsingLast(state, "Cannot apply 'using' to output arguments.")`
			end
		end

		while true do
			local autobake = !(AUTOBAKE_DISABLED)
			tokType, tokValue, token = eatNextToken(state)

			if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"$") then
				if not isInput then
					!ERROR_OR_RETURN `errorParsing(state, token, "Only input arguments can be auto-baked.")`
				elseif isUsing then
					!ERROR_OR_RETURN `errorParsing(state, argStartToken, "Cannot using auto-baked arguments.")`
				end

				autobake          = !(AUTOBAKE_REQUIRED)
				tokType, tokValue = peekNextToken(state)

				if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"?") then
					eatNextToken(state)
					autobake = !(AUTOBAKE_ENABLED)
					!ERROR_OR_RETURN `errorParsing(state, token+1, "Optional auto-baking of arguments isn't supported yet. Omit '?' to force auto-baking.")` -- @Incomplete
				end

				tokType, tokValue = eatNextToken(state)
			end

			if not (tokType == !(TOKEN_IDENTIFIER) or isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"...")) then
				!ERROR_OR_RETURN `errorParsing(state, token, "Argument list: Expected an identifier.")`
			end

			local arg    = astNewNode(AstArgument, token, args)
			arg.group    = groupN
			arg.autobake = autobake
			arg.isUsing  = isUsing

			table.insert(args.arguments, arg)
			table.insert(argsInGroup,    arg)

			local decl      = astNewNode(AstDeclaration, token, arg)
			arg.declaration = decl

			if tokType == !(TOKEN_IDENTIFIER) then
				local ident       = astNewNode(AstIdentifier, token, decl)
				ident.name        = tokValue
				ident.declaration = decl
				decl.name         = ident

				if takenNames[ident.name] then
					!ERROR_OR_RETURN `errorParsingLast(state, "Duplicate name '%s'.", ident.name)`
				end
				takenNames[ident.name] = true

			else
				gotVararg = true

				if isUsing then
					!ERROR_OR_RETURN `errorParsing(state, argStartToken, "Cannot apply 'using' to varargs.")`
				elseif autobake ~= !(AUTOBAKE_DISABLED) then
					!ERROR_OR_RETURN `errorParsing(state, argStartToken, "Auto-baking of varargs is not supported.")`
				end

				local vararg       = astNewNode(AstVararg, token, decl)
				vararg.declaration = decl
				decl.name          = vararg
			end

			tokType, tokValue = peekNextToken(state)

			if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),":","=") then
				break
			elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),",") then
				eatNextToken(state)
				-- Continue the loop.
			else
				!ERROR_OR_RETURN `errorParsingAfterLast(state, "Expected ':'.")`
			end

			if gotVararg then
				!ERROR_OR_RETURN `errorParsingLast(state, "Vararg must be the last argument.")`
			end
		end

		-- Type(s).
		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),":") then
			eatNextToken(state)

			local hasPlaceholders = false
			token                 = state.nextToken

			for i, arg in ipairs(argsInGroup) do
				state.nextToken           = token
				local decl                = arg.declaration
				!SET_OR_RETURN `decl.type = parseExpression(state, decl)` -- @Speed: Parse once then just copy the first one.

				if i == 1 then
					astVisitAllNodes(decl.type, function(node, container, key)
						if node.nodeType == !(AST_BAKE) then
							hasPlaceholders = true
							return !(VISIT_BREAK)
						end
					end)

				elseif hasPlaceholders then
					-- Make sure (a,b:$T) works.
					astVisitAllNodes(decl.type, function(node, container, key)
						if node.nodeType ~= !(AST_BAKE) then  return  end

						if not container then
							container = decl
							key       = "type"
						end

						local bake     = node
						local ident    = bake.name

						ident.parent   = node.parent
						container[key] = ident

						return !(VISIT_IGNORE_CHILDREN)
					end)
				end

				arg.hasPlaceholders = hasPlaceholders
			end
		end

		-- Default value.
		tokType, tokValue = peekNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"=") then
			gotDefaultValue = true
			eatNextToken(state)

			if not isInput then
				!ERROR_OR_RETURN `errorParsingLast(state, "Output arguments cannot have default values.")`
			end

			token = state.nextToken

			for i, arg in ipairs(argsInGroup) do
				state.nextToken = token

				if arg.autobake ~= !(AUTOBAKE_DISABLED) then
					!ERROR_OR_RETURN `errorParsingLast(state, "Default values for auto-baked arguments are not supported yet.")`
				end

				local decl = arg.declaration

				if decl.name.nodeType == !(AST_VARARG) then
					!ERROR_OR_RETURN `errorParsingNext(state, "Varargs cannot have default values.")`
				else
					assert(decl.name.nodeType == !(AST_IDENTIFIER))
				end

				tokType, tokValue = peekNextToken(state)

				-- @Speed: Parse the value once, then just copy the first one.
				if isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"caller_location") then
					eatNextToken(state)

					if parent.nodeType ~= !(AST_LAMBDA) then
						!ERROR_OR_RETURN `errorParsingLast(state, "!caller_location can only be used among function arguments.")`
					end

					local loc    = astNewNode(AstLocation, token, decl)
					loc.ofCaller = true
					decl.value   = loc

				else
					!SET_OR_RETURN `decl.value = parseExpression(state, decl)`
				end
			end

		elseif gotDefaultValue and not gotVararg then
			!ERROR_OR_RETURN `errorParsingAfterLast(
				state,
				"Missing default value for '%s'. All optional arguments must be at the end of the argument list.",
				concatNamesInArgumentGroupForError(argsInGroup)
			)`
		end

		-- Set additional flags.
		while true do
			tokType, tokValue = peekNextToken(state)

			if isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"shadow") then
				eatNextToken(state)
				if argsInGroup[1].declaration.canShadow then
					!ERROR_OR_RETURN `errorParsingLast(state, "Duplicate !shadow.")`
				elseif not isInput then
					!ERROR_OR_RETURN `errorParsingLast(state, "!shadow does nothing for return arguments.")`
				end
				for _, arg in ipairs(argsInGroup) do
					arg.declaration.canShadow = true
				end

			elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"must") then
				eatNextToken(state)
				local lastArg = argsInGroup[#argsInGroup]
				if lastArg.isRequired then
					!ERROR_OR_RETURN `errorParsingLast(state, "Duplicate !must.")`
				elseif isInput then
					!ERROR_OR_RETURN `errorParsingLast(state, "!must can only be used for return arguments.")`
				end
				lastArg.isRequired = true -- We update isRequired for all arguments below.

			else
				break
			end
		end

		tokType, tokValue = peekNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),",") then
			eatNextToken(state)
			-- Continue the loop.
		else
			break
		end

		if gotVararg then
			!ERROR_OR_RETURN `errorParsingLast(state, "Vararg must be the last argument.")`
		end
	end

	if isInput then
		for _, arg in ipairs(args.arguments) do
			arg.isRequired = (arg.declaration.value == nil and arg.declaration.name.nodeType ~= !(AST_VARARG))
		end
	else
		local argIndex = lastIndexWith1(args.arguments, "isRequired", true)
		if argIndex then
			for argIndex = 1, argIndex-1 do
				args.arguments[argIndex].isRequired = true
			end
		end
	end

	return args
end

function _G.parseNamelessOutputArguments(state, parent)
	local args = astNewNode(AstArguments, state.nextToken, parent)

	for groupN = 1, math.huge do
		local arg = astNewNode(AstArgument, state.nextToken, args)
		arg.group = groupN
		table.insert(args.arguments, arg)

		local decl      = astNewNode(AstDeclaration, arg.token, arg)
		arg.declaration = decl

		local tokType, tokValue = peekNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"...") then
			eatNextToken(state)

			local vararg       = astNewNode(AstVararg, decl.token, decl)
			vararg.declaration = decl
			decl.name          = vararg

			!SET_OR_RETURN `decl.type = parseExpression(state, decl)`

		else
			!SET_OR_RETURN `decl.type = parseExpression(state, decl)`

			local ident       = astNewNode(AstIdentifier, decl.token, decl)
			ident.declaration = decl
			decl.name         = ident
		end

		tokType, tokValue = peekNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"must") then
			eatNextToken(state)
			arg.isRequired = true -- We update isRequired for all arguments below.
		end

		tokType, tokValue = peekNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),",") then
			eatNextToken(state)
		else
			break
		end

		if decl.name.nodeType == !(AST_VARARG) then
			!ERROR_OR_RETURN `errorParsingLast(state, "Vararg must be the last argument.")`
		end
	end

	local argIndex = lastIndexWith1(args.arguments, "isRequired", true)
	if argIndex then
		for argIndex = 1, argIndex-1 do
			args.arguments[argIndex].isRequired = true
		end
	end

	return args
end

function _G.parseStruct(state, parent)
	local struct            = astNewNode(AstStruct, state.nextToken-1, parent) -- The token should be the 'struct' keyword.
	local tokType, tokValue = eatNextToken(state)

	if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(") then
		struct.isPolymorphic       = true
		!SET_OR_RETURN `local args = parseArguments(state, struct, true)`

		local gotError = false

		astVisitAllNodes(args, function(node)
			if node.nodeType == !(AST_VARARG) then
				gotError = true
				!ERROR_OR_RETURN_VALUE(`errorParsing(state, node.token, "Struct arguments cannot be variable.")`, toLua(VISIT_BREAK))

			elseif node.nodeType == !(AST_ARGUMENT) then
				if node.autobake ~= !(AUTOBAKE_DISABLED) and not state.soft then
					parserMessageLine(io.stderr, state, node.token, "Warning", "Struct arguments are always auto-baked and thus don't need any $.")
				end

			elseif node.nodeType == !(AST_BAKE) then
				!ERROR_OR_RETURN_VALUE(`errorParsing(state, node.token, "Placeholder types are not supported in struct arguments.")`, toLua(VISIT_BREAK))
			end
		end)

		if gotError then  return nil  end

		-- Move declarations from the temporary args node into the struct for later baking.
		for _, arg in ipairs(args.arguments) do
			local decl  = arg.declaration
			decl.parent = struct
			decl.kind   = !(DECL_KIND_LOCAL_CONST)

			table.insert(struct.statementsStatic, decl)
			table.insert(struct.declarations,     decl)
			table.insert(struct.bakeDeclarations, decl)
		end

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ')'.")`
		end

		tokType, tokValue = eatNextToken(state)
	end

	if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"{") then
		!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '{'.")`
	end

	-- Note: We allow a trailing comma/semicolon after the last member.
	while true do
		tokType, tokValue         = peekNextToken(state, 1)
		local tokType2, tokValue2 = peekNextToken(state, 2)
		local tokType3, tokValue3 = peekNextToken(state, 3)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"}") then
			eatNextToken(state)
			break

		elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"assert","print") then
			!SET_OR_RETURN `local debugNode = parseDebugNode(state, struct)`
			table.insert(struct.statementsStatic, debugNode)

		elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"using") and not (
			tokType2 == !(TOKEN_IDENTIFIER)
			and isToken(tokType3,tokValue3, !(TOKEN_PUNCTUATION),"=",":")
		) then
			eatNextToken(state)
			!SET_OR_RETURN `local expr = parseExpression(state, struct)`
			table.insert(struct.statementsStatic, expr)
			table.insert(struct.inherits,         expr)

		elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"key","value") then
			eatNextToken(state)

			local what = tokValue
			local k    = what == "key" and "keyType" or "valueType"

			tokType, tokValue = eatNextToken(state)
			if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),":") then
				!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ':'.")`
			end

			if struct[k] then
				!ERROR_OR_RETURN `
					printerr()
					parserMessage(io.stderr, state, state.nextToken-2, "Error", "Duplicate !%s in struct.",      what)
					parserMessage(io.stderr, state, struct[k].token-2, "Info",  "...previous !%s defined here.", what)
					exitFailure()
				`
			end

			!SET_OR_RETURN `struct[k] = parseExpression(state, struct)`

		else
			local declType = !(DECLARATION_STRUCT)
			!DO_OR_RETURN `parseDeclarationStatement(state, struct, false, declType)`
		end

		tokType, tokValue = eatNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),",",";") then
			-- Continue the loop.
		elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"}") then
			break
		else
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '}'.")`
		end
	end

	return struct
end

function _G.parseEnum(state, parent)
	local enum              = astNewNode(AstEnum, state.nextToken-1, parent) -- The token should be the 'enum' keyword.
	local tokType, tokValue = peekNextToken(state)

	if isToken(tokType,tokValue, !(TOKEN_KEYWORD),"float","int","string","bool","type") then -- We don't allow 'table', 'any' or anything user-defined.
		!SET_OR_RETURN `enum.memberType = parseExpression(state, enum, math.huge)`
	end

	tokType, tokValue = eatNextToken(state)

	if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"{") then
		local tokType2, tokValue2 = peekNextToken(state)
		if
			(tokType == !(TOKEN_IDENTIFIER) or isTokenBuiltinType(tokType, tokValue))
			and isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),"{")
		then
			!ERROR_OR_RETURN `errorParsingLast(state, "Supported enum member types are: int, string, type, bool, float")`
		else
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '{'.")`
		end
	end

	-- Note: We allow a trailing comma/semicolon after the members.
	while true do
		local declType = !(DECLARATION_ENUM)
		!DO_OR_RETURN `parseDeclarationStatement(state, enum, false, declType)`

		tokType, tokValue = eatNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),",",";") then
			-- Continue the loop.
		elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"}") then
			break
		else
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '}'.")`
		end

		tokType, tokValue = peekNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"}") then
			eatNextToken(state)
			break
		end
	end

	return enum
end

-- success = parseDeclarationStatement( compilationState, parentScope, inImperativeScope [, declarationType=DECLARATION_NORMAL ] )
-- declarationType = DECLARATION_NORMAL|DECLARATION_STRUCT|DECLARATION_ENUM
function _G.parseDeclarationStatement(state, scope, imperative, declType)
	--[[
	local a := 0        -- Variable, inferred type.
	local a  = 0        -- Variable, inferred type (same as the above).
	local b:float = 0   -- Variable, explicit type.
	local c:float       -- Variable, getting the default value for the type.
	local A :: 0        -- Constant, inferred type.
	local B:float : 0   -- Constant, explicit type.
	local a,b,c = 0,f() -- Multiples always have either inferred type...
	local a,b:int : 1,2 -- ...or the same type.
	local A :: struct {}
	local A :: enum   {}
	local a :: !import "lib"
	]]

	declType = declType or !(DECLARATION_NORMAL)

	local declarations = {}
	local declNames    = {}
	local isUsing      = false
	local declKind

	local tokType, tokValue = peekNextToken(state)

	if isToken(tokType,tokValue, !(TOKEN_KEYWORD),"using") then
		eatNextToken(state)
		isUsing = true
	end

	-- local kindToken = state.nextToken

	if declType == !(DECLARATION_NORMAL) then
		tokType, tokValue = eatNextToken(state)

		if tokType ~= !(TOKEN_KEYWORD) then
			!ERROR_OR_RETURN `errorParsingLast(state, "Expected 'local'.")`
		elseif tokValue == "local" then
			declKind = !(DECL_KIND_LOCAL_VAR)
		elseif tokValue == "export" then
			declKind = !(DECL_KIND_EXPORT_VAR)
		elseif tokValue == "static" then
			declKind = !(DECL_KIND_STATIC) ; imperative = false
		-- elseif tokValue == "read_only" then
		-- 	declKind = !(DECL_KIND_READ_ONLY)
		else
			!ERROR_OR_RETURN `errorParsingLast(state, "Expected 'local'.")`
		end

	else
		declKind = !(DECL_KIND_LOCAL_VAR)
	end

	local nameListStartToken = state.nextToken
	local takenNames = {}

	if declType == !(DECLARATION_NORMAL) then
		!DO_OR_RETURN `parseNameList(state, scope, declNames, true)` -- Note: We update parent here below.

		for i, ident in ipairs(declNames) do
			local decl        = astNewNode(AstDeclaration, ident.token, scope)
			declarations[i]   = decl

			ident.parent      = decl
			ident.declaration = decl

			decl.name         = ident
		end

	else
		local decl        = astNewNode(AstDeclaration, 1, scope)
		declarations[1]   = decl

		tokType, tokValue = peekNextToken(state)
		local ident

		if declType == !(DECLARATION_STRUCT) and isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"call","iterator") then
			eatNextToken(state)
			ident      = astNewNode(AstIdentifier, state.nextToken-1, decl)
			ident.name = "!"..tokValue
		else
			!SET_OR_RETURN `ident = parseIdentifier(state, decl)`
		end

		ident.declaration = decl
		decl.token        = ident.token
		decl.name         = ident
		table.insert(declNames, ident)
	end

	!ASSERT `#declarations[1]`
	!ASSERT `#declarations == #declNames`

	local typesStartToken = state.nextToken -- Dummy position, kinda.
	tokType, tokValue     = peekNextToken(state)

	-- local x: someType
	-- local x := value
	-- local x :: value
	if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),":") then
		eatNextToken(state)

		typesStartToken   = state.nextToken
		tokType, tokValue = peekNextToken(state)

		-- Inferred type.
		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),":","=") then
			-- void

		-- Specified type.
		else
			if declType == !(DECLARATION_ENUM) then
				!ERROR_OR_RETURN `errorParsingNext(state, "The type of the members must be specified after the 'enum' keyword.")`
			end
			for _, decl in ipairs(declarations) do
				state.nextToken           = typesStartToken
				!SET_OR_RETURN `decl.type = parseExpression(state, decl)` -- @Speed: Parse once then just copy the first one.
			end
		end

	-- local x = value
	elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"=") then
		-- void

	-- enum { NAME1, NAME2 }
	elseif declType == !(DECLARATION_ENUM) and isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),",","}") then
		-- void

	else
		!ERROR_OR_RETURN `errorParsingAfterLast(state, "Expected ':' or '='.")`
	end

	tokType, tokValue = peekNextToken(state)

	local assignment  = nil
	local isConst     = false

	if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"=",":") then
		eatNextToken(state)
		isConst = (tokValue == ":")

		if isConst then
			imperative = false
			if     declKind == !(DECL_KIND_LOCAL_VAR)  then  declKind = !(DECL_KIND_LOCAL_CONST)
			elseif declKind == !(DECL_KIND_EXPORT_VAR) then  declKind = !(DECL_KIND_EXPORT_CONST)
			elseif declKind == !(DECL_KIND_STATIC)     then  !ERROR_OR_RETURN `errorParsingLast(state, "Static names cannot be constant.")`
			else                                             errorInternal("%s", declKind)  end
		elseif declType == !(DECLARATION_ENUM) then
			!ERROR_OR_RETURN `errorParsingLast(state, "Enum members must be constant.")`
		end

		if imperative then
			assignment                = astNewNode(AstAssignment, state.nextToken-1, scope)
			assignment.forDeclaration = true
			assignment.declarations   = {}

			for i, decl in ipairs(declarations) do
				local identCopy       = astCopy(declNames[i], nil, assignment)
				assignment.targets[i] = identCopy

				decl.assignment       = assignment
				decl.assignmentIndex  = i

				table.insert(assignment.declarations, decl)
			end

			if declType == !(DECLARATION_NORMAL) then
				!DO_OR_RETURN `parseExpressionList(state, assignment, assignment.values, nil, false)`
			else
				!SET_OR_RETURN `local expr = parseExpression(state, assignment)`
				table.insert(assignment.values, expr)
			end

		else
			for i, decl in ipairs(declarations) do
				if i > 1 then
					tokType, tokValue = eatNextToken(state)
					if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),",") then
						!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Missing a value for '%s'.", decl.name.name)`
					end
				end

				decl.value = parseExpression(state, decl)
			end
		end

	elseif declType == !(DECLARATION_ENUM) then
		local enum = scope
		!ASSERT("enum.nodeType == "..AST_ENUM) -- Note: We don't support !if or anything in enums, so the parent scope should always be the enum.

		enum.autoValue        = enum.autoValue+1
		declarations[1].value = newLiteral(declarations[1], nameListStartToken, !(LITERAL_INTEGER), enum.autoValue)

		!ASSERT("declKind == "..DECL_KIND_LOCAL_VAR)

		declKind   = !(DECL_KIND_LOCAL_CONST)
		isConst    = true
		imperative = false
	end

	for _, decl in ipairs(declarations) do
		decl.kind = declKind
	end

	-- Set if shadowing is allowed.
	tokType, tokValue = peekNextToken(state)

	if isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"shadow") then
		eatNextToken(state)

		if isConst then
			!ERROR_OR_RETURN `errorParsingLast(state, "Constants cannot be shadows.")`
		elseif declType == !(DECLARATION_STRUCT) then
			!ERROR_OR_RETURN `errorParsingLast(state, "Struct members cannot be marked as shadows.")`
		elseif declType == !(DECLARATION_STRUCT) then
			!ERROR_OR_RETURN `errorParsingLast(state, "Enum members cannot be marked as shadows.")`
		elseif declType ~= !(DECLARATION_NORMAL) then
			errorInternal(declType)
		end

		for _, decl in ipairs(declarations) do
			decl.canShadow = true
		end
	end

	-- Quickly check if the value count is obviously wrong.
	if assignment then
		local valueCount = #assignment.values
		local nameCount  = #declNames

		if valueCount > nameCount then
			!ERROR_OR_RETURN `errorParsing(
				state, assignment.values[nameCount+1].token-1,
				"There are more values than names being declared. (Expected %d value%s, got %d)",
				nameCount, (nameCount == 1 and "" or "s"), valueCount
			)`

		elseif isConst and valueCount < nameCount then
			!ERROR_OR_RETURN `errorParsingAfterLast(
				state,
				"No value for '%s'. Each constant must have it's own value. (Expected %d values, got %d)",
				declNames[valueCount+1].name, nameCount, valueCount
			)`
		end
	end

	if declType == !(DECLARATION_STRUCT) and not isConst and !!(CONST_SET{"!call","!iterator"})[declNames[1].name] then
		!ERROR_OR_RETURN `errorParsing(state, declNames[1].token, "%s declarations must be constant.", declNames[1].name)`
	end

	if declType == !(DECLARATION_NORMAL) then  eatTrailingSemicolon(state)  end

	-- Notes (after any semicolon).
	tokType, tokValue = peekNextToken(state)

	if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"@") then
		local token            = state.nextToken
		local prevOpPrecedence = !(math.min(OPERATOR_PRECEDENCE.call, OPERATOR_PRECEDENCE.access)-1)

		for _, decl in ipairs(declarations) do
			state.nextToken = token

			repeat
				eatNextToken(state) -- '@'

				!SET_OR_RETURN_FALSE `local note = parseExpression(state, decl, prevOpPrecedence)`
				table.insert(decl.notes, note)

				tokType, tokValue = peekNextToken(state)
			until not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"@")
		end
	end

	--
	-- Everything's done! Now we can modify the scope.
	--

	local statements = (imperative and scope.statementsDynamic or scope.statementsStatic)
	for i = 1, #declarations do
		table.insert(statements,         declarations[i])
		table.insert(scope.declarations, declarations[i])
	end

	if assignment then
		table.insert(scope.statementsDynamic, assignment)
	end

	if isUsing then
		for _, decl in ipairs(declarations) do
			local using       = astNewNode(AstUsing, decl.token, scope)

			local ident       = astNewNode(AstIdentifier, decl.token, using)
			ident.name        = decl.name.name
			ident.declaration = decl
			using.expression  = ident

			table.insert(scope.statementsStatic, using)
			table.insert(scope.usings,           using)
		end
	end

	!if DEBUG then
		local decl1 = declarations[1]
		if decl1.kind == !(DECL_KIND_LOCAL_CONST) or decl1.kind == !(DECL_KIND_EXPORT_CONST) then
			assert(decl1.value)
			assert(not assignment)
		end
	!end

	return true
end

function _G.parseAssignment(state, parent)
	local assignment          = astNewNode(AstAssignment, 1, parent)
	local statementStartToken = state.nextToken

	!DO_OR_RETURN `parseExpressionList(state, assignment, assignment.targets, nil, true)`

	for i, expr in ipairs(assignment.targets) do
		if not !!(CONST_SET{ AST_IDENTIFIER, AST_ACCESS, AST_BLANK })[expr.nodeType] then
			!ERROR_OR_RETURN `errorParsing(state, expr.token, "Expected assignment target expression to resolve into a variable or namespace access.")`
		end
	end

	local tokType, tokValue = eatNextToken(state)

	if not isTokenAssigning(tokType, tokValue) then
		!TRACE()
		!ERROR_OR_RETURN `
			printerr()
			parserMessageAfter(io.stderr, state, state.nextToken-2,   "Error", "Expected '=' in assignment statement.")
			parserMessage     (io.stderr, state, statementStartToken, "Info",  "...start of statement is here.")
			exitFailure()
		`
	end

	assignment.token           = state.nextToken-1
	assignment.binaryOperation = tokValue:sub(1, -2) -- All assignments with extra operations end with '=' (e.g. '+='). Here we just strip away the '='.

	!DO_OR_RETURN `parseExpressionList(state, assignment, assignment.values, nil, false)`

	-- Quickly check if there are obviously too many values.
	if #assignment.values > #assignment.targets then
		!ERROR_OR_RETURN `errorParsing(state, assignment.values[#assignment.targets+1].token-1, "There are more values than assignment targets.")`
	end

	return assignment
end

-- Add the names to the 'names' array.
-- success = parseNameList( compilationState, parent, names, allowBlanks )
function _G.parseNameList(state, parent, names, allowBlanks)
	local takenNames = {}

	while true do
		local tokType, tokValue, token = peekNextToken(state)
		local identOrBlank

		if allowBlanks and isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"_") then
			eatNextToken(state)
			identOrBlank = astNewNode(AstBlank, token, parent)
		else
			!SET_OR_RETURN_FALSE `identOrBlank = parseIdentifier(state, parent)`
			if takenNames[identOrBlank.name] then
				!ERROR_OR_RETURN_FALSE `errorParsingLast(state, "Duplicate name '%s'.", identOrBlank.name)`
			end
			takenNames[identOrBlank.name] = true
		end

		table.insert(names, identOrBlank)
		tokType, tokValue = peekNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),",") then
			eatNextToken(state)
			-- Continue the loop.
		else
			break
		end
	end

	return true
end

function _G.parseDebugNode(state, parent)
	local tokType, tokValue, token = eatNextToken(state)
	if tokType ~= !(TOKEN_DIRECTIVE) then
		!ERROR_OR_RETURN `errorParsingLast(state, "Expected a directive.")`
	end

	local debugNode  = astNewNode(AstDebug, token, parent)
	debugNode.action = tokValue

	!SET_OR_RETURN `debugNode.expression = parseExpression(state, debugNode)`

	return debugNode
end

local function parseIfBranch(state, ifOrStaticIf, isFileScopeOrNamespace)
	local block

	if isFileScopeOrNamespace then
		!ASSERT("ifOrStaticIf.nodeType == "..AST_STATIC_IF)

		local tokType, tokValue, token = peekNextToken(state)

		-- This block will never get inferred - it's just for storing statements we may potentially use.
		-- (Should we have a dedicated node type for this? Probably not needed.)
		block = astNewNode(AstBlock, token, ifOrStaticIf)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"{") then
			eatNextToken(state) -- '{'
			!DO_OR_RETURN `parseFileScopeOrNamespaceStatements(state, block, false, false)`
		else
			!DO_OR_RETURN `parseFileScopeOrNamespaceStatements(state, block, false, true)`
		end

	else
		!SET_OR_RETURN `block = parseBlockOrScopedStatement(state, ifOrStaticIf)`
	end

	return block
end

function _G.parseIfOrStaticIf(state, parent, isFileScopeOrNamespace)
	local tokType, tokValue, token = eatNextToken(state)
	!ASSERT(F("isToken(tokType,tokValue, %d,%q) or isToken(tokType,tokValue, %d,%q)", TOKEN_KEYWORD,"if", TOKEN_DIRECTIVE,"if"))

	local AstNodeType                       = tokType == !(TOKEN_KEYWORD) and AstIf or AstStaticIf
	local ifOrStaticIf                      = astNewNode(AstNodeType, token, parent)
	!SET_OR_RETURN `ifOrStaticIf.condition  = parseExpression(state, ifOrStaticIf)`
	!SET_OR_RETURN `ifOrStaticIf.branchTrue = parseIfBranch(state, ifOrStaticIf, isFileScopeOrNamespace)`

	tokType, tokValue = peekNextToken(state)

	if isToken(tokType,tokValue, !(TOKEN_KEYWORD),"else") then
		eatNextToken(state)

		-- Make !if...elseif work.
		if AstNodeType == AstStaticIf then
			tokType, tokValue, token = peekNextToken(state)
			if isToken(tokType,tokValue, !(TOKEN_KEYWORD),"if") and state.tokens.position1[token] == state.tokens.position1[token-1]+4 then
				state.tokens.type[token] = !(TOKEN_DIRECTIVE) -- Just make the 'if' into '!if'.
			end
		end

		!SET_OR_RETURN `ifOrStaticIf.branchFalse = parseIfBranch(state, ifOrStaticIf, isFileScopeOrNamespace)`
	end

	return ifOrStaticIf
end

local function getBreakableNameFromSimpleExpression(expr)
	if expr.nodeType == !(AST_IDENTIFIER) then
		return expr.name

	elseif expr.nodeType == !(AST_UNARY) then
		if expr.operation == "not" and expr.expression.nodeType == !(AST_IDENTIFIER) then
			return expr.expression.name
		end

	elseif expr.nodeType == !(AST_BINARY) then
		if expr.left.nodeType == expr.right.nodeType then
			-- void
		elseif expr.left.nodeType == !(AST_IDENTIFIER) then
			if expr.right.nodeType == !(AST_LITERAL) then  return expr.left.name   end
		elseif expr.right.nodeType == !(AST_IDENTIFIER) then
			if expr.left.nodeType  == !(AST_LITERAL) then  return expr.right.name  end
		end
	end

	return ""
end

function _G.parseSwitch(state, parent, statementStartToken, valueExpr, complete)
	-- Note: We assume '... == {' has been eaten already.
	local switch     = astNewNode(AstSwitch, statementStartToken, parent)
	switch.complete  = complete
	switch.value     = valueExpr
	valueExpr.parent = switch

	local gotDefault = false
	local lastCaseToken, lastThroughToken

	while true do
		local tokType, tokValue = eatNextToken(state)
		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"}") then
			break
		elseif not isToken(tokType,tokValue, !(TOKEN_KEYWORD),"case") then
			!ERROR_OR_RETURN `errorParsingLast(state, "Expected 'case' or '}'.")`
		elseif gotDefault then
			!ERROR_OR_RETURN `errorParsing(state, lastCaseToken, "The default case must be last.")`
		end

		lastCaseToken = state.nextToken-1

		local case = SwitchCase()
		table.insert(switch.cases, case)

		tokType, tokValue = peekNextToken(state)
		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),":") then
			gotDefault = true -- Omitted value means the default case.
		else
			!SET_OR_RETURN `case.value = parseExpression(state, switch)`
		end

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),":") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ':'.")`
		end

		tokType, tokValue = peekNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"through") then
			eatNextToken(state) -- '!through'

			case.fallThrough = true
			lastThroughToken = state.nextToken-1

		else
			!SET_OR_RETURN `local body = astNewNode(AstBlock, state.nextToken, switch)`
			case.body                  = body

			while true do
				tokType, tokValue = peekNextToken(state)
				if isToken(tokType,tokValue, !(TOKEN_KEYWORD),"case") or isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"}") then
					break
				elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"through") then
					!ERROR_OR_RETURN `errorParsingNext(state, "!through must currently be right after 'case'.")`
				end
				!DO_OR_RETURN `parseOneStatementButSometimesMoreAndAddToBlock(state, body)`
			end
		end
	end

	if switch.cases[1] and getLast(switch.cases).fallThrough then
		!ERROR_OR_RETURN `errorParsing(state, lastThroughToken, "Cannot fall through the last case.")`
	end

	return switch
end

-- success = parseOneStatementButSometimesMoreAndAddToBlock( state, block )
function _G.parseOneStatementButSometimesMoreAndAddToBlock(state, block)
	local tokType,  tokValue  = peekNextToken(state, 1)
	local tokType2, tokValue2 = peekNextToken(state, 2)
	local tokType3, tokValue3 = peekNextToken(state, 3)
	local tokType4, tokValue4 = peekNextToken(state, 4)

	if isToken(tokType,tokValue, !(TOKEN_KEYWORD),"local","static") or (
		isToken(tokType, tokValue,  !(TOKEN_KEYWORD),"using") and
		isToken(tokType2,tokValue2, !(TOKEN_KEYWORD),"local","static")
	) then
		!DO_OR_RETURN_FALSE `parseDeclarationStatement(state, block, true)`
		return true
	end

	local statementStartToken = state.nextToken
	local statement

	if isToken(tokType,tokValue, !(TOKEN_KEYWORD),"export") or (
		isToken(tokType, tokValue,  !(TOKEN_KEYWORD),"using") and
		isToken(tokType2,tokValue2, !(TOKEN_KEYWORD),"export")
	) then
		if tokValue == "using" then  eatNextToken(state)  end
		!ERROR_OR_RETURN_FALSE `errorParsingNext(state, "Exports can only be declared in file scope or in namespaces.")`

	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"return") then
		local returnNode = astNewNode(AstReturn, state.nextToken, block)

		eatNextToken(state)

		--
		-- Note: Considering this following @Ambigous situation we have to check whether any values should be returned.
		-- As a bonus we also figure if we're even inside a function, though I'm not sure this'll work when we have static code. @Robustness
		--
		--   if x return
		--   func() -- Returned expression, or separate statement after 'if'?
		--
		local lambda = getLambda(returnNode)
		if not lambda then
			-- This shouldn't happen as this function shouldn't be called by anything that does not parse return statements.
			!ERROR_OR_RETURN_FALSE `errorParsingNext(state, "Internal compiler error: Not inside a function.")`
		end

		tokType, tokValue = peekNextToken(state)
		if isToken(tokType,tokValue, !(TOKEN_KEYWORD),"void") then -- We allow 'return void' both for vararg functions and functions with no return values.
			eatNextToken(state)
		elseif lambda.argumentsOut then
			!DO_OR_RETURN_FALSE `parseExpressionList(state, returnNode, returnNode.values, nil, false)`
		end

		statement = returnNode

	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"break","continue") then
		local keyword         = tokValue
		local isContinue      = keyword == "continue"
		local breakOrContinue = astNewNode((isContinue and AstContinue or AstBreak), state.nextToken, block)

		eatNextToken(state)

		!local constName   = CONST_SET{ AST_FOR, AST_WHILE, AST_LAMBDA }
		local loopOrLambda = astFindParent(breakOrContinue, !!(constName))

		if not loopOrLambda or loopOrLambda.nodeType == !(AST_LAMBDA) then
			!ERROR_OR_RETURN_FALSE `errorParsingLast(state, "Not inside a loop.")`
		end

		tokType, tokValue = peekNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(") then
			eatNextToken(state) -- '('

			!SET_OR_RETURN_FALSE `local loopNameIdent = parseIdentifier(state, breakOrContinue)`

			local loopName    = loopNameIdent.name
			local loopClosest = loopOrLambda

			repeat
				-- We can break from these types of loops:
				--   for i = 1, 2  break(i)
				--   while x       break(x)
				--   while not x   break(x)
				-- We cannot break from these:
				--   for 1, 2   break(it)  -- 'it' is an implicit name. (We could make this work if necessary.)
				--   while x+y  break(x)   -- The condition expression is too complex. (What's "too complex" is debatable. @Revise)
				if
					loopOrLambda.nodeType == !(AST_FOR)   and itemWith1(loopOrLambda.names, "name", loopName) or
					loopOrLambda.nodeType == !(AST_WHILE) and getBreakableNameFromSimpleExpression(loopOrLambda.condition) == loopName
				then
					if loopOrLambda == loopClosest and not isContinue then
						-- void  We don't need a named break if we're breaking from the closest loop. (Should we save this info anyway for the metaprogram? Probably!)
					else
						breakOrContinue.loopName   = loopNameIdent
						breakOrContinue.loop       = loopOrLambda
						loopOrLambda.hasNamedJumps = true
					end
					break

				elseif loopOrLambda.nodeType == !(AST_LAMBDA) then
					break -- Assume the identifier is part of a different statement.
				end

				!local constName = CONST_SET{ AST_FOR, AST_WHILE, AST_LAMBDA }
				loopOrLambda     = astFindParent(loopOrLambda, !!(constName))
			until not loopOrLambda

			if not loopOrLambda or loopOrLambda.nodeType == !(AST_LAMBDA) then
				!ERROR_OR_RETURN_FALSE `errorParsingLast(state, "Could not find what loop '%s' refers to.", loopName)`
			end

			tokType, tokValue = eatNextToken(state)

			if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
				!ERROR_OR_RETURN_FALSE `errorParsingAfterPrevious(state, "Expected ')'.")`
			end

		elseif isContinue then
			breakOrContinue.loop       = loopOrLambda
			loopOrLambda.hasNamedJumps = true
		end

		statement = breakOrContinue

	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"do") then
		eatNextToken(state)
		!SET_OR_RETURN_FALSE `statement = parseBlockOrScopedStatement(state, block)`

	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"defer") then
		local defer = astNewNode(AstDefer, state.nextToken, block)

		eatNextToken(state)
		!SET_OR_RETURN_FALSE `defer.body = parseBlockOrScopedStatement(state, defer)`

		statement = defer

	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"if") and isToken(tokType2,tokValue2, !(TOKEN_DIRECTIVE),"complete") then
		eatNextToken(state) -- 'if'
		eatNextToken(state) -- '!complete'
		!SET_OR_RETURN_FALSE `local expr = parseExpression(state, block)`

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"==") then
			!ERROR_OR_RETURN_FALSE `errorParsingLast(state, "Expected '=='.")`
		end

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"{") then
			!ERROR_OR_RETURN_FALSE `errorParsingLast(state, "Expected '{'.")`
		end

		!SET_OR_RETURN_FALSE `statement = parseSwitch(state, block, statementStartToken, expr, true)`

	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"if") then
		eatNextToken(state) -- 'if'
		!SET_OR_RETURN_FALSE `local expr = parseExpression(state, block)`
		tokType,  tokValue  = peekNextToken(state, 1)
		tokType2, tokValue2 = peekNextToken(state, 2)

		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"==") and isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),"{") then
			eatNextToken(state) -- '=='
			eatNextToken(state) -- '{'
			!SET_OR_RETURN_FALSE `statement = parseSwitch(state, block, statementStartToken, expr, false)`

		else
			state.nextToken = statementStartToken
			!SET_OR_RETURN_FALSE `statement = parseIfOrStaticIf(state, block, false)`
		end

	elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"if") then
		!SET_OR_RETURN_FALSE `statement = parseIfOrStaticIf(state, block, false)`

	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"while") then
		local whileLoop = astNewNode(AstWhile, state.nextToken, block)
		eatNextToken(state)

		!SET_OR_RETURN_FALSE `whileLoop.condition = parseExpression(state, whileLoop)`
		!SET_OR_RETURN_FALSE `whileLoop.body      = parseBlockOrScopedStatement(state, whileLoop)`

		statement = whileLoop

	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"for") then
		local forLoop = astNewNode(AstFor, state.nextToken, block)

		eatNextToken(state)
		tokType, tokValue = peekNextToken(state)

		-- FOR_SHORT  for < [ v1, ... : ] obj
		if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"<") then
			eatNextToken(state)
			forLoop.reverse = true
		end

		local forStartIndex = state.nextToken

		local exprListWeMayOrMayNotUse = {}
		!DO_OR_RETURN_FALSE `parseExpressionList(state, forLoop, exprListWeMayOrMayNotUse, nil, false)`

		tokType, tokValue = peekNextToken(state)
		local twoParter

		-- FOR_ITERATOR  for v1, ... in iter [, state [, init ] ]
		if isToken(tokType,tokValue, !(TOKEN_KEYWORD),"in") then
			forLoop.forType = !(FOR_ITERATOR)
		-- FOR_SHORT  for [ < ] v1, ... : obj
		elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),":") then
			forLoop.forType = !(FOR_SHORT)
			twoParter       = true
		-- FOR_NUMERIC  for i = start, end [, step ]
		elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"=") then
			forLoop.forType = !(FOR_NUMERIC)
			twoParter       = true
		-- FOR_NUMERIC  for start, end [, step ]
		elseif #exprListWeMayOrMayNotUse >= 2 then -- If more than 3 arguments are specified then we'll get an error later.
			forLoop.forType = !(FOR_NUMERIC)
			twoParter       = false
		-- FOR_SHORT  for [ < ] obj
		elseif #exprListWeMayOrMayNotUse == 1 then
			forLoop.forType = !(FOR_SHORT)
			twoParter       = false
		else
			!ERROR_OR_RETURN_FALSE `errorParsing(state, forLoop.token, "Could not determine what kind of 'for' statement this is.")`
		end

		if forLoop.reverse and forLoop.forType ~= !(FOR_SHORT) then
			!ERROR_OR_RETURN_FALSE `errorParsing(state, forLoop.token+1, "Only short-form 'for' loops support the reverse operator.")`
		end

		if forLoop.forType == !(FOR_NUMERIC) then
			-- for i = start, end [, step ]
			if twoParter then
				state.nextToken = forStartIndex
				!DO_OR_RETURN_FALSE `parseNameList(state, forLoop, forLoop.names, false)`

				if forLoop.names[2] then
					!ERROR_OR_RETURN_FALSE `errorParsing(state, forLoop.names[2].token, "Expected only one name in numeric 'for' loop.")`
				end

				tokType, tokValue = eatNextToken(state)
				assert(isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"="))

				!DO_OR_RETURN_FALSE `parseExpressionList(state, forLoop, forLoop.expressions, nil, false)`

			-- for start, end [, step ]
			else
				forLoop.expressions = exprListWeMayOrMayNotUse
			end

			if #forLoop.expressions < 2 then
				!ERROR_OR_RETURN_FALSE `errorParsingAfterLast(state, "Expected 2 or 3 parameters for the numeric 'for' loop.")`

			elseif #forLoop.expressions > 3 then
				!ERROR_OR_RETURN_FALSE `errorParsing(state, forLoop.expressions[4].token-1, "Expected 2 or 3 parameters for the numeric 'for' loop.")`
			end

		elseif forLoop.forType == !(FOR_SHORT) then
			-- for [ < ] v1, ... : obj
			if twoParter then
				state.nextToken = forStartIndex
				!DO_OR_RETURN_FALSE `parseNameList(state, forLoop, forLoop.names, false)`

				tokType, tokValue = eatNextToken(state)
				assert(isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),":"))

				!DO_OR_RETURN_FALSE `parseExpressionList(state, forLoop, forLoop.expressions, nil, false)`

				if forLoop.expressions[2] then
					!ERROR_OR_RETURN_FALSE `errorParsing(state, forLoop.expressions[2].token-1, "Expected a single parameter for the short-form 'for' loop.")`
				end

			-- for [ < ] obj
			else
				forLoop.expressions = exprListWeMayOrMayNotUse
				assert(#forLoop.expressions == 1)
			end

		-- for v1, ... in iter [, state [, init ] ]
		else
			state.nextToken = forStartIndex
			!DO_OR_RETURN_FALSE `parseNameList(state, forLoop, forLoop.names, false)`

			tokType, tokValue = eatNextToken(state)
			assert(isToken(tokType,tokValue, !(TOKEN_KEYWORD),"in"))

			!DO_OR_RETURN_FALSE `parseExpressionList(state, forLoop, forLoop.expressions, nil, false)`
		end

		!SET_OR_RETURN_FALSE `forLoop.body = parseBlockOrScopedStatement(state, forLoop)`
		table.insert(forLoop.statementsStatic, forLoop.body)

		statement = forLoop

	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"using") then
		!SET_OR_RETURN_FALSE `local using = parseUsing(state, block)`
		statement                         = using

		table.insert(block.usings, using)

	elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"assert","print") then
		!SET_OR_RETURN_FALSE `statement = parseDebugNode(state, block)`

	elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"_") then
		!SET_OR_RETURN_FALSE `statement = parseAssignment(state, block)`

	else
		state.soft     = true
		local exprTest = parseExpression(state, block)
		state.soft     = false

		if not exprTest then
			-- !TRACE() -- This fixes the position of the traceback in the console, but we don't want the traceback to here!
			!ERROR_OR_RETURN_FALSE `
				printerr()
				parserMessage(io.stderr, state, statementStartToken, "Error", "Could not parse statement starting here.")

				state.nextToken = statementStartToken
				parseExpression(state, block) -- Should call exitFailure() at some point.
				exitFailure() -- Just to be safe.
			`

		elseif exprTest.nodeType == !(AST_CALL) then
			local call = exprTest
			if call.surroundedByParentheses then
				!ERROR_OR_RETURN_FALSE `errorParsing(state, astGetExpressionVisuallyFurthestToTheLeft(call).token-1, "Invalid parenthesis around call.")`
			end
			--[[ @Incomplete :ParenthesesAmbiguityError
			if
				isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(")
				and call.callee.nodeType == !(AST_CALL)
				and astGetCalleeVisuallyFurthestToTheLeft(call).nodeType == !(AST_IDENTIFIER)
			then
				!ERROR_OR_RETURN_FALSE `errorParsing(state, statementStartToken, "Ambigous expression being called.")`
			end
			--]]
			statement = call

		elseif exprTest.nodeType == !(AST_IMPORT) then
			-- @Incomplete: Warn about duplicate imports? It'll make imports more similar to how 'using's work.
			local import = exprTest
			statement    = import
			table.insert(block.imports, import)

		else
			state.nextToken                 = statementStartToken
			!SET_OR_RETURN_FALSE `statement = parseAssignment(state, block)`
		end
	end

	!ASSERT `statement`

	local statements = (
		!!(CONST_SET{
			AST_ASSIGNMENT,
			AST_BLOCK,
			AST_BREAK, AST_CONTINUE,
			AST_CALL,
			AST_DEFER,
			AST_FOR,
			AST_IF, AST_STATIC_IF, -- AST_STATIC_IF may have a mixture of static and dynamic statements.
			AST_RETURN,
			AST_SWITCH,
			AST_WHILE,
		})[statement.nodeType]
		and block.statementsDynamic
		or  block.statementsStatic
	)
	table.insert(statements, statement)

	eatTrailingSemicolon(state)
	return true
end

-- success = parseBlockStatements( state, block )
function _G.parseBlockStatements(state, block)
	!if DEBUG then
		--[[
		setmetatable(block, {__newindex=function(block, k, v)
			assert(k ~= 1)
			rawset(block, k, v)
		end})
		--]]
	!end

	local lastNodeType = 0

	while true do
		local tokType, tokValue, token = peekNextToken(state)

		if not tokType then
			!ERROR_OR_RETURN_FALSE `errorParsing(state, block.token, "Unfinished block.")`

		elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"}") then
			eatNextToken(state)
			break

		elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),";") then
			eatNextToken(state)

			-- We allow empty statement like Lua 5.2+ does (so things like ';(x and func1 or func2)()'
			-- always work, no matter what comes previously). :EmptyStatement
			if not state.soft then  parserMessageLine(io.stderr, state, token, "Warning", "Empty statement.")  end

		else
			if !!(CONST_SET{ AST_RETURN, AST_BREAK, AST_CONTINUE })[lastNodeType] then
				local nodeTitle
					=  lastNodeType == !(AST_RETURN)   and "return"
					or lastNodeType == !(AST_BREAK)    and "break"
					or lastNodeType == !(AST_CONTINUE) and "continue"
					or assert(lastNodeType)

				local extra
					=  lastNodeType ~= !(AST_RETURN) and ""
					or getLambda(block).argumentsOut          and " (Note: The function has return arguments.)"
					or                                            " (Note: The function has no return arguments.)"

				!ERROR_OR_RETURN_FALSE `errorParsing(state, state.nextToken, "Unreachable code after %s statement.%s", nodeTitle, extra)`
			end

			!DO_OR_RETURN_FALSE `parseOneStatementButSometimesMoreAndAddToBlock(state, block)`

			local statement = getLast(block.statementsDynamic)
			lastNodeType    = statement and statement.nodeType or 0
		end
	end

	return true
end

function _G.parseBlock(state, parent)
	-- Note: We assume the '{' has been eaten already.

	local block = astNewNode(AstBlock, state.nextToken-1, parent)
	!DO_OR_RETURN `parseBlockStatements(state, block)`

	return block
end

-- block = parseBlockOrScopedStatement( compilationState, parent )
function _G.parseBlockOrScopedStatement(state, parent)
	local tokType, tokValue, token = peekNextToken(state)

	if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"{") then
		eatNextToken(state)
		return (parseBlock(state, parent)) -- May return nil.
	end

	local block = astNewNode(AstBlock, token, parent)

	!DO_OR_RETURN `parseOneStatementButSometimesMoreAndAddToBlock(state, block)`
	return block
end

function _G.parseImportOrLoad(state, parent)
	local import = astNewNode(AstImport, state.nextToken, parent)

	local tokType, tokValue = eatNextToken(state)
	if isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"import") then
		-- void
	elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"load") then
		import.isLoad = true
		if astIsOrIsInModule(import.parent) then
			!ERROR_OR_RETURN `errorParsingNext(state, "Modules cannot use !load.")`
		end
	else
		!ERROR_OR_RETURN `errorParsingLast(state, "Expected '!load' or '!import'.")`
	end

	local tokType, tokValue = eatNextToken(state)
	if tokType ~= !(TOKEN_STRING) then
		!ERROR_OR_RETURN `errorParsingLast(state, "Expected a string.")`
	end
	import.importName = tokValue:gsub("\\", "/") -- Normalize paths.

	return import
end

function _G.parseRun(state, parent, mustBeExpression)
	local tokType, tokValue, token = eatNextToken(state)
	if not isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"run") then
		!ERROR_OR_RETURN `errorParsingLast(state, "Expected '!run'.")`
	end

	local runNode  = astNewNode(AstRun,    token, parent)
	local lambda   = astNewNode(AstLambda, token, parent) -- @Cleanup: Never output this function (or inner functions) in the final program (even if --nostrip is set)?
	runNode.lambda = lambda

	tokType, tokValue = peekNextToken(state)

	if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"{") then
		eatNextToken(state)

		if mustBeExpression then
			!ERROR_OR_RETURN `errorParsingLast(state, "Expected an expression. This is seen as a code block.")`
		end

		!SET_OR_RETURN `local block = parseBlock(state, lambda)`
		lambda.body                 = block
		table.insert(lambda.statementsStatic, block)

	else
		local expectValue = not isScope(parent)

		if expectValue then
			local args          = astNewNode(AstArguments, token, lambda)
			lambda.argumentsOut = args
			table.insert(lambda.statementsStatic, args)

			local arg         = astNewNode(AstArgument, token, args)
			args.arguments[1] = arg

			local decl        = astNewNode(AstDeclaration, token, arg)
			arg.declaration   = decl

			local ident       = astNewNode(AstIdentifier, token, decl)
			ident.declaration = decl
			decl.name         = ident

			local typeNode    = astNewNode(AstType, token, decl)
			typeNode.kind     = !(TYPE_KIND_SIMPLE_BUILTIN)
			typeNode.typeName = "any" -- Good for now?
			decl.type         = typeNode
		end

		local block = astNewNode(AstBlock, token, lambda)
		lambda.body = block
		table.insert(lambda.statementsStatic, block)

		local exprStartToken = state.nextToken

		if expectValue then
			local returnNode           = astNewNode(AstReturn, token, block)
			returnNode.runDirective    = runNode
			block.statementsDynamic[1] = returnNode
			!SET_OR_RETURN `returnNode.values[1] = parseExpression(state, returnNode)`
		else
			!DO_OR_RETURN `parseOneStatementButSometimesMoreAndAddToBlock(state, block)`
		end

		-- Catch situations like these, which are probably errors:
		--   local v = !run func
		--   local v = !run foo.func
		if expectValue then
			local exprIsOnlyIdents = true

			for token = exprStartToken, state.nextToken-1 do
				tokType, tokValue = getToken(state.tokens, token)
				if not (tokType == !(TOKEN_IDENTIFIER) or isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),".")) then
					exprIsOnlyIdents = false
					break
				end
			end

			if exprIsOnlyIdents then
				tokType, tokValue = getToken(state.tokens, state.nextToken-1)
				assert(tokType == !(TOKEN_IDENTIFIER))
				!ERROR_OR_RETURN `errorParsingAfterLast(state, "Ambiguity in !run expression: Did you mean to call %s()?", tokValue)`
			end
		end
	end

	lambda.bodyEndToken = state.nextToken-1
	return runNode
end

-- success = parseFileScopeOrNamespaceStatements( state, parentScope, isTopLevel, singleStatement )
-- WARNING: parentScope is currently modified even if success==false!
function _G.parseFileScopeOrNamespaceStatements(state, scope, isTopLevel, singleStatement)
	while true do
		local tokType,  tokValue, token = peekNextToken(state, 1)
		local tokType2, tokValue2       = peekNextToken(state, 2)
		local tokType3, tokValue3       = peekNextToken(state, 3)

		if not tokType and isTopLevel then
			break

		----------------------------------------------------------------

		elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"export") and not (
			isToken(tokType2,tokValue2, !(TOKEN_IDENTIFIER))
			and isToken(tokType3,tokValue3, !(TOKEN_PUNCTUATION),":",",","=")
		) then
			eatNextToken(state)

			if astIsOrIsInModule(scope) then
				!ERROR_OR_RETURN_FALSE `errorParsingNext(state, "Cannot export namespaces from modules into global space.")`
			end

			!SET_OR_RETURN_FALSE `local import = parseExpression(state, scope, math.huge)`
			if import.nodeType ~= !(AST_IMPORT) then
				errorInternal(state, import, "@Incomplete: Support any expression after 'export'. (Currently supported are !import, !load and !self)")
			end

			import.exported = true

			table.insert(scope.statementsStatic, import)
			table.insert(scope.imports,          import)

		elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"export_value") then
			eatNextToken(state)
			if not isTopLevel then
				!ERROR_OR_RETURN_FALSE `errorParsingNext(state, "Values must be exported directly from file scope.")`
			end

			local fileScope = scope
			!ASSERT("fileScope.nodeType == "..AST_FILE_SCOPE)

			if fileScope.isModule then
				!ERROR_OR_RETURN_FALSE `errorParsingNext(state, "Cannot export values from modules.")`
			end

			if fileScope.valueToExport then
				!ERROR_OR_RETURN_FALSE `
					printerr()
					parserMessage(io.stderr, state, state.nextToken,               "Error", "Multiple exported values.")
					parserMessage(io.stderr, state, fileScope.valueToExport.token, "Info",  "...previous value is here.")
					exitFailure()
				`
			end

			!SET_OR_RETURN_FALSE `fileScope.valueToExport = parseExpression(state, fileScope)`

		elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"local","export") or (
			isToken(tokType, tokValue,  !(TOKEN_KEYWORD),"using") and
			isToken(tokType2,tokValue2, !(TOKEN_KEYWORD),"local","export")
		) then
			!DO_OR_RETURN_FALSE `parseDeclarationStatement(state, scope, false)`

		elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"static") or (
			isToken(tokType, tokValue,  !(TOKEN_KEYWORD),"using") and
			isToken(tokType2,tokValue2, !(TOKEN_KEYWORD),"static")
		) then
			if tokValue == "using" then  eatNextToken(state)  end
			!ERROR_OR_RETURN_FALSE `errorParsingNext(state, "Static variables cannot be declared in file scope or in namespaces.")`

		elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"import","load") then
			-- @Incomplete: Warn about duplicate imports? Maybe not necessay as things will only ever be imported once anyway.
			!SET_OR_RETURN_FALSE `local import = parseImportOrLoad(state, scope)`
			table.insert(scope.statementsStatic, import)
			table.insert(scope.imports,          import)

		elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"using") then
			!SET_OR_RETURN_FALSE `local using = parseUsing(state, scope)`
			table.insert(scope.statementsStatic, using)
			table.insert(scope.usings,           using)

		elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"assert","print") then
			!SET_OR_RETURN_FALSE `local debugNode = parseDebugNode(state, scope)`
			table.insert(scope.statementsStatic, debugNode)

		elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"if") then
			!SET_OR_RETURN_FALSE `local ifOrStaticIf = parseIfOrStaticIf(state, scope, true)`
			table.insert(scope.statementsStatic, ifOrStaticIf)

		elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"run") then
			!SET_OR_RETURN_FALSE `local runNode = parseRun(state, scope, false)`
			table.insert(scope.statementsStatic, runNode)

		elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"preload") then
			eatNextToken(state)
			if not isTopLevel then
				!ERROR_OR_RETURN_FALSE `errorParsingNext(state, "!preload statements are only supported directly in file-scope.")`
			end

			local forRuntime = false
			tokType, tokValue = peekNextToken(state)
			if isToken(tokType,tokValue, !(TOKEN_IDENTIFIER),"runtime") then
				eatNextToken(state)
				forRuntime = true
			end

			tokType, tokValue, token = eatNextToken(state)
			if tokType ~= !(TOKEN_STRING) then
				!ERROR_OR_RETURN_FALSE `errorParsingLast(state, "Expected a string containing Lua code.")`
			end

			local lua = tokValue:gsub("\n%s*$", "")
			if not lua:find"[^%s]" then
				!ERROR_OR_RETURN_FALSE `errorParsingLast(state, "String with Lua code must not be empty.")`
			end

			local spaceBefore = lua:match"^%s*\n"
			local lineOffset  = 0

			if spaceBefore then
				local _, nlCount = spaceBefore:gsub("\n", "%0")
				lineOffset       = nlCount
				lua              = lua:sub(#spaceBefore+1)
			end

			local chunk, err = loadstring(lua, "@(lua)")
			if not chunk then
				!ERROR_OR_RETURN_FALSE `errorParsingLast(state, "This string does not contain valid Lua code: %s", err)`
			end

			table.insert((forRuntime and state.luaPreloadsRuntime or state.luaPreloads), {
				lua        = lua,
				token      = token,
				lineOffset = lineOffset,
			})

		----------------------------------------------------------------

		elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),";") then
			eatNextToken(state)
			if not state.soft then  parserMessageLine(io.stderr, state, token, "Warning", "Empty statement.")  end -- :EmptyStatement

		elseif not (isTopLevel or singleStatement) and isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"}") then
			eatNextToken(state)
			break
		else
			!if DEBUG then
				print(TOKEN_TITLES[state.tokens.type[state.nextToken]])
			!end
			if isTopLevel or singleStatement then
				!ERROR_OR_RETURN_FALSE `errorParsingNext(state, "Expected file-level declaration.")`
			else
				!ERROR_OR_RETURN_FALSE `errorParsingNext(state, "Expected '}'.")`
			end
		end

		if singleStatement then  break  end
	end

	return true
end

function _G.parseFileScope(state, parent, path, isModule, moduleName)
	local fileScope      = astNewNode(AstFileScope, state.nextToken, parent)
	fileScope.path       = path
	fileScope.isModule   = isModule
	fileScope.moduleName = moduleName

	local tokType, tokValue = peekNextToken(state)
	if tokType == !(TOKEN_DUMMY) then
		eatNextToken(state)
	end

	!DO_OR_RETURN `parseFileScopeOrNamespaceStatements(state, fileScope, true, false)`

	if fileScope.valueToExport then
		local globalScope = state.globalScope
		!ASSERT `parent == globalScope`

		if globalScope.fileScopeWithValueToExport then
			local valueToExport = globalScope.fileScopeWithValueToExport.valueToExport

			!ERROR_OR_RETURN `
				printerr()
				parserMessage(io.stderr, state, state.nextToken,     "Error", "Multiple exported values across multiple files.")
				parserMessage(io.stderr, state, valueToExport.token, "Info",  "...previous value is here.")
				exitFailure()
			`
		end

		--
		-- Everything's done now, so it's ok to modify globalScope.
		--
		globalScope.fileScopeWithValueToExport = fileScope
	end

	return fileScope
end

function _G.astMoveRelevantThingsFromFileScopeToGlobalScope(state, fileScope)
	!ASSERT `not fileScope.isModule`
	!ASSERT `not fileScope.queued`

	local globalScope    = state.globalScope
	local globalImports  = globalScope.imports
	local unmovedImports = {}

	for _, import in ipairs(fileScope.imports) do
		table.insert((import.exported and globalImports or unmovedImports), import)
	end

	fileScope.imports = unmovedImports
end

function _G.parseGlobalScope(state, firstFilePath)
	local globalScope    = astNewNode(AstGlobalScope, state.nextToken)
	state.globalScope    = globalScope

	local firstFileScope = parseFileScope(state, globalScope, firstFilePath, false, state.mainFileBasename)

	table.insert(globalScope.statementsStatic, firstFileScope)
	table.insert(globalScope.fileScopes,       firstFileScope)

	astMoveRelevantThingsFromFileScopeToGlobalScope(state, firstFileScope)
	return globalScope
end

-- call = parseCallChain( compilationState, parent [, callee=theFollowingIdentifier, isMethod=false ] )
function _G.parseCallChain(state, parent, callee, isMethod)
	if not callee then
		!SET_OR_RETURN `callee = parseIdentifier(state, parent)` -- We'll update the parent in a moment.
	end

	isMethod = isMethod or false
	local call

	while true do
		local tokType, tokValue, token = eatNextToken(state)

		if tokType == !(TOKEN_STRING) then
			call                = astNewNode(AstCall, token, parent)

			local literal       = astNewNode(AstLiteral, token, call)
			literal.literalType = !(LITERAL_STRING)
			literal.value       = tokValue

			call.arguments[1]   = literal

		elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(") then
			if state.tokens.line1[token] > state.tokens.line2[token-1] then
				!ERROR_OR_RETURN `errorParsingLast(state, "Ambigous syntax. (Is this a call or a new statement?)")`
			end

			call              = astNewNode(AstCall, token, parent)
			tokType, tokValue = peekNextToken(state)

			if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
				eatNextToken(state)

			else
				!DO_OR_RETURN `parseExpressionList(state, call, call.arguments, call.argumentsNamed, false)`

				tokType, tokValue = eatNextToken(state)
				if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
					!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ')' or ','.")`
				end
			end

		else
			!ERROR_OR_RETURN `errorParsingLast(state, "Expected '('.")`
		end

		callee.parent = call
		call.callee   = callee
		call.isMethod = isMethod

		tokType, tokValue = peekNextToken(state)
		if not (isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(") or tokType == !(TOKEN_STRING)) then
			break
		end

		callee   = call
		isMethod = false
	end

	return call
end

function _G.parseLambda(state, parent)
	local lambda = astNewNode(AstLambda, state.nextToken, parent)

	-- Captures.
	local tokType, tokValue = peekNextToken(state)

	if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"[") then
		eatNextToken(state)
		!DO_OR_RETURN `parseNameList(state, lambda, lambda.captures, false)`

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"]") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ']'.")`
		end
	end

	-- Input arguments.
	tokType, tokValue = eatNextToken(state)
	if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(") then
		!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '('.")`
	end

	local callerLocationNode = nil
	tokType, tokValue        = peekNextToken(state)

	if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
		eatNextToken(state)

	else
		!SET_OR_RETURN `local args = parseArguments(state, lambda, true)`
		lambda.argumentsIn         = args

		local takenNames = {}
		local gotError   = false

		-- Add declarations for values that will be baked (only types so far).
		for _, arg in ipairs(args.arguments) do
			astVisitAllNodes(arg, function(node)
				if node.nodeType == !(AST_LOCATION) then
					local loc = node
					if loc.ofCaller then
						lambda.wantCallerLocation = true
						callerLocationNode        = loc
					end
					return
				end

				if node.nodeType ~= !(AST_BAKE) then  return  end
				lambda.isPolymorphic = true

				local bake  = node
				local ident = bake.name
				local name  = ident.name

				if takenNames[name] then
					gotError = true
					!ERROR_OR_RETURN `
						printerr()
						parserMessage(io.stderr, state, ident.token,      "Error", "Duplicate placeholder type name '%s'.", name)
						parserMessage(io.stderr, state, takenNames[name], "Info",  "...previous name is here.")
						exitFailure()
					`
				end
				takenNames[name] = ident.token

				local decl        = astNewNode(AstDeclaration, bake.token, lambda)
				ident.declaration = decl
				decl.name         = astCopy(ident, nil, decl)
				decl.kind         = !(DECL_KIND_LOCAL_CONST)

				-- Note: We're not setting decl.type nor decl.value, leaving the declaration unfinished.
				-- It should be ok as polymorphic functions shouldn't get inferred.

				table.insert(lambda.statementsStatic, decl)
				table.insert(lambda.declarations,     decl)
				table.insert(lambda.bakeDeclarations, decl)

				return !(VISIT_IGNORE_CHILDREN)
			end)
		end
		if gotError then  return nil  end

		table.insert(lambda.statementsStatic, args)

		for _, arg in ipairs(args.arguments) do
			table.insert(lambda.declarations, arg.declaration)

			local decl = arg.declaration

			if arg.autobake == !(AUTOBAKE_REQUIRED) then
				lambda.isPolymorphic = true

				local typeNode       = astNewNode(AstType, decl.token, decl)
				typeNode.kind        = !(TYPE_KIND_SIMPLE_BUILTIN)
				typeNode.typeName    = "placeholder"

				decl.kind            = !(DECL_KIND_LOCAL_CONST)
				decl.value           = typeNode -- During baking this may end up being replaced with something that's not a type, but we don't care about that at this moment!
			end

			if arg.isUsing then
				local using       = astNewNode(AstUsing, arg.token, lambda)

				local ident       = astNewNode(AstIdentifier, arg.token, using)
				ident.name        = decl.name.name
				ident.declaration = decl
				using.expression  = ident

				table.insert(lambda.statementsStatic, using)
				table.insert(lambda.usings,           using)
			end
		end

		if lambda.isPolymorphic and lambda.captures[1] then
			!ERROR_OR_RETURN `errorParsing(state, lambda.token, "Polymorphic functions cannot have captures.")`
		end

		if args.arguments[1] and getLast(args.arguments).declaration.name.nodeType == !(AST_VARARG) then
			lambda.takingVararg = true
		end

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ')'.")`
		end
	end

	-- Output arguments.
	tokType, tokValue = peekNextToken(state)

	if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"->") then
		eatNextToken(state)

		local argsOutStartToken = state.nextToken
		local args              = nil

		tokType, tokValue         = peekNextToken(state, 1)
		local tokType2, tokValue2 = peekNextToken(state, 2)
		local tokType3, tokValue3 = peekNextToken(state, 3)

		-- (...) -> void
		if isToken(tokType,tokValue, !(TOKEN_KEYWORD),"void") then
			eatNextToken(state)

		-- (...) -> ()
		elseif
			isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(")
			and isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),")")
		then
			!ERROR_OR_RETURN `errorParsingNext(state, "Ambigous '()'. (Does the function return no values or does it return a function that takes no arguments?)")`

		-- (...) -> (name:type, ...)
		elseif
			isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(")
			and (
				tokType2 == !(TOKEN_IDENTIFIER)
				or isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),"...","_","$") -- '$' is just for a better error message. Output arguments cannot be baked.
			)
		then
			eatNextToken(state)
			tokType, tokValue = peekNextToken(state)

			!SET_OR_RETURN `args = parseArguments(state, lambda, false)`
			!ASSERT `args.arguments[1]`

			tokType, tokValue = eatNextToken(state)
			if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
				!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ')'.")`
			end

			-- If the return type is a function signature, i.e. () -> () -> ...
			tokType, tokValue = peekNextToken(state)
			if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"->") then
				state.nextToken = argsOutStartToken
				!SET_OR_RETURN `args = parseNamelessOutputArguments(state, lambda)` -- Replace any output arguments we just parsed.
			end

		-- (...) -> type, ...
		else
			!SET_OR_RETURN `args = parseNamelessOutputArguments(state, lambda)`
		end

		if args then
			lambda.argumentsOut = args
			table.insert(lambda.statementsStatic, args)
		end
	end

	-- Body.
	tokType, tokValue = peekNextToken(state)

	if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"{") then
		eatNextToken(state)

		!SET_OR_RETURN `local block = parseBlock(state, lambda)`
		lambda.body                 = block
		table.insert(lambda.statementsStatic, block)

		lambda.bodyEndToken = state.nextToken-1 -- The '}'.

	elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"foreign") then
		eatNextToken(state)
		lambda.bodyIsForeign = true

		if lambda.wantCallerLocation then
			!ERROR_OR_RETURN `errorParsing(
				state, callerLocationNode.token,
				"Foreign functions cannot ulitize !caller_location as a default value - !location has to be used explicitly at the calling sites."
			)`
		end

		local block = astNewNode(AstBlock, state.nextToken-1, lambda) -- Dummy block.
		lambda.body = block
		table.insert(lambda.statementsStatic, block)

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_IDENTIFIER)) then
			!ERROR_OR_RETURN `errorParsingLast(state, "Expected foreign source. (Valid values: lua, method, compiler)")`
		elseif not !!(CONST_SET{"lua","method","compiler"})[tokValue] then
			!ERROR_OR_RETURN `errorParsingLast(state, "Invalid source '%s'. (Valid values: lua, method, compiler)", tokValue)`
		end
		lambda.foreignSource = tokValue

		tokType, tokValue = peekNextToken(state)
		if isToken(tokType,tokValue, !(TOKEN_STRING)) then
			eatNextToken(state)
			lambda.foreignSourceName = newLiteral(lambda, state.nextToken-1, !(LITERAL_STRING), tokValue)
		else
			-- void  (lambda.foreignSourceName will be the name of whatever declared constant the lambda is attached to.)
			!ERROR_OR_RETURN `errorParsingAfterLast(state, "@Incomplete: Infer lambda.foreignSourceName")` -- TEMP
		end

		lambda.bodyEndToken = state.nextToken-1

	elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"body_text") then
		local token = state.nextToken
		eatNextToken(state)

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"{") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '{'.")`
		end

		do
			local bodyTextLambda    = astNewNode(AstLambda, token, lambda)
			bodyTextLambda.metaOnly = true
			lambda.bodyTextLambda   = bodyTextLambda
			table.insert(lambda.statementsStatic, bodyTextLambda)

			local argsOut               = astNewNode(AstArguments, token, bodyTextLambda)
			bodyTextLambda.argumentsOut = argsOut
			table.insert(bodyTextLambda.statementsStatic, argsOut)

			local arg            = astNewNode(AstArgument, token, argsOut)
			argsOut.arguments[1] = arg

			local decl           = astNewNode(AstDeclaration, token, arg)
			arg.declaration      = decl

			decl.name            = newIdentifier(decl, token, "", decl)

			local typeNode       = astNewNode(AstType, token, decl)
			typeNode.kind        = !(TYPE_KIND_SIMPLE_BUILTIN)
			typeNode.typeName    = "string"
			decl.type            = typeNode

			!SET_OR_RETURN `local block = parseBlock(state, bodyTextLambda)`
			bodyTextLambda.body         = block
			table.insert(bodyTextLambda.statementsStatic, block)
		end

		local block = astNewNode(AstBlock, token, lambda) -- Empty until bodyTextLambda has run.
		lambda.body = block
		table.insert(lambda.statementsStatic, block)

		lambda.bodyEndToken                = state.nextToken-1 -- The '}'.
		lambda.bodyTextLambda.bodyEndToken = lambda.bodyEndToken

	else
		lambda.bodyEndToken = state.nextToken-1 -- Dummy value that shouldn't be used since there's no body.
	end

	if lambda.isPolymorphic and not lambda.body then
		!ERROR_OR_RETURN `errorParsing(state, lambda.token, "Types of functions cannot be polymorphic - only functions themselves can.")`
	elseif lambda.captures[1] and not lambda.body then
		!ERROR_OR_RETURN `errorParsingAfterLast(state, "Expected a body for function with captures.")`
	elseif lambda.captures[1] and lambda.bodyIsForeign then
		!ERROR_OR_RETURN `errorParsing(state, lambda.token, "Foreign functions cannot have captures.")`
	end

	return lambda
end



-- expression = parseExpression( compilationState, parent [, previousOperatorPrecedence, expectLvalue=false ] )
function _G.parseExpression(state, parent, prevOpPrecedence, expectLvalue)
	prevOpPrecedence = prevOpPrecedence or 0

	local tokType,  tokValue, exprStartToken = eatNextToken(state)
	local tokType2, tokValue2                = peekNextToken(state, 1)
	local tokType3, tokValue3                = peekNextToken(state, 2)
	local expr, token

	local encounteredParentheses = false

	-- Function call or type with parameters.
	--
	-- Note: We also detect function calls later by the binary operations.
	-- The difference is that here we may have a type.
	--
	if tokType == !(TOKEN_IDENTIFIER) and (
		isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),"(")
		or tokType2 == !(TOKEN_STRING)
	) then
		putBackLastToken(state)
		!SET_OR_RETURN `expr = parseCallChain(state, parent)`

	-- Built-in type.
	elseif isTokenBuiltinType(tokType, tokValue) then
		local typeNode    = astNewNode(AstType, exprStartToken, parent)
		typeNode.kind     = !(TYPE_KIND_SIMPLE_BUILTIN)
		typeNode.typeName = tokValue
		expr              = typeNode

		-- @Polish: Check if there's a '(' after this and give error early.

	-- Identifier.
	elseif tokType == !(TOKEN_IDENTIFIER) then
		local ident = astNewNode(AstIdentifier, exprStartToken, parent)
		ident.name  = tokValue
		expr        = ident

	-- Literal.
	elseif isTokenLiteral(tokType, tokValue) or (
		isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"+","-")
		and !!(CONST_SET{ TOKEN_FLOAT, TOKEN_INTEGER })[tokType2]
	) then
		local literal = astNewNode(AstLiteral, exprStartToken, parent)

		if tokType == !(TOKEN_KEYWORD) then
			if tokValue == "nil" then
				literal.literalType = !(LITERAL_NIL)
				literal.value       = nil
			else
				literal.literalType = !(LITERAL_BOOLEAN)
				literal.value       = tokValue == "true"
			end

		elseif tokType == !(TOKEN_PUNCTUATION) then
			literal.literalType = TOKEN_TYPE_TO_LITERAL_TYPE[tokType2]
			literal.value       = tokValue2 * (tokValue == "-" and -1 or 1)
			eatNextToken(state)
		else
			literal.literalType = TOKEN_TYPE_TO_LITERAL_TYPE[tokType]
			literal.value       = tokValue
		end

		expr = literal

	-- Vararg.
	elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"...") then
		expr         = astNewNode(AstVararg, exprStartToken, parent)
		local lambda = getLambda(expr)
		if not (lambda and lambda.takingVararg) then
			!ERROR_OR_RETURN `errorParsing(state, exprStartToken, "This is not inside a vararg function.")`
		end

	-- Table constructor.
	elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"{") then
		!SET_OR_RETURN `expr = parseTable(state, parent)`

	-- Unary operation.
	elseif
		isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"+","-","#") or
		isToken(tokType,tokValue, !(TOKEN_KEYWORD),"not")
	then
		local unary                      = astNewNode(AstUnary, exprStartToken, parent)
		unary.operation                  = tokValue
		!SET_OR_RETURN `unary.expression = parseExpression(state, unary, OPERATOR_PRECEDENCE.unary)`
		expr                             = unary

	-- Function signature (type) or lambda.
	--
	--     inArgs [-> outArgs] [body]
	--     captures inArgs [-> outArgs] body
	--
	--     captures = '[' capture1, ... ']'
	--     inArgs   = ( [ inArg1, ... ] )
	--     inArg    = [ $ [ ? ] ] name1 [, ... ] : [ $ ] type [ = defaultValue ]
	--     inArg    = using       name1 [, ... ] : [ $ ] type [ = defaultValue ]
	--     outArgs  = void
	--     outArgs  = type1 [, ... ]
	--     outArgs  = ( outArg1 [, ... ] )
	--     outArg   = name1 [, ... ] : type
	--     body     = { ... }
	--
	elseif
		(
			isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(")
			and (
				isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),")")
				or isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),"$")
				or isToken(tokType2,tokValue2, !(TOKEN_KEYWORD),"using")
				or (
					(
						isToken(tokType2,tokValue2, !(TOKEN_IDENTIFIER)) or
						isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),"...")
					)
					and isToken(tokType3,tokValue3, !(TOKEN_PUNCTUATION),":",",","=")
				)
			)
		)
		or (
			isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"[")
			and not isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),"]")
		)
	then
		putBackLastToken(state)
		!SET_OR_RETURN `local lambda = parseLambda(state, parent)`

		if lambda.body then
			expr = lambda
		else
			local typeNode          = astNewNode(AstType, lambda.token, parent)
			typeNode.kind           = !(TYPE_KIND_FUNCTION)
			typeNode.functionHeader = lambda
			lambda.parent           = typeNode
			expr                    = typeNode
		end

	-- Parentheses (must be detected after lambda).
	elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(") then
		encounteredParentheses = true
		!SET_OR_RETURN `expr   = parseExpression(state, parent)`

		if !!(CONST_SET{ AST_CALL, AST_VARARG })[expr.nodeType] then
			-- This is so we know whether to adjust the return values to one or not in certain situations.
			-- Note: Functions with a return argument after the first one marked as #must cannot have their
			-- return arguments adjusted to one.
			expr.surroundedByParentheses = true
		end

		tokType, tokValue = eatNextToken(state)

		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ')'.")`
		end

		--[[ @Incomplete :ParenthesesAmbiguityError
		if expectLvalue and expr.nodeType == !(AST_IDENTIFIER) then
			!ERROR_OR_RETURN `errorParsing(state, exprStartToken, "Unexpected parentheses around identifier.")`
		end
		--]]

	-- Cast.
	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"cast") then
		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '('.")`
		end

		local cast                      = astNewNode(AstCast, exprStartToken, parent)
		!SET_OR_RETURN `cast.targetType = parseExpression(state, cast)`

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ')'.")`
		end

		!SET_OR_RETURN `cast.expression = parseExpression(state, cast, OPERATOR_PRECEDENCE.cast)`
		expr                            = cast

	-- Type of.
	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"type_of") then
		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '('.")`
		end

		local typeOf                      = astNewNode(AstTypeOf, exprStartToken, parent)
		!SET_OR_RETURN `typeOf.expression = parseExpression(state, typeOf)`

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ')'.")`
		end

		expr = typeOf

	-- Variant of.
	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"variant_of") then
		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '('.")`
		end

		local variant                = astNewNode(AstVariantOf, exprStartToken, parent)
		!SET_OR_RETURN `variant.call = parseExpression(state, variant)`

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ')'.")`
		end
		if variant.call.nodeType ~= !(AST_CALL) then
			!ERROR_OR_RETURN `errorParsing(state, exprStartToken+2, "Expected a call.")`
		end

		expr = variant

	-- Array type.
	elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"[") and isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),"]") then
		eatNextToken(state) -- ']'

		local typeNode = astNewNode(AstType, exprStartToken, parent)
		typeNode.kind  = !(TYPE_KIND_ARRAY)

		!SET_OR_RETURN `typeNode.arrayItemType = parseExpression(state, typeNode)`
		expr                                   = typeNode

	-- Unicode codepoint.
	elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"char") then
		tokType, tokValue, token = eatNextToken(state)

		if not isToken(tokType,tokValue, !(TOKEN_STRING)) then
			!ERROR_OR_RETURN `errorParsingLast(state, "Expected a string.")`
		elseif tokValue == "" then
			!ERROR_OR_RETURN `errorParsingLast(state, "Expected a UTF-8 character in the string.")`
		elseif tokValue:find!("^"..UTF8_CHARACTER_PATTERN.."$") then
			-- void
		elseif tokValue:find!("^"..UTF8_CHARACTER_PATTERN) then
			!ERROR_OR_RETURN `errorParsingLast(state, "The string must contain a single UTF-8 character.")`
		else
			!ERROR_OR_RETURN `errorParsingLast(state, "Invalid UTF-8 string.")`
		end

		local literal       = astNewNode(AstLiteral, token, parent)
		literal.literalType = !(LITERAL_INTEGER)
		literal.value       = utf8Codepoint(tokValue)

		expr = literal

	-- Import/load.
	elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"import","load") then
		putBackLastToken(state)
		!SET_OR_RETURN `expr = parseImportOrLoad(state, parent)`

	-- Self (parent file scope).
	elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"self") then
		local import      = astNewNode(AstImport, exprStartToken, parent)
		local fileScope   = astFindParent1(import, !(AST_FILE_SCOPE)) or errorInternal()
		import.isLoad     = not fileScope.isModule
		import.importName = fileScope.moduleName
		import.fileScope  = fileScope
		expr              = import

	-- Struct/enum.
	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"struct") then
		!SET_OR_RETURN `expr = parseStruct(state, parent)`
	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"enum") then
		!SET_OR_RETURN `expr = parseEnum(state, parent)`

	-- Foreign value or struct.
	elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"foreign") then
		tokType, tokValue = peekNextToken(state)

		if isToken(tokType,tokValue, !(TOKEN_KEYWORD),"struct") then
			eatNextToken(state)
			!SET_OR_RETURN `struct = parseStruct(state, parent)`
			struct.isForeign       = true
			expr                   = struct
		else
			!SET_OR_RETURN `expr = parseForeign(state, parent)`
		end

	-- Baked parameter.
	elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"$") then
		local bake                = astNewNode(AstBake, exprStartToken, parent)
		!SET_OR_RETURN `bake.name = parseIdentifier(state, bake)`
		expr                      = bake

	-- Run directive.
	elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"run") then
		putBackLastToken(state)
		!SET_OR_RETURN `expr = parseRun(state, parent, true)` -- @Incomplete: Allow a block here.

	-- Type information.
	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"type_info") then
		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '('.")`
		end

		local typeInfoNode                      = astNewNode(AstTypeInfo, exprStartToken, parent)
		!SET_OR_RETURN `typeInfoNode.expression = parseExpression(state, typeInfoNode)`

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ')'.")`
		end

		expr = typeInfoNode

	-- Null value.
	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"NULL") then
		expr = astNewNode(AstNull, exprStartToken, parent)

	-- Namespace.
	elseif isToken(tokType,tokValue, !(TOKEN_KEYWORD),"namespace") then
		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"{") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '{'.")`
		end

		local namespace = astNewNode(AstNamespace, exprStartToken, parent)
		!DO_OR_RETURN `parseFileScopeOrNamespaceStatements(state, namespace, false, false)` -- Note: This should eat the ending '}'.

		expr = namespace

	-- Compiler value.
	elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"compiler") then
		tokType, tokValue = eatNextToken(state)
		if tokType ~= !(TOKEN_STRING) then
			!ERROR_OR_RETURN `errorParsingLast(state, "Expected the name of a compiler-provided value.")`
		end

		if     tokValue == "typeTagAny"         then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_ANY))
		elseif tokValue == "typeTagArray"       then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_ARRAY))
		elseif tokValue == "typeTagBool"        then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_BOOL))
		elseif tokValue == "typeTagCompound"    then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_COMPOUND))
		elseif tokValue == "typeTagEnum"        then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_ENUM))
		elseif tokValue == "typeTagFloat"       then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_FLOAT))
		elseif tokValue == "typeTagFunction"    then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_FUNCTION))
		elseif tokValue == "typeTagInt"         then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_INT))
		elseif tokValue == "typeTagList"        then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_LIST))
		elseif tokValue == "typeTagNamespace"   then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_NAMESPACE))
		elseif tokValue == "typeTagNone"        then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_NONE))
		elseif tokValue == "typeTagPlaceholder" then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_PLACEHOLDER))
		elseif tokValue == "typeTagString"      then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_STRING))
		elseif tokValue == "typeTagStruct"      then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_STRUCT))
		elseif tokValue == "typeTagTable"       then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_TABLE))
		elseif tokValue == "typeTagType"        then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_TYPE))
		elseif tokValue == "typeTagVararg"      then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_VARARG))
		elseif tokValue == "typeTagVoid"        then  expr = newLiteral(parent, exprStartToken, !(LITERAL_INTEGER), !(TYPE_VOID))
		else
			!ERROR_OR_RETURN `errorParsingLast(state, "There is no compiler-provided value named '%s'.", tokValue)`
		end

	-- Source code location.
	elseif isToken(tokType,tokValue, !(TOKEN_DIRECTIVE),"location") then
		local loc = astNewNode(AstLocation, exprStartToken, parent)

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected '('.")`
		end

		tokType, tokValue = peekNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
			!SET_OR_RETURN `loc.expression = parseExpression(state, loc)`
		end

		tokType, tokValue = eatNextToken(state)
		if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),")") then
			!ERROR_OR_RETURN `errorParsingAfterPrevious(state, "Expected ')'.")`
		end

		expr = loc

	elseif isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"_") then
		!ERROR_OR_RETURN `errorParsingLast(state, "Invalid place for a blank name.")`
	else
		!ERROR_OR_RETURN `errorParsingLast(state, "Expected an expression.")`
	end

	-- Expressions involving several things next to each other.
	local nextCanBeMethodCall = false

	while true do
		tokType,  tokValue, token = peekNextToken(state, 1)
		tokType2, tokValue2       = peekNextToken(state, 2)

		local thisCanBeMethodCall = nextCanBeMethodCall
		nextCanBeMethodCall       = false

		if not tokType then
			break

		-- Left-associative binary operations.
		elseif
			(
				isToken(tokType,tokValue, !(TOKEN_KEYWORD),"and","or") or
				isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"+","-","*","/","//","%","<",">","<=",">=","==","~=")
			)
			and OPERATOR_PRECEDENCE[tokValue] > prevOpPrecedence
			and not (
				isToken(tokType, tokValue,  !(TOKEN_PUNCTUATION),"==") and
				isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),"{")
			)
		then
			eatNextToken(state)

			local binary                 = astNewNode(AstBinary, token, parent)
			binary.operation             = tokValue
			binary.left                  = expr
			!SET_OR_RETURN `binary.right = parseExpression(state, binary, OPERATOR_PRECEDENCE[tokValue])`
			expr.parent                  = binary
			expr                         = binary

		-- Right-associative binary operations.
		-- @Incomplete: Combine string concatenations in some way?
		elseif
			isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"^","..")
			and OPERATOR_PRECEDENCE[tokValue] > prevOpPrecedence
		then
			eatNextToken(state)

			local binary                 = astNewNode(AstBinary, token, parent)
			binary.operation             = tokValue
			binary.left                  = expr
			!SET_OR_RETURN `binary.right = parseExpression(state, binary, OPERATOR_PRECEDENCE[tokValue]-1)` -- The -1 makes this right-associative.
			expr.parent                  = binary
			expr                         = binary

		-- Lookup using '.'. (t.k is syntactic sugar for t["k"])
		elseif
			isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),".")
			and !(OPERATOR_PRECEDENCE.access) > prevOpPrecedence
		then
			eatNextToken(state)

			local access = astNewNode(AstAccess, token, parent)

			tokType, tokValue, token = eatNextToken(state)
			if tokType ~= !(TOKEN_IDENTIFIER) then
				!ERROR_OR_RETURN `errorParsingLast(state, "Expected an identifier.")`
			end

			local literal       = astNewNode(AstLiteral, token, access)
			literal.literalType = !(LITERAL_STRING)
			literal.value       = tokValue

			access.object       = expr
			access.member       = literal

			expr.parent         = access
			expr                = access

			nextCanBeMethodCall = true

		-- Lookup using '['.
		elseif
			isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"[")
			and !(OPERATOR_PRECEDENCE.access) > prevOpPrecedence
		then
			eatNextToken(state)

			local access                  = astNewNode(AstAccess, token, parent)
			access.object                 = expr
			!SET_OR_RETURN `access.member = parseExpression(state, access, OPERATOR_PRECEDENCE[tokValue])`

			tokType, tokValue = eatNextToken(state)
			if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION), "]") then
				!ERROR_OR_RETURN `errorParsingLast(state, "Expected ']'.")`
			end

			expr.parent = access
			expr        = access

		-- Function call.
		elseif
			(
				isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"(")
				or tokType == !(TOKEN_STRING)
			)
			and !(OPERATOR_PRECEDENCE.call) > prevOpPrecedence
		then
			!SET_OR_RETURN `expr = parseCallChain(state, parent, expr, false)`

		-- Method call.
		elseif
			(
				isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"!")
				and (
					isToken(tokType2,tokValue2, !(TOKEN_PUNCTUATION),"(")
					or tokType2 == !(TOKEN_STRING)
				)
			)
			and !(OPERATOR_PRECEDENCE.call) > prevOpPrecedence
		then
			tokType, tokValue = peekLastToken(state)

			if not isToken(tokType,tokValue, !(TOKEN_IDENTIFIER)) then
				!ERROR_OR_RETURN `errorParsingNext(state, "Expected a method name before this.")` -- @Incomplete: Don't require an identifier specifically.
			elseif not thisCanBeMethodCall then
				!ERROR_OR_RETURN `errorParsingLast(state, "Expected an object to call a method on.")`
			end

			eatNextToken(state)
			!SET_OR_RETURN `expr = parseCallChain(state, parent, expr, true)`

		-- Compound type.
		elseif
			isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"|")
			and !(OPERATOR_PRECEDENCE.compound) > prevOpPrecedence
		then
			eatNextToken(state)

			local typeNodeCompound = astNewNode(AstType, token, parent)
			typeNodeCompound.kind  = !(TYPE_KIND_COMPOUND)

			table.insert(typeNodeCompound.components, expr)

			while true do
				!SET_OR_RETURN `local typeExpr = parseExpression(state, parent, OPERATOR_PRECEDENCE.compound)`
				table.insert(typeNodeCompound.components, typeExpr)

				tokType, tokValue = peekNextToken(state)

				if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"|") then
					eatNextToken(state)
					tokType, tokValue = peekNextToken(state)
				else
					break
				end
			end

			expr.parent = typeNodeCompound
			expr        = typeNodeCompound

		-- Conditional.
		elseif
			isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),"?")
			and !(OPERATOR_PRECEDENCE.conditional) > prevOpPrecedence
		then
			eatNextToken(state)

			local conditional = astNewNode(AstConditional, token, parent)

			!SET_OR_RETURN `conditional.condition = expr`
			tokType, tokValue                     = peekNextToken(state)

			if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),":") then
				conditional.conditionAndBranchTrue = conditional.condition
			else
				!SET_OR_RETURN `conditional.branchTrue = parseExpression(state, conditional, OPERATOR_PRECEDENCE.conditional-1)` -- The -1 makes this right-associative.
			end

			tokType, tokValue = eatNextToken(state)
			if not isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),":") then
				!ERROR_OR_RETURN `errorParsingLast(state, "Expected ':'.")`
			end

			!SET_OR_RETURN `conditional.branchFalse = parseExpression(state, conditional, OPERATOR_PRECEDENCE.conditional-1)` -- The -1 makes this right-associative.

			expr.parent = conditional
			expr        = conditional

		else
			break
		end
	end

	if expectLvalue then
		if expr.nodeType == !(AST_IDENTIFIER) then
			if encounteredParentheses then
				!ERROR_OR_RETURN `errorParsing(state, exprStartToken, "Unexpected parentheses around identifier.")` -- :ParenthesesAmbiguityError
			end
		elseif expr.nodeType == !(AST_ACCESS) then
			-- void
		else
			tokType, tokValue = peekNextToken(state)
			if isTokenAssigning(tokType, tokValue) then
				!ERROR_OR_RETURN `errorParsingAfterLast(state, "Expected an assignment target to the left of '%s'. Ambigous statement.", tokValue)`
			else
				!ERROR_OR_RETURN `errorParsing(state, exprStartToken, "Ambigous statement.")`
			end
		end
	end

	return expr
end



-- tokenType, tokenValue, tokenIndex = eatNextToken( compilationState )
function _G.eatNextToken(state)
	local i         = state.nextToken
	state.nextToken = i+1
	local tokType, tokValue = getToken(state.tokens, i)
	return tokType, tokValue, i
end

-- tokenType, tokenValue, tokenIndex = peekNextToken( compilationState [, steps=1 ] )
function _G.peekNextToken(state, steps)
	steps   = steps or 1
	local i = state.nextToken+steps-1
	local tokType, tokValue = getToken(state.tokens, i)
	return tokType, tokValue, i
end

function _G.peekLastToken(state)
	return getToken(state.tokens, state.nextToken-1)
end

function _G.putBackLastToken(state)
	state.nextToken = state.nextToken-1
	assert(state.nextToken >= 1)
end

function _G.eatTrailingSemicolon(state)
	local tokType, tokValue = peekNextToken(state)
	if isToken(tokType,tokValue, !(TOKEN_PUNCTUATION),";") then
		eatNextToken(state)
	end
end



-- errorParsing( compilationState, tokenIndex, formatString, ... )
function _G.errorParsing(state, token, s, ...)
	local tokens = state.tokens

	local buffer
		=  tokens.buffer[token]
		or tokens.buffer[1] -- Not great, but better than crashing.
		or errorInternal("No tokens.")

	local path = tokens.file[token] or tokens.file[1]

	local ptr
		=  tokens.position1[token]
		or token <= 1 and 1
		or tokens.count > 0 and tokens.position2[tokens.count]+1
		or #buffer

	!TRACE(2)
	errorInFile(buffer, path, ptr, "Parser", s, ...)
end

-- parserMessage( [ outputFile=io.stdout, ] compilationState, token, label, formatString, ... )
function _G.parserMessage(file, state, token, label, s, ...)
	if type(file) ~= "userdata" then  return parserMessage(io.stdout, file, state, token, label, s, ...)  end

	local tokens = state.tokens
	local path   = tokens.file[token] or errorInternal("No tokens.")
	reportMessageInFile(file, tokens.buffer[token], path, tokens.position1[token], label, "Parser", s, ...)
end

-- parserMessageAfter( [ outputFile=io.stdout, ] compilationState, token, label, formatString, ... )
function _G.parserMessageAfter(file, state, token, label, s, ...)
	if type(file) ~= "userdata" then  return parserMessage(io.stdout, file, state, token, label, s, ...)  end

	local tokens = state.tokens
	local path   = tokens.file[token] or errorInternal("No tokens.")
	reportMessageInFile(file, tokens.buffer[token], path, tokens.position2[token]+1, label, "Parser", s, ...)
end

-- parserMessageLine( [ outputFile=io.stdout, ] compilationState, token, label, formatString, ... )
function _G.parserMessageLine(file, state, token, label, s, ...)
	if type(file) ~= "userdata" then  return parserMessageLine(io.stdout, file, state, token, label, s, ...)  end

	local tokens = state.tokens
	local path   = tokens.file[token] or errorInternal("No tokens.")

	-- Temp until tokens.line1 has useful values.
	local buffer     = tokens.buffer[token]
	local ptr        = tokens.position1[token]
	local _, nlCount = buffer:sub(1, ptr-1):gsub("\n", "%0")
	local ln         = nlCount+1

	reportMessageOnLine(file, path, ln, label, "Parser", s, ...)
	-- reportMessageOnLine(file, path, tokens.line1[token], label, "Parser", s, ...)
end

-- errorParsingAfter( compilationState, tokenIndex, formatString, ... )
function _G.errorParsingAfter(state, token, s, ...)
	local tokens = state.tokens

	local buffer
		=  tokens.buffer[token]
		or tokens.buffer[1] -- Not great, but better than crashing.
		or errorInternal("No tokens.")

	local path = tokens.file[token] or tokens.file[1]

	local ptr
		=  tokens.position2[token] and tokens.position2[token]+1
		or token <= 1 and 1
		or tokens.count > 0 and tokens.position2[tokens.count]+1
		or #buffer

	!TRACE(2)
	errorInFile(buffer, path, ptr, "Parser", s, ...)
end

function _G.errorParsingLast(state, ...)
	errorParsing(state, state.nextToken-1, ...)
end
function _G.errorParsingNext(state, ...)
	errorParsing(state, state.nextToken, ...)
end

function _G.errorParsingAfterPrevious(state, ...)
	errorParsingAfter(state, state.nextToken-2, ...)
end
function _G.errorParsingAfterLast(state, ...)
	errorParsingAfter(state, state.nextToken-1, ...)
end



function _G.errorUnhandledNodeType(state, node)
	!if DEBUG then
		printerr()
		astPrintTree(io.stderr, node)
		-- !ifDEBUG `astPrintTree(io.stderr, state.globalScope)`
	!end
	nodeError(state, node, "Debug", "Internal compiler error: Incomplete: Unhandled node type '%s'.", (AST_NAMES[node.nodeType] or node.nodeType))
end

function _G.errorUnhandledType(state, node, typeInfo)
	!if DEBUG then
		printerr()
		astPrintTree(io.stderr, node)
	!end
	nodeError(state, node, "Debug", "Internal compiler error: Incomplete: Unhandled type '%s'.", getFriendlyTypeInfoName(typeInfo))
end



-- nodeError( compilationState, node,  agent, formatString, ... )
-- nodeError( compilationState, token, agent, formatString, ... )
function _G.nodeError(state, nodeOrToken, agent, s, ...)
	local tokens = state.tokens
	local token  = type(nodeOrToken) == "number" and nodeOrToken or nodeOrToken.token
	local path   = tokens.file[token] or errorInternal("No tokens.")
	local buffer = tokens.buffer[token]
	!TRACE(2)
	!ifDEBUG `if type(nodeOrToken) == "table" then  astPrint(nodeOrToken)  end`
	errorInFile(buffer, path, tokens.position1[token], agent, s, ...)
end

-- nodeErrorAfter( compilationState, node,  agent, formatString, ... )
-- nodeErrorAfter( compilationState, token, agent, formatString, ... )
function _G.nodeErrorAfter(state, nodeOrToken, agent, s, ...)
	local tokens = state.tokens
	local token  = type(nodeOrToken) == "number" and nodeOrToken or nodeOrToken.token
	local path   = tokens.file[token] or errorInternal("No tokens.")
	local buffer = tokens.buffer[token]
	!TRACE(2)
	!ifDEBUG `if type(nodeOrToken) == "table" then  astPrint(nodeOrToken)  end`
	errorInFile(buffer, path, tokens.position2[token]+1, agent, s, ...)
end

-- nodeMessage( [ outputFile=io.stdout, ] compilationState, node, label, agent, formatString, ... )
function _G.nodeMessage(file, state, node, label, agent, s, ...)
	if type(file) ~= "userdata" then  return nodeMessage(io.stdout, file, state, node, label, agent, s, ...)  end

	local tokens = state.tokens
	local token  = node.token
	local path   = tokens.file[token] or errorInternal("No tokens.")
	local buffer = tokens.buffer[token]
	reportMessageInFile(file, buffer, path, tokens.position1[token], label, agent, s, ...)
end

function _G.where(state, node)
	!ASSERT `node` -- I keep forgetting the state argument...
	nodeMessage(io.stdout, state, node, "Debug", nil, "Here!")
end

-- printLocation( [ outputFile=io.stdout, ] state, node )
-- Note: Does not print any newline!
function _G.printLocation(file, state, node)
	if type(file) ~= "userdata" then  file, state, node = io.stdout, file, state  end

	local tokens = state.tokens
	local token  = node.token
	file:write(tokens.file[token], ":", tokens.line1[token], ": ")
end



-- astPrint    ( [ outputFile=io.stdout, ] node )
-- astPrintTree( [ outputFile=io.stdout, ] node )
do
	local file
	local printNode -- Forward declaration.

	local function write(...)
		file:write(...)
	end

	local function printNodeList(list, indent, printed, printChildren, keyPrefix)
		for i, node in ipairs(list) do
			printNode(node, indent, printed, printChildren, (keyPrefix and keyPrefix..i))
		end
	end

	function printNode(node, indent, printed, printChildren, keyName)
		!local INDENT            = "    "
		!local CHILD_PRINT_START = "if not printChildren then write('\\n') else write('" .. (PRINT_NODE_BRACKETS and " {" or "") .. "\\n')"
		!local CHILD_PRINT_END   = (PRINT_NODE_BRACKETS and "write(indentStr, '}\\n') " or "") .. "end"

		local indentStr = (!(INDENT)):rep(indent)

		assert(node.s)

		write(indentStr)
		if keyName then  write(keyName, " ")  end
		write(AST_NAMES[node.nodeType] or "?")
		write(" @", node.s)
		if node.parent then  write(" ^", node.parent.s)  end

		local queued = node.queued
		if not queued then
			-- void
		elseif queued.unqueued then
			write(" uq:", PIPE_TITLES[queued.pipe])
		else
			write(" p:", PIPE_TITLES[queued.pipe])
			local dependency = queued.waitingOn
			if dependency then
				write(" w:", DEPEND_TITLES[dependency.dependType])
				if !!(CONST_SET{ DEPEND_NODE_INFERRED, DEPEND_NODE_INFERRED_FULLY, DEPEND_NODE_EMITTED })[dependency.dependType] then
					write(":", dependency.dependOn.node.s)
				end
			end
		end

		if printed[node] then
			write("  !!! ERROR: RECURSION DETECTED !!!\n")
		else
			printed[node] = true

			if node.nodeType == !(AST_IDENTIFIER) then
				local ident = node
				write(" (", ident.name)
				if ident.inferredType then  write(", type=", getFriendlyTypeInfoName(ident.inferredType))  end
				if ident.inferredType and getTypeRepresentedByExpression(ident) then  write(", typeRepresented=", getFriendlyTypeInfoName(getTypeRepresentedByExpression(ident)))  end
				if ident.declaration  then  write(", decl=", ident.declaration.s)  end
				write(")\n")

			elseif node.nodeType == !(AST_UNARY) then
				local unary = node
				write(" (", unary.operation, ")")
				!!(CHILD_PRINT_START)
				if unary.expression then  printNode(unary.expression, indent+1, printed, printChildren)  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_BINARY) then
				local binary = node
				write(" (", binary.operation, ")")
				!!(CHILD_PRINT_START)
				if binary.left  then  printNode(binary.left,  indent+1, printed, printChildren)  end
				write(indentStr, !(INDENT.."op "), binary.operation, "\n")
				if binary.right then  printNode(binary.right, indent+1, printed, printChildren)  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_ACCESS) then
				local access = node
				write(" (")
				write(
					access.object and access.object.inferredType and getFriendlyTypeInfoName(
						getTypeRepresentedByExpression(access.object)
						or access.object.inferredType
					)
					or "?"
				)
				write(".")
				write(
					access.member and (
						(access.member.nodeType == !(AST_LITERAL) and tostring(access.member.value))
						or (access.inferredType and getFriendlyTypeInfoName(access.member.inferredType))
					)
					or "?"
				)
				write(")")
				!!(CHILD_PRINT_START)
				if access.object then  printNode(access.object, indent+1, printed, printChildren)  end
				if access.member then  printNode(access.member, indent+1, printed, printChildren)  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_DECLARATION) then
				local decl = node
				if decl.addedByPolymorph then  write(" (addedByPolymorph)")  end
				if decl.assignment       then  write(" (assignment ", decl.assignment.s, " i=", decl.assignmentIndex, ")")  end
				write(" (", (DECL_KIND_TITLES[decl.kind] or "?"))
				if decl.valueTypeInfo    then  write(", typeRepresented=", getFriendlyTypeInfoName(decl.valueTypeInfo))  end
				write(")")

				!!(CHILD_PRINT_START)
				if decl.name  then  printNode(decl.name,  indent+1, printed, printChildren)           end
				if decl.type  then  printNode(decl.type,  indent+1, printed, printChildren, "TYPE")   end
				if decl.value then  printNode(decl.value, indent+1, printed, printChildren, "VALUE")  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_TABLE) then
				local tableNode = node
				!!(CHILD_PRINT_START)
				for i, tableField in ipairs(tableNode.fields) do
					if tableField.key   then  printNode(tableField.key,   indent+1, printed, printChildren, i.."K")  end
					if tableField.value then  printNode(tableField.value, indent+1, printed, printChildren, i.."V")  end
				end
				if tableNode.trailingExpression then  printNode(tableNode.trailingExpression, indent+1, printed, printChildren, "...")  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_CALL) then
				local call = node
				if call.isMethod                then  write(" (method)")         end
				if call.surroundedByParentheses then  write(" (adjustArgsTo1)")  end
				!!(CHILD_PRINT_START)
				if call.callee then  printNode(call.callee, indent+1, printed, printChildren)  end
				printNodeList(call.arguments, indent+1, printed, printChildren, "ARG")
				for i, argNamed in ipairs(call.argumentsNamed) do
					if argNamed.key   then  printNode(argNamed.key,   indent+1, printed, printChildren, i.."K")  end
					if argNamed.value then  printNode(argNamed.value, indent+1, printed, printChildren, i.."V")  end
				end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_ARGUMENTS) then
				local args = node
				!!(CHILD_PRINT_START)
				printNodeList(args.arguments, indent+1, printed, printChildren)
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_ARGUMENT) then
				local arg = node
				if arg.autobake == !(AUTOBAKE_ENABLED)  then  write(" (autobake=may)")   end
				if arg.autobake == !(AUTOBAKE_REQUIRED) then  write(" (autobake=must)")  end
				!!(CHILD_PRINT_START)
				if arg.declaration then  printNode(arg.declaration, indent+1, printed, printChildren)  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_TYPE) then
				local typeNode = node
				write(" (", TYPE_KIND_TITLES[typeNode.kind])
				if typeNode.representedType then
					write(", typeRepresented=", getFriendlyTypeInfoName(typeNode.representedType))
				elseif typeNode.typeName ~= "" then
					write(", name=", typeNode.typeName)
				end
				write(")")
				!!(CHILD_PRINT_START)
				if typeNode.kind == !(TYPE_KIND_FUNCTION) then
					if typeNode.functionHeader then  printNode(typeNode.functionHeader, indent+1, printed, printChildren)  end
				elseif typeNode.kind == !(TYPE_KIND_ARRAY) then
					if typeNode.arrayItemType then  printNode(typeNode.arrayItemType, indent+1, printed, printChildren)  end
				elseif typeNode.kind == !(TYPE_KIND_POLY_STRUCT) then
					if typeNode.arguments then  printNodeList(typeNode.arguments, indent+1, printed, printChildren)  end
				elseif typeNode.kind == !(TYPE_KIND_COMPOUND) then
					if typeNode.components then  printNodeList(typeNode.components, indent+1, printed, printChildren)  end
				end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_TYPE_OF) then
				local typeOf = node
				!!(CHILD_PRINT_START)
				if typeOf.expression then  printNode(typeOf.expression, indent+1, printed, printChildren)  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_VARIANT_OF) then
				local variant = node
				!!(CHILD_PRINT_START)
				if variant.call then  printNode(variant.call, indent+1, printed, printChildren)  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_ASSIGNMENT) then
				local assignment = node
				if assignment.forDeclaration then
					write(" (forDeclaration")
					for _, decl in ipairs(assignment.declarations) do
						write(" ", decl.s)
					end
					write(")")
				end
				write(" (", assignment.binaryOperation, "=)")
				!!(CHILD_PRINT_START)
				printNodeList(assignment.targets, indent+1, printed, printChildren)
				write(indentStr, !(INDENT.."op "), assignment.binaryOperation, "=\n")
				printNodeList(assignment.values, indent+1, printed, printChildren)
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_CAST) then
				local cast = node
				if cast.inferredType then  write(" (", getFriendlyTypeInfoName(cast.inferredType), ")")  end
				!!(CHILD_PRINT_START)
				if cast.targetType then  printNode(cast.targetType, indent+1, printed, printChildren)  end
				if cast.expression then  printNode(cast.expression, indent+1, printed, printChildren)  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_IF) or node.nodeType == !(AST_STATIC_IF) then
				local ifBranch = node
				!!(CHILD_PRINT_START)
				if ifBranch.condition   then  printNode(ifBranch.condition,   indent+1, printed, printChildren)           end
				if ifBranch.branchTrue  then  printNode(ifBranch.branchTrue,  indent+1, printed, printChildren, "TRUE")   end
				if ifBranch.branchFalse then  printNode(ifBranch.branchFalse, indent+1, printed, printChildren, "FALSE")  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_CONDITIONAL) then
				local conditional = node
				!!(CHILD_PRINT_START)
				if conditional.condition   then  printNode(conditional.condition,   indent+1, printed, printChildren)           end
				if conditional.branchTrue  then  printNode(conditional.branchTrue,  indent+1, printed, printChildren, "TRUE")   end
				if conditional.branchFalse then  printNode(conditional.branchFalse, indent+1, printed, printChildren, "FALSE")  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_WHILE) then
				local whileLoop = node
				!!(CHILD_PRINT_START)
				if whileLoop.condition then  printNode(whileLoop.condition, indent+1, printed, printChildren)  end
				if whileLoop.body      then  printNode(whileLoop.body,      indent+1, printed, printChildren)  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_FOR) then
				local forLoop = node
				write(" (", FOR_TITLES[forLoop.forType])
				if forLoop.reverse then  write(", reverse")  end
				write(")")
				!!(CHILD_PRINT_START)
				printNodeList(forLoop.names,       indent+1, printed, printChildren, "NAME")
				printNodeList(forLoop.expressions, indent+1, printed, printChildren, "EXPR")
				if forLoop.body then  printNode(forLoop.body, indent+1, printed, printChildren)  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_RETURN) then
				local returnNode = node
				if returnNode.runDirective then  write(" (runDirective ", returnNode.runDirective.s, ")")  end
				!!(CHILD_PRINT_START)
				printNodeList(returnNode.values, indent+1, printed, printChildren)
				!!(CHILD_PRINT_END)

			elseif !!(CONST_SET{ AST_BREAK, AST_CONTINUE })[node.nodeType] then
				local breakOrContinue = node
				if breakOrContinue.loopName then  write(" (", breakOrContinue.loopName.name, ")")  end
				write("\n")

			elseif node.nodeType == !(AST_DEFER) then
				local defer = node
				!!(CHILD_PRINT_START)
				if defer.body then  printNode(defer.body, indent+1, printed, printChildren)  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_IMPORT) then
				local import = node
				write(" (", (import.isLoad and "load " or "import "), import.importName)
				if import.exported then  write(", exported")  end
				write(")")
				write("\n")

			elseif node.nodeType == !(AST_FOREIGN) then
				local foreign = node
				if foreign.inferredType then  write(" (", getFriendlyTypeInfoName(foreign.inferredType), ")")  end
				write(" (", foreign.source, ")")
				!!(CHILD_PRINT_START)
				if foreign.sourceName then  printNode(foreign.sourceName, indent+1, printed, printChildren)  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_USING) then
				local using = node
				!!(CHILD_PRINT_START)
				if using.expression then  printNode(using.expression, indent+1, printed, printChildren)  end
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_VARARG) then
				local vararg = node
				if vararg.surroundedByParentheses then  write(" (adjustTo1)")  end
				write("\n")

			elseif node.nodeType == !(AST_DEBUG) then
				local debugNode = node
				!!(CHILD_PRINT_START)
				printNode(debugNode.expression, indent+1, printed, printChildren)
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_BAKE) then
				local bake = node
				!!(CHILD_PRINT_START)
				printNode(bake.name, indent+1, printed, printChildren)
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_RUN) then
				local runNode = node
				!!(CHILD_PRINT_START)
				printNode(runNode.lambda, indent+1, printed, printChildren)
				!!(CHILD_PRINT_END)

			elseif node.nodeType == !(AST_LITERAL) then
				local literal = node
				write(" (")

				if !!(CONST_SET{ LITERAL_BOOLEAN, LITERAL_NIL })[literal.literalType] then
					write(tostring(literal.value))

				else
					!local MAX_CHARS = 100
					local vStr = tostring(literal.value):sub(1, !(MAX_CHARS))

					vStr = vStr:gsub(".", function(c)
						local byte = c:byte()
						return
							byte == !(("\n"):byte())   and "{NL}"  or
							byte == !(("\r"):byte())   and "{CR}"  or
							byte == !(("\t"):byte())   and "{TAB}" or
							byte >= 32 and byte <= 126 and c       or -- Printable ASCII characters.
							"?"
					end)

					write(LITERAL_TITLES[literal.literalType])

					if literal.literalType == !(LITERAL_STRING) then
						write("(", #literal.value, ")")
					end

					if vStr ~= "" then  write(": ", vStr:sub(1, !(MAX_CHARS)))  end
				end

				write(")\n")

			elseif node.nodeType == !(AST_SWITCH) then
				local switch = node
				if switch.complete then  write(" (complete)")  end
				!!(CHILD_PRINT_START)
				if switch.value then  printNode(switch.value, indent+1, printed, printChildren)  end
				for _, case in ipairs(switch.cases) do
					if case.value then  printNode(case.value, indent+1, printed, printChildren)  end
					if case.body  then  printNode(case.body,  indent+1, printed, printChildren)  end
				end
				!!(CHILD_PRINT_END)

			elseif node.declarations then -- AstScope and substructs.
				if node.nodeType == !(AST_LAMBDA) then
					local lambda     = node
					local assignment = astFindParent1(lambda, !(AST_ASSIGNMENT))
					local i          = assignment and assignment.forDeclaration and indexOf(assignment.values, lambda)
					if lambda.isPolymorphic then  write(" (polymorphs=", #lambda.polymorphs, ")")  end
					if i                    then  write(" (", assignment.targets[i].name,     ")")  end

				elseif node.nodeType == !(AST_FILE_SCOPE) then
					local fileScope = node
					write(" (", fileScope.path, ")")

				elseif !!(CONST_SET{ AST_STRUCT, AST_ENUM })[node.nodeType] then
					local structOrEnum = node
					local typeInfo     = structOrEnum.representedType
					if typeInfo and typeInfo.name ~= "" then  write(" (", typeInfo.name, ")")  end
				end

				!!(CHILD_PRINT_START)
				if node.nodeType == !(AST_STRUCT) then
					if node.keyType   then  printNode(node.keyType,   indent+1, printed, printChildren, "K")  end
					if node.valueType then  printNode(node.valueType, indent+1, printed, printChildren, "V")  end
				end
				printNodeList(node.statementsStatic,  indent+1, printed, printChildren, "STATIC")
				printNodeList(node.statementsDynamic, indent+1, printed, printChildren, "DYNAMIC")
				if node.nodeType == !(AST_FILE_SCOPE) then
					if node.valueToExport then  printNode(node.valueToExport, indent+1, printed, printChildren, "EXPORT")  end
				end
				!!(CHILD_PRINT_END)

			else
				write("\n")
			end
		end
	end

	function _G.astPrintTree(_file, node)
		if type(_file) ~= "userdata" then  _file, node = io.stdout, _file  end
		!ASSERT `node`
		file = _file
		printNode(node, 0, {}, true)
	end

	function _G.astPrint(_file, node)
		if type(_file) ~= "userdata" then  _file, node = io.stdout, _file  end
		!ASSERT `node`
		file = _file
		printNode(node, 0, {}, false)
	end
end



-- parent, childClosestToParent = astFindParent ( node, parentNodeTypeSet )
-- parent, childClosestToParent = astFindParent1( node, parentNodeType    )
function _G.astFindParent(node, nodeTypeSet)
	while true do
		local lastNode = node
		node           = node.parent
		if not node                   then  return nil,  nil       end
		if nodeTypeSet[node.nodeType] then  return node, lastNode  end
	end
end
function _G.astFindParent1(node, parentNodeType)
	while true do
		local lastNode = node
		node           = node.parent
		if not node                        then  return nil,  nil       end
		if node.nodeType == parentNodeType then  return node, lastNode  end
	end
end
-- scope, statement = astFindParentScope( node )
function _G.astFindParentScope(node)
	local scope, statement = astFindParent(node, !!(CONST_SET(scopeNodeTypes)))
	return scope, statement
end

function _G.astFindCommonParent(node1, node2)
	while true do
		node1 = node1.parent
		if not node1                  then  return nil    end
		if astHasParent(node2, node1) then  return node1  end
	end
end

function _G.astHasParent(node, parent)
	while true do
		node = node.parent
		if not node       then  return false  end
		if node == parent then  return true   end
	end
end

-- node = astFindInTree( topNode, nodeType1, ... )
-- Note: The returned node may be topNode.
function _G.astFindInTree(topNode, ...)
	local nodeTypes    = {...}
	local nodeToReturn = nil

	astVisitAllNodes(topNode, function(node)
		if indexOf(nodeTypes, node.nodeType) then
			nodeToReturn = node
			return !(VISIT_BREAK)
		end
	end)

	return nodeToReturn
end



function _G.astIsOrIsInModule(node)
	local fileScope = (node.nodeType == !(AST_FILE_SCOPE) and node or astFindParent1(node, !(AST_FILE_SCOPE)))
	return fileScope ~= nil and fileScope.isModule
end



-- astVisitAllNodes           ( topNode, callback [, parentContainer, parentKey ] )
-- astVisitAllNodesLeavesFirst( topNode, callback [, parentContainer, parentKey ] )
-- astVisitAllNodesInUnit     ( topNode, visitLambdaNodes, callback )  -- Does not visit the contents of e.g. lambdas and types.
-- [ controlValue = ] callback( node, container, key )  -- Not return anything is the same as returning VISIT_CONTINUE.
-- controlValue = VISIT_CONTINUE|VISIT_BREAK|VISIT_IGNORE_CHILDREN
-- Note: VISIT_IGNORE_CHILDREN triggers an error in astVisitAllNodesLeavesFirst().
do
	local visit -- Forward declaraion.

	local VISITORS = {
		!(
		local TEMPLATE_FUNCTION_HEADER, TEMPLATE_FUNCTION_FOOTER = `
			[$nodeType--[[$name]]] = function(visited, cb, leavesFirst, node)
				`,`
			end,
		`

		local TEMPLATE_TRAVERSE_NODE_IF_SET = `
			if node.$field and visit(visited, cb, leavesFirst, node, "$field", node.$field) then  return true  end
		`
		local TEMPLATE_TRAVERSE_ARRAY = `
			local arr = node.$field
			for i, subNode in ipairs(arr) do
				if visit(visited, cb, leavesFirst, arr, i, subNode) then  return true  end
			end
		`
		local TEMPLATE_TRAVERSE_ARRAY_IF_SET = `
			local arr = node.$field
			if arr then
				for i, subNode in ipairs(arr) do
					if visit(visited, cb, leavesFirst, arr, i, subNode) then  return true  end
				end
			end
		`
		local TEMPLATE_TRAVERSE_FIELDS = `
			for _, tableField in ipairs(node.$field) do
				if tableField.key   and visit(visited, cb, leavesFirst, tableField, "key",   tableField.key  ) then  return true  end
				if tableField.value and visit(visited, cb, leavesFirst, tableField, "value", tableField.value) then  return true  end
			end
		`
		local TEMPLATE_TRAVERSE_CASES = `
			for _, case in ipairs(node.$field) do
				if case.value and visit(visited, cb, leavesFirst, case, "value", case.value) then  return true  end
				if case.body  and visit(visited, cb, leavesFirst, case, "body",  case.body ) then  return true  end
			end
		`

		for nodeType, name in ipairs(astTypeToStructName) do
			local fields = structs[name] or error(name)

			__LUA(templateToLua(TEMPLATE_FUNCTION_HEADER, {nodeType=nodeType, name=name}, (nodeType == 1 and -3 or -1)))

			for _, field in ipairs(fields) do
				local k = field[1]

				if field.ast == "node" then
					__LUA(templateToLua(TEMPLATE_TRAVERSE_NODE_IF_SET, {field=k}))

				elseif field.ast == "array" then
					if field[2] then
						__LUA(templateToLua(TEMPLATE_TRAVERSE_ARRAY, {field=k}))
					else
						__LUA(templateToLua(TEMPLATE_TRAVERSE_ARRAY_IF_SET, {field=k}))
					end

				elseif field.ast == "fields" then
					__LUA(templateToLua(TEMPLATE_TRAVERSE_FIELDS, {field=k}))

				elseif field.ast == "cases" then
					__LUA(templateToLua(TEMPLATE_TRAVERSE_CASES, {field=k}))

				elseif field.ast then
					error(field.ast)
				end
			end

			__LUA(templateToLua(TEMPLATE_FUNCTION_FOOTER, {}, -1))
		end
		)
	}

	function visit(visited, cb, leavesFirst, container, key, node)
		-- Note: We return true from this function if we want to break.

		if visited[node] then
			!ifDEBUG `astPrintTree(node)`
			errorInternal("Node already visited.")
		end
		visited[node] = true

		if not leavesFirst then
			local controlValue = cb(node, container, key) or !(VISIT_CONTINUE)
			if controlValue == !(VISIT_CONTINUE) then
				-- void
			elseif controlValue == !(VISIT_BREAK) then
				return true
			elseif controlValue == !(VISIT_IGNORE_CHILDREN) then
				return false
			end
		end

		local visitor = VISITORS[node.nodeType] or errorInternal(state, node)
		if visitor(visited, cb, leavesFirst, node) then  return true  end

		if leavesFirst then
			local controlValue = cb(node, container, key) or !(VISIT_CONTINUE)
			if controlValue == !(VISIT_CONTINUE) then
				-- void
			elseif controlValue == !(VISIT_BREAK) then
				return true
			elseif controlValue == !(VISIT_IGNORE_CHILDREN) then
				errorInternal("VISIT_IGNORE_CHILDREN does not work when visiting leaves first.")
			end
		end

		return false
	end

	function _G.astVisitAllNodes(node, cb, container, key)
		visit({}, cb, false, container, key, node)
	end

	function _G.astVisitAllNodesLeavesFirst(node, cb, container, key)
		visit({}, cb, true,  container, key, node)
	end

	function _G.astVisitAllNodesInUnit(topNode, visitLambdas, cb)
		astVisitAllNodes(topNode, function(node, container, key)
			local visitNode     = true
			local visitChildren = true

			if node.nodeType == !(AST_TYPE) then
				visitChildren = false
			elseif node.nodeType == !(AST_LAMBDA) then
				visitNode     = visitLambdas
				visitChildren = node == topNode
			end

			local controlValue = !(VISIT_CONTINUE)
			if visitNode then
				controlValue = cb(node, container, key) or !(VISIT_CONTINUE)
			end

			if visitChildren then
				return controlValue
			else
				return controlValue == !(VISIT_BREAK) and !(VISIT_BREAK) or !(VISIT_IGNORE_CHILDREN)
			end
		end)
	end
end



do
	local copyTree -- Forward declaraion.

	local COPIERS = {
		!(
		local TEMPLATE_FUNCTION_HEADER, TEMPLATE_FUNCTION_FOOTER = `
			[$nodeType--[[$name]]] = function(node, token, parent, copies)
				local copy   = astNewNode($name, (token or node.token), parent)
				copies[node] = copy
				`,`
				return copy
			end,
		`

		local TEMPLATE_COPY_VALUE = `
			copy.$field = node.$field
		`
		local TEMPLATE_COPY_VALUE_ARRAY = `
			copy.$field = {unpack(node.$field)}
		`
		local TEMPLATE_COPY_VALUE_ARRAY_IF_SET = `
			copy.$field = node.$field and {unpack(node.$field)}
		`
		local TEMPLATE_COPY_NODE_IF_SET = `
			copy.$field = node.$field and copyTree(node.$field, token, copy, copies)
		`
		local TEMPLATE_COPY_ARRAY = `
			local arrCopy = copy.$field
			for i, subNode in ipairs(node.$field) do
				arrCopy[i] = copyTree(subNode, token, copy, copies)
			end
		`
		local TEMPLATE_COPY_ARRAY_IF_SET = `
			if node.$field then
				local arrCopy = copy.$field or {}
				copy.$field   = arrCopy
				for i, subNode in ipairs(node.$field) do
					arrCopy[i] = copyTree(subNode, token, copy, copies)
				end
			end
		`
		local TEMPLATE_COPY_FIELDS = `
			local fieldsCopy = copy.$field

			for i, tableField in ipairs(node.$field) do
				local tableFieldCopy          = TableField()
				tableFieldCopy.key            = tableField.key   and copyTree(tableField.key,   token, copy, copies)
				tableFieldCopy.value          = tableField.value and copyTree(tableField.value, token, copy, copies)
				tableFieldCopy.keyIsGenerated = tableField.keyIsGenerated
				tableFieldCopy.argumentIndex  = tableField.argumentIndex
				fieldsCopy[i]                 = tableFieldCopy
			end
		`
		local TEMPLATE_COPY_CASES = `
			local casesCopy = copy.$field

			for i, case in ipairs(node.$field) do
				local caseCopy       = SwitchCase()
				caseCopy.value       = case.value and copyTree(case.value, token, copy, copies)
				caseCopy.body        = case.body  and copyTree(case.body,  token, copy, copies)
				caseCopy.fallThrough = case.fallThrough
				casesCopy[i]         = caseCopy
			end
		`

		local fieldsToIgnore = {}
		for _, field in ipairs(structs._AstNode) do
			fieldsToIgnore[field[1]] = true
		end

		for nodeType, name in ipairs(astTypeToStructName) do
			local fields = structs[name] or error(name)

			__LUA(templateToLua(TEMPLATE_FUNCTION_HEADER, {nodeType=nodeType, name=name}, (nodeType == 1 and -3 or -1), -1))

			for _, field in ipairs(fields) do
				local k = field[1]

				if fieldsToIgnore[k] or field.doNotCopy then
					-- void

				elseif field.ast == "node" then
					__LUA(templateToLua(TEMPLATE_COPY_NODE_IF_SET, {field=k}))

				elseif field.ast == "array" then
					if field[2] then
						__LUA(templateToLua(TEMPLATE_COPY_ARRAY, {field=k}))
					else
						__LUA(templateToLua(TEMPLATE_COPY_ARRAY_IF_SET, {field=k}))
					end

				elseif field.ast == "fields" then
					__LUA(templateToLua(TEMPLATE_COPY_FIELDS, {field=k}))

				elseif field.ast == "cases" then
					__LUA(templateToLua(TEMPLATE_COPY_CASES, {field=k}))

				elseif field.ast then
					error(field.ast)

				else
					if field.astRef ~= "array" then
						__LUA(templateToLua(TEMPLATE_COPY_VALUE, {field=k}))
					elseif field[2] then
						__LUA(templateToLua(TEMPLATE_COPY_VALUE_ARRAY, {field=k}))
					else
						__LUA(templateToLua(TEMPLATE_COPY_VALUE_ARRAY_IF_SET, {field=k}))
					end
				end
			end

			__LUA(templateToLua(TEMPLATE_FUNCTION_FOOTER, {}, -1, -1))
		end
		)
	}

	function copyTree(node, token, parent, copies)
		!ASSERT `not copies[node]`
		local copier = COPIERS[node.nodeType] or errorInternal(state, node)
		return copier(node, token, (parent or node.parent), copies)
	end

	local FIXERS = {
		!(
		local TEMPLATE_FUNCTION_HEADER, TEMPLATE_FUNCTION_FOOTER = `
			[$nodeType--[[$name]]] = function(copy, copies)
				`,`
			end,
		`

		local TEMPLATE_FIX_NODE = `
			copy.$field = copies[copy.$field] or copy.$field
		`
		local TEMPLATE_FIX_ARRAY = `
			local arrCopy = copy.$field
			for i, subCopy in ipairs(arrCopy) do
				arrCopy[i] = copies[subCopy] or subCopy
			end
		`
		local TEMPLATE_FIX_ARRAY_IF_SET = `
			local arrCopy = copy.$field
			if arrCopy then
				for i, subCopy in ipairs(arrCopy) do
					arrCopy[i] = copies[subCopy] or subCopy
				end
			end
		`

		for nodeType, name in ipairs(astTypeToStructName) do
			local fields = structs[name] or error(name)

			__LUA(templateToLua(TEMPLATE_FUNCTION_HEADER, {nodeType=nodeType, name=name}, (nodeType == 1 and -3 or -1), -1))

			for _, field in ipairs(fields) do
				local k = field[1]

				if not field.astRef then
					-- void
				elseif field.astRef == "node" then
					__LUA(templateToLua(TEMPLATE_FIX_NODE, {field=k}))
				elseif field.astRef == "array" then
					if field[2] then
						__LUA(templateToLua(TEMPLATE_FIX_ARRAY, {field=k}))
					else
						__LUA(templateToLua(TEMPLATE_FIX_ARRAY_IF_SET, {field=k}))
					end
				else
					error(field.astRef)
				end
			end

			__LUA(templateToLua(TEMPLATE_FUNCTION_FOOTER, {}, -1, -1))
		end
		)
	}

	-- copy, copies = astCopy( node [, token=node.token, parent=node.parent ] )
	-- copies = { [node1]=copy1, ... }
	-- Note: Copies the whole tree. We also don't touch any queued.
	function _G.astCopy(node, token, parent)
		local copies = {}
		local copy   = copyTree(node, token, parent, copies)

		astVisitAllNodes(copy, function(copy)
			local fixer = FIXERS[copy.nodeType] or errorInternal(state, copy)
			fixer(copy, copies)
		end)

		return copy, copies
	end
end



-- expression = astGetExpressionVisuallyFurthestToTheLeft( expression [, onlyFollowCalls=false ] )
function _G.astGetExpressionVisuallyFurthestToTheLeft(expr, onlyFollowCalls)
	while expr.replacing do  expr = expr.replacing  end

	if expr.nodeType == !(AST_CALL) then
		local call = expr
		return astGetExpressionVisuallyFurthestToTheLeft(call.callee, onlyFollowCalls)

	elseif onlyFollowCalls then
		return expr

	elseif expr.nodeType == !(AST_BINARY) then
		local binary = expr
		return astGetExpressionVisuallyFurthestToTheLeft(binary.left, false)

	elseif expr.nodeType == !(AST_ACCESS) then
		local access = expr
		return astGetExpressionVisuallyFurthestToTheLeft(access.object, false)

	elseif expr.nodeType == !(AST_CONDITIONAL) then
		local conditional = expr
		return astGetExpressionVisuallyFurthestToTheLeft(conditional.condition, false)

	else
		return expr
	end
end

-- expression = astGetCalleeVisuallyFurthestToTheLeft( call )
function _G.astGetCalleeVisuallyFurthestToTheLeft(call)
	return astGetExpressionVisuallyFurthestToTheLeft(call, true)
end



function _G.astGetDepth(node)
	local depth = 1
	node        = node.parent

	while node do
		node  = node.parent
		depth = depth+1
	end

	return depth
end



--[[ isNodeAt( state, node, filePath [, lineNumber=any ] )
function _G.isNodeAt(state, node, targetPath, targetLn)
	local token  = node.token
	local tokens = state.tokens
	local path   = tokens.file[token] or errorInternal("No tokens.")

	if path ~= targetPath then  return false  end
	if not targetLn       then  return true   end

	-- Temp until tokens.line1 has useful values.
	local buffer     = tokens.buffer[token]
	local ptr        = tokens.position1[token]
	local _, nlCount = buffer:sub(1, ptr-1):gsub("\n", "%0")
	local ln         = nlCount+1

	return ln == targetLn
end
--]]



function _G.isLiteral(node, literalType)
	return node.nodeType == !(AST_LITERAL) and node.literalType == literalType
end



-- literal = newLiteral( parent, token, literalType, value [, typeInfo ] )
function _G.newLiteral(parent, token, literalType, value, typeInfo)
	local literal        = astNewNode(AstLiteral, token, parent)
	literal.literalType  = literalType
	literal.value        = value
	literal.inferredType = typeInfo
	return literal
end

-- literal = newIdentifier( parent, token, name [, declaration, typeInfo ] )
function _G.newIdentifier(parent, token, name, decl, typeInfo)
	local literal        = astNewNode(AstIdentifier, token, parent)
	literal.name         = name
	literal.declaration  = decl
	literal.inferredType = typeInfo
	return literal
end



function _G.astGetOriginal(node)
	while node.replacing do
		node = node.replacing
	end
	return node
end

function _G.astGetReplacement(node)
	while node.replacedBy do
		node = node.replacedBy
	end
	return node
end


