--[[============================================================
--=
--=  Pipes
--=
--=-------------------------------------------------------------
--=
--=  Glóa - a language that compiles into Lua
--=  by Marcus 'ReFreezed' Thunström
--=
--==============================================================

	addDependency
	addToQueue, addToQueueRecursively, unqueue, unqueueChildrenRecursively, replaceQueuedNode, replaceQueuedNodeAndUnqueueOldTree
	errorPipesAreStuck
	moveToPipe, moveToNextPipe, moveTreeToNextPipe

--============================================================]]



local !struct"Dependency"{ -- @Cleanup: Rename to something with "wait"?
	dependent  = NIL, -- Queued
	dependType = 0,   -- DEPEND_DECLARATION|DEPEND_NODE_INFERRED|DEPEND_NODE_EMITTED
	dependOn   = NIL, -- string|Queued  (The value depends on what dependType is.)
}

-- addDependency( state, dependent, DEPEND_DECLARATION,   name [, scope ] )
-- addDependency( state, dependent, DEPEND_NODE_INFERRED, astNode )
-- addDependency( state, dependent, DEPEND_NODE_EMITTED,  astNode )
function _G.addDependency(state, dependent, dependType, dependOn, extraData)
	local dependency = dependent.queued.waitingOn

	if dependency then
		printTraceback(io.stderr, 2)
		printerr()

		astPrint(dependent)
		nodeMessage(io.stderr, state, dependent, "Error", "Pipes", "Internal compiler error: Dependent already waiting for something.")

		if isAny(dependency.dependType, !(DEPEND_NODE_INFERRED),!(DEPEND_NODE_EMITTED)) then
			astPrint(dependency.dependOn.node)
			nodeMessage(io.stderr, state, dependency.dependOn.node, "Info", "Pipes", "...it's waiting on this.")
		end

		exitFailure()
	end

	!if DEBUG then
		if dependType == !(DEPEND_DECLARATION) then
			assert(type(dependOn) == "string")
			assert(extraData == nil or type(extraData) == "table")
		elseif isAny(dependType, !(DEPEND_NODE_INFERRED),!(DEPEND_NODE_EMITTED)) then
			assert(type(dependOn) == "table")
		else
			errorInternal("%d", dependType)
		end
	!end

	if isAny(dependType, !(DEPEND_NODE_INFERRED),!(DEPEND_NODE_EMITTED)) then
		assert(dependent ~= dependOn)
		dependOn = dependOn.queued
	end

	dependency            = Dependency()
	dependency.dependent  = dependent.queued
	dependency.dependType = dependType
	dependency.dependOn   = dependOn
	dependency.extraData  = extraData

	dependent.queued.waitingOn = dependency

	if itemWith3(state.dependencies, "dependent",dependency.dependent, "dependType",dependency.dependType, "dependOn",dependency.dependOn) then
		printTraceback(io.stderr, 2)
		printerr()

		nodeMessage(io.stderr, state, dependent, "Error", "Pipes", "Internal compiler error: Trying to add dependency twice.")

		if isAny(dependType, !(DEPEND_NODE_INFERRED),!(DEPEND_NODE_EMITTED)) then
			nodeMessage(io.stderr, state, dependOn.node, "Info", "Pipes", "...depending on this.")
		end

		exitFailure()
	end

	table.insert(state.dependencies, dependency)

	!if DEBUG then
		--[[
		if debug_onlyInferTypes then
			io.stdout:write("DEPEND ")
			astPrint(dependent)

			io.stdout:write("    ON ", DEPEND_TITLES[dependType], " ")
			if dependType == !(DEPEND_DECLARATION) then
				print(dependOn)
			elseif dependType == !(DEPEND_NODE_INFERRED) then
				astPrint(dependOn.node)
			elseif dependType == !(DEPEND_NODE_EMITTED) then
				astPrint(dependOn.node)
			else
				print("? ("..tostring(dependOn)..")")
			end
		end
		--]]
	!end
end



local !struct"Queued"{
	node              = NIL, -- AstNode
	container         = NIL,
	key               = NIL,
	pipe              = PIPE_NONE,
	pipeHighestExited = PIPE_NONE,
	waitingOn         = NIL, -- Dependency
	unqueued          = false,
}

-- addToQueue( state, node, container=nil, key=nil, pipe [, pipeHighestExited=pipe-1 ] )
function _G.addToQueue(state, node, container, key, pipe, pipeHighestExited)
	-- astPrint(node)
	!ASSERT `not node.queued`

	local queued     = Queued()
	queued.node      = node
	queued.container = container
	queued.key       = key
	queued.pipe      = pipe
	queued.pipeHighestExited = math.max(pipeHighestExited or pipe-1, !(PIPE_NONE))

	node.queued = queued
	table.insert(state.queue, queued)

	-- Make assignment targets in declaration statements wait for their declaration.
	if
		node.nodeType == !(nodeTypes.AstIdentifier)
		and node.declaration
		and node.parent.nodeType == !(nodeTypes.AstAssignment)
		and node.parent.forDeclaration
		and indexOf(node.parent.targets, node)
	then
		local ident = node
		addDependency(state, ident, !(DEPEND_NODE_INFERRED), ident.declaration.name)
	end
end

-- addToQueueRecursively( state, topNode [, pipe=PIPE_INFER ] )
function _G.addToQueueRecursively(state, topNode, pipe)
	pipe = pipe or !(PIPE_INFER)

	astVisitAllNodesLeavesFirst(topNode, function(node, container, key)
		addToQueue(state, node, container, key, pipe)
	end)
end

-- addUnqueuedChildrenToQueueRecursively( state, topNode [, pipe=PIPE_INFER ] )
function _G.addUnqueuedChildrenToQueueRecursively(state, topNode, pipe)
	pipe = pipe or !(PIPE_INFER)

	astVisitAllNodesLeavesFirst(topNode, function(node, container, key)
		if node == topNode then  return                           end
		if node.queued     then  return !(VISIT_IGNORE_CHILDREN)  end
		addToQueue(state, node, container, key, pipe)
	end)
end

function _G.unqueueChildrenRecursively(state, topNode)
	astVisitAllNodes(topNode, function(node)
		if node ~= topNode then
			node.queued.unqueued = true
		end
	end)
end

-- Note: nodeOld doesn't have to be queued right now - it just needs a Queued object reference.
-- (@Cleanup: Sometimes we just want to make use of queued.container/key.)
function _G.replaceQueuedNode(state, nodeOld, nodeNew)
	assert(not nodeNew.queued)

	local queued   = nodeOld.queued or errorInternal()
	queued.node    = nodeNew
	nodeOld.queued = nil
	nodeNew.queued = queued

	if queued.container then
		queued.container[queued.key] = nodeNew
	end

	nodeOld.replacedBy = nodeNew
	nodeNew.replacing  = nodeOld

	!if DEBUG then
		-- [[
		if debug_onlyInferTypes then
			io.stdout:write("replace: ") ; astPrint(nodeOld)
			io.stdout:write("   with: ") ; astPrint(nodeNew)
			-- where(state, nodeOld)
			-- where(state, nodeOld.parent)
		end
		--]]
	!end
end

function _G.replaceQueuedNodeAndUnqueueOldTree(state, nodeOld, nodeNew)
	unqueueChildrenRecursively(state, nodeOld)
	replaceQueuedNode(state, nodeOld, nodeNew)
end



function _G.moveToPipe(state, node, targetPipe)
	local queued             = node.queued
	queued.pipeHighestExited = math.max(queued.pipeHighestExited, queued.pipe)
	queued.pipe              = targetPipe
end

function _G.moveToNextPipe(state, node, targetPipe)
	local queued = node.queued

	if targetPipe ~= queued.pipe+1 then
		errorInternal(
			2, "Trying to move %s node from pipe %d (%s) to %d (%s).",
			AST_NODE_TYPE_NAMES[node.nodeType],
			queued.pipe, (PIPE_TITLES[queued.pipe] or "*INVALID*"),
			targetPipe,  (PIPE_TITLES[targetPipe]  or "*INVALID*")
		)
	end

	queued.pipeHighestExited = math.max(queued.pipeHighestExited, queued.pipe)
	queued.pipe              = targetPipe
end

function _G.moveTreeToNextPipe(state, topNode, targetPipe)
	astVisitAllNodes(topNode, function(node)
		moveToNextPipe(state, node, targetPipe)
	end)
end



function _G.errorPipesAreStuck(state)
	-- [[ Report undeclared identifier.
	local function getDeclaredIdentifierWaitingToBeDeclaredWithName(name, queuedToIgnore) -- @Cleanup: What is this even?!?!
		for _, queued in ipairs(state.queue) do
			if queued ~= queuedToIgnore and not queued.unqueued and queued.waitingOn and queued.node.nodeType == !(nodeTypes.AstIdentifier) then
				local ident = queued.node
				if ident.parent == ident.declaration and ident.name == name then  return queued  end
			end
		end
		return nil
	end

	for _, queued in ipairs(state.queue) do
		local dependency = not queued.unqueued and queued.waitingOn

		if dependency and dependency.dependType == !(DEPEND_DECLARATION) then
			local name = dependency.dependOn

			if not getDeclaredIdentifierWaitingToBeDeclaredWithName(name, queued) then
				local node = queued.node

				if name == "..." then
					typeError(state, node, "This is not inside a function that takes a vararg.")

				elseif node.nodeType == !(nodeTypes.AstLookup) then
					local lookup = node

					if lookup.object.inferredType.scope.nodeType == !(nodeTypes.AstFileScope) then
						local fileScope = lookup.object.inferredType.scope
						typeError(
							state, node.member,
							"Undeclared identifier '%s' in %s '%s'.",
							name,
							fileScope.isModule and "module"             or "the file scope of",
							fileScope.isModule and fileScope.moduleName or fileScope.path
						)
					else
						printerr()
						typeMessage(io.stderr, state, lookup.member,                    "Error", "Undeclared identifier '%s'.", name)
						typeMessage(io.stderr, state, lookup.object.inferredType.scope, "Info",  "...this is the namespace.")
						exitFailure()
					end

				else
					typeError(state, node, "Undeclared identifier '%s'.", name)
				end
			end
		end
	end
	--]]

	-- [[ Report identifier waiting for declaration to be inferred.
	for _, queued in ipairs(state.queue) do
		local dependency = not queued.unqueued and queued.waitingOn

		if
			dependency
			and dependency.dependType             == !(DEPEND_NODE_INFERRED)
			and queued.node.nodeType              == !(nodeTypes.AstIdentifier)
			and dependency.dependOn.node.nodeType == !(nodeTypes.AstDeclaration)
		then
			local decl = dependency.dependOn.node

			printerr()
			!ifDEBUG`astPrint(expr)`
			typeMessage(io.stderr, state, decl,        "Error", "Failed inferring the type of this declaration.")
			!ifDEBUG`astPrint(queued.node)`
			typeMessage(io.stderr, state, queued.node, "Info",  "...this identifier is waiting for the above to finish.")
			exitFailure()
		end
	end
	--]]

	-- [[ Report about-to-be-declared identifier waiting for something.
	for _, queued in ipairs(state.queue) do
		local dependency = not queued.unqueued and queued.waitingOn

		if
			dependency
			and dependency.dependType == !(DEPEND_NODE_INFERRED)
			and queued.node.nodeType  == !(nodeTypes.AstIdentifier)
			and queued.node.parent    == queued.node.declaration
		then
			local expr = dependency.dependOn.node

			printerr()
			!ifDEBUG`astPrint(expr)`
			typeMessage(io.stderr, state, expr,        "Error", "Failed inferring the type of this expression.")
			!ifDEBUG`astPrint(queued.node)`
			typeMessage(io.stderr, state, queued.node, "Info",  "...this identifier is waiting for the above to finish.")
			exitFailure()
		end
	end
	--]]

	-- [[ Report something waiting for something else to be inferred.
	for _, queued in ipairsr(state.queue) do
		local dependency = not queued.unqueued and queued.waitingOn

		if dependency and dependency.dependType == !(DEPEND_NODE_INFERRED) then
			local expr = dependency.dependOn.node

			printerr()
			!ifDEBUG`astPrint(expr)`
			typeMessage(io.stderr, state, expr,        "Error", "Failed inferring the type of this expression.")
			!ifDEBUG`astPrint(queued.node)`
			typeMessage(io.stderr, state, queued.node, "Info",  "...this thing is waiting for the above to finish.")
			exitFailure()
		end
	end
	--]]

	-- [[ Report something waiting for something else to emit code.
	for _, queued in ipairs(state.queue) do
		local dependency = not queued.unqueued and queued.waitingOn

		if dependency and dependency.dependType == !(DEPEND_NODE_EMITTED) then
			local expr = dependency.dependOn.node

			printerr()
			astPrint(queued.node)
			bcMessage(io.stderr, state, queued.node, "Error", "Internal compiler error: Failed emitting code for %s.", AST_NODE_TYPE_NAMES[queued.node.nodeType])
			astPrint(expr)
			bcMessage(io.stderr, state, expr,        "Info",  "...it is waiting for this %s to finish.", AST_NODE_TYPE_NAMES[expr.nodeType])
			exitFailure()
		end
	end
	--]]

	errorInternal("Pipes are stuck. Also failed to figure out where the issue actually is. Oops...")
end


