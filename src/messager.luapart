--[[============================================================
--=
--=  Messager
--=
--=  Structs here are reflected in modules/compiler.gloa
--=  Relevant enums are in messagerEnums.luapart
--=
--=-------------------------------------------------------------
--=
--=  Glóa - a language that compiles into Lua
--=  by Marcus 'ReFreezed' Thunström
--=
--==============================================================

	...

--============================================================]]

local !struct"CompilerMessage"{
	{`kind`, 0},
}

local !struct"CompilerMessageFile:CompilerMessage"{
	{`path`, ""},
}

local !struct"CompilerMessageCompilationPhase:CompilerMessage"{
	{`phase`,      0},
	{`outputPath`, ""},
}

local !struct"CompilerMessageCodeTypechecked:CompilerMessage"{
	{`declaration`, nil}, -- CodeDeclaration
}

local MESSAGE_KIND_TO_STRUCT = {
	[!(MESSAGE_CODE_TYPECHECKED)]  = CompilerMessageCodeTypechecked,
	[!(MESSAGE_COMPILATION_PHASE)] = CompilerMessageCompilationPhase,
	[!(MESSAGE_COMPLETE)]          = CompilerMessage,
	[!(MESSAGE_FILE)]              = CompilerMessageFile,
}

function _G.newMessage(messageKind)
	local Message = MESSAGE_KIND_TO_STRUCT[messageKind] or errorInternal("Incomplete: Handle messageKind=%d", messageKind)
	local message = Message()
	message.kind  = messageKind
	return message
end

--
-- Code nodes
--

!struct"_CodeNode"{
	{`kind`,         0}, -- CODE_*
	{`serial`,       0},

	{`typeInfo`,     nil}, -- PublicTypeInfo

	{`filepath`,     ""},
	{`lineNumber`,   ""},
	{`filePosition`, ""},
}

_G.!struct"CodeDeclaration:_CodeNode"{
	_overrides={{`kind`,CODE_DECLARATION}},
	{`name`,           ""},
	{`expressions`,    {}},  -- []CodeNode
	{`rootExpression`, nil}, -- CodeNode
	{`isConstant`,     false},
}

_G.!struct"CodeIdentifier:_CodeNode"{
	_overrides={{`kind`,CODE_IDENTIFIER}},
	{`name`,        ""},
	{`declaration`, nil}, -- CodeDeclaration
}

_G.!struct"CodeLiteral:_CodeNode"{
	_overrides={{`kind`,CODE_LITERAL}},
	{`value`, nil},
}

_G.!struct"CodeOperator:_CodeNode"{
	_overrides={{`kind`,CODE_OPERATOR_EXPRESSION}},
	{`operator`, ""},
	{`left`,     nil}, -- CodeNode
	{`middle`,   nil}, -- CodeNode
	{`right`,    nil}, -- CodeNode
}

-- @Incomplete...
